<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Typora+PicGo+Gitee 配置图床</title>
      <link href="/2022/01/11/Tools/Typora+PicGo+Gitee%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/01/11/Tools/Typora+PicGo+Gitee%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em><strong>为什么要这样配置？</strong></em> </p><ul><li><p>在撰写markdown文件时，图片存储在不同的目录下，难以管理。</p></li><li><p>难进行迁移博客，例如在使用 <code>Hugo</code> 撰写博客，需要将图片保存在某个静态目录下，若是迁移至 <code>hexo</code> 则又需要存储在不同目录，同时也需要更改相对路径。</p></li><li><p>博客中静态目录的图片需要一同上传至服务器或者GitHub.io</p></li></ul><h2 id="一-安装配置PicGo"><a href="#一-安装配置PicGo" class="headerlink" title="一. 安装配置PicGo"></a>一. 安装配置PicGo</h2><h3 id="1-安装：PicGo"><a href="#1-安装：PicGo" class="headerlink" title="1. 安装：PicGo"></a>1. 安装：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></h3><p>这里要记住安装目录，后续配置Typora需要使用。</p><h3 id="2-令牌获取"><a href="#2-令牌获取" class="headerlink" title="2. 令牌获取"></a>2. 令牌获取</h3><p>首先在个人设置中，找到 <strong>安全设置 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 私人令牌</strong> ，如下图所示：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111201025130.png" alt="image-20220111201025130"></p><p>点击生成新令牌，勾选权限（可以按照自己的需求选择，但是其中 <strong>projects</strong> 一项是必须的）。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111201335279.png" alt="image-20220111201335279"></p><p>填写描述之后，生成令牌，此时需要记住生成的令牌（数字和字母组成的字符串），<em><strong>关闭之后就无法再次查看</strong></em>。</p><p>Github的获取方式请自行搜索。</p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><h4 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h4><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111171254346.png" alt="image-20220111171254346"></p><h4 id="3-2-配置Gitee为图床"><a href="#3-2-配置Gitee为图床" class="headerlink" title="3.2 配置Gitee为图床"></a>3.2 配置Gitee为图床</h4><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111171940539.png" alt="image-20220111171940539"></p><p>如果有条件可以直接使用Github作为图床，但是在中国大陆使用效果不好，给出过程。Github不用安装任何插件，只需要在PicGo设置下将Github图床勾选上。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111172204205.png" alt="image-20220111172204205"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111172501139.png" alt="image-20220111172501139"></p><p><em><strong>注意：</strong></em>这里我将Gitee设置为默认图床，配置结束之后，最好在上传区测试能否上传成功，避免将问题堆积在后续的Typora配置。记得开机启动PicGo，或者设置为开机自启动。</p><h2 id="二-安装配置Typora"><a href="#二-安装配置Typora" class="headerlink" title="二. 安装配置Typora"></a>二. 安装配置Typora</h2><p>正式版收费，希望支持正版，另外如需安装 <a href="https://github.com/Mas0nShi/typoraCracker">破解版</a> 或 <a href="https://typora.io/windows/dev_release.html"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="4.038ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1785 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(429,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(895,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1256,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></a> 版请自行解决. 这里主要解决配置Typora的问题。</p><p>首先点击<strong>文件 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 偏好设置 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 图像</strong> </p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111203332343.png" alt="image-20220111203332343"></p><p>紧接着，进行配置Typora，如下所示：选择<strong>上传图片</strong>，规则按自己的需求勾选，**上传服务选择PicGo (app)**，PicGo路径按自己安装的目录确定，其余内容查看下图。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111203702937.png" alt="image-20220111203702937"></p><p>配置结束后，点击 <strong>验证图片上传选项</strong>，验证成功与否。若是成功会弹出成功提示。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111204509103.png" alt="image-20220111204509103"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20220111204559651.png" alt="image-20220111204559651"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——结构化设计</title>
      <link href="/2022/01/02/Software%20Process%20and%20Tools/09%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/01/02/Software%20Process%20and%20Tools/09%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><h3 id="1-结构化设计的内容"><a href="#1-结构化设计的内容" class="headerlink" title="1. 结构化设计的内容"></a>1. 结构化设计的内容</h3><p>结构化的系统设计主要考虑：模块的层次化、模块之间的接口、数据库设计、用户界面设计</p><p>为每个模块设计内部逻辑</p><p>采用自顶向下方法进行设计：具有系统自动化边界的DFD、结构图</p><h3 id="2-自动化系统边界划分"><a href="#2-自动化系统边界划分" class="headerlink" title="2. 自动化系统边界划分"></a>2. 自动化系统边界划分</h3><ul><li><p>将数据流图划分为手工处理部分和系统能自动完成的部分</p></li><li><p>程序的处理过程可以在系统边界内部或外部</p></li><li><p>数据流可以在系统边界内部或外部</p></li><li><p>穿过系统界线的数据流代表了系统的输入和输出</p></li><li><p>在最终的系统中，数据流将成为用户界面中的表单、报表、供其他系统使用的数据文件等</p></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227195118410.png" alt="image-20211227195118410"></p><h2 id="二-结构图"><a href="#二-结构图" class="headerlink" title="二. 结构图"></a>二. 结构图</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p><em><strong>结构图的定义：</strong></em>以<strong>模块为基础、以模块间的调用为关联</strong>所构成的图称为模块结构图，简称结构图。</p><p><em><strong>结构图的作用：</strong></em> <strong>层次化</strong>的方法来描述系统每部分的<strong>功能和子功能</strong>、展示计算机程序模块之间的联系</p><p><em><strong>结构图符号：</strong></em> </p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227195507138.png" alt="image-20211227195507138" style="zoom:80%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227211539863.png" alt="image-20211227211539863"></p><h3 id="2-结构图创建"><a href="#2-结构图创建" class="headerlink" title="2. 结构图创建"></a>2. 结构图创建</h3><p><em><strong>主要步骤：</strong></em></p><ul><li>确定主要<strong>信息流</strong></li><li>代表输入和输出间最基本变化的过程</li><li>重画数据流，将输入放左边，输出放右边</li><li>初步建立一个结构图草图</li><li>加入其他模块实现功能：数据输入、数据处理、数据输出</li><li>使用结构化语言或决策树添加模块间逻辑</li><li>进一步求精</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212112660.png" alt="image-20211227212112660" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212121164.png" alt="image-20211227212121164" style="zoom: 80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212133605.png" alt="image-20211227212133605" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212147684.png" alt="image-20211227212147684" style="zoom: 67%;"><h2 id="三-结构化设计——DFD到系统结构图"><a href="#三-结构化设计——DFD到系统结构图" class="headerlink" title="三. 结构化设计——DFD到系统结构图"></a>三. 结构化设计——DFD到系统结构图</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212620548.png" alt="image-20211227212620548" style="zoom:80%;"><ul><li><em><strong>事务性：</strong></em>几条路径不全用</li><li><em><strong>复杂变换型：</strong></em>几条路径全部使用</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212812043.png" alt="image-20211227212812043" style="zoom:80%;"><p>扇入扇出度限定</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212931304.png" alt="image-20211227212931304"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212938391.png" alt="image-20211227212938391"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212948151.png" alt="image-20211227212948151"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227212955886.png" alt="image-20211227212955886"></p><h1 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h1><h2 id="一-面向对象设计概述"><a href="#一-面向对象设计概述" class="headerlink" title="一. 面向对象设计概述"></a>一. 面向对象设计概述</h2><h3 id="1-面向对象的设计"><a href="#1-面向对象的设计" class="headerlink" title="1. 面向对象的设计"></a>1. 面向对象的设计</h3><ul><li>传统结构化方法：分析阶段和设计阶段分得特别清楚，两套不同的建模符号和建模方法</li><li>面向对象设计（OOD）：采用<strong>统一的“对象”的概念</strong>，阶段区分不明显，仍然使用“类、属性、操作”等概念，是在OOA（面向对象分析）基础上的进一步细化，更加接近底层的技术实现。</li></ul><h3 id="2-面向对象设计中的基本元素"><a href="#2-面向对象设计中的基本元素" class="headerlink" title="2. 面向对象设计中的基本元素"></a>2. 面向对象设计中的基本元素</h3><ul><li><em><strong>基本单元：设计类</strong></em>——对应于OOA中的分析类</li><li>为了系统实现和维护过程中的方便些，将多个设计类按照关联的<strong>紧密程度</strong>聚合到一起，形成<strong>大颗粒度的“包”</strong> <ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227215755785.png" alt="image-20211227215755785" style="zoom:80%;"></li></ul></li><li>一个包或多个包聚集在一起，形成<strong>“子系统”</strong></li><li>多个子系统构成完整的<strong>“系统”</strong></li></ul><h3 id="3-面向对象设计的两个阶段"><a href="#3-面向对象设计的两个阶段" class="headerlink" title="3. 面向对象设计的两个阶段"></a>3. 面向对象设计的两个阶段</h3><ul><li><em><strong>系统设计：</strong></em> <strong>概要设计</strong>（体系结构），选择解决问题的基本途径（框架、平台、工具等），系统结构风格</li><li><em><strong>对象设计：</strong></em> <strong>详细设计</strong>（具体实现），细化新的对象，识别新对象，在系统所需的应用对象与可复用的商业构件之间建立关联</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227215831023.png" alt="image-20211227215831023" style="zoom:80%;"><h2 id="二-系统设计"><a href="#二-系统设计" class="headerlink" title="二. 系统设计"></a>二. 系统设计</h2><p>见上图</p><ul><li><em><strong>系统体系结构</strong></em></li><li><em><strong>识别设计元素：</strong></em>类、包、子系统</li><li><em><strong>部署子系统</strong></em></li><li><em><strong>数据的存储策略</strong></em></li><li><em><strong>检查系统设计</strong></em></li></ul><h2 id="三-包的设计"><a href="#三-包的设计" class="headerlink" title="三. 包的设计"></a>三. 包的设计</h2><ul><li><strong>分析类</strong>简单，逻辑抽象单一，一对一映射为<strong>设计类</strong></li><li><strong>分析类</strong>复杂，分解为<strong>多个设计类</strong>，映射为<strong>包或子系统</strong></li><li>子系统/包的划分符合<strong>高内聚低耦合</strong>的特性（对外清晰）</li></ul><p>一般来说，把在语义上接近且倾向于一起变化的类组织在一起形成包（业务和逻辑上联系）</p><ul><li>概念语义相近</li><li>功能相关性：变更联系、删除后另一个变多余、频繁交互通信、一般/特殊关系、激发创建另一个类</li></ul><p>包之间的关系：依赖（&lt;<import>&gt;、&lt;<access>&gt;等）、泛化（继承）</access></import></p><p><em><strong><u>包图：</u></strong></em></p><ul><li>类似于文件夹的符号</li><li>组织元素的方式，组织任何事物：类、其他包、用例等</li></ul><h2 id="四-对象设计"><a href="#四-对象设计" class="headerlink" title="四. 对象设计"></a>四. 对象设计</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li>对象设计：细化需求分析和系统设计阶段产生的模型、确定新的设计对象、消除问题域和实现域之间的差异</li><li>主要任务：精细化属性（参数和基本实现结构）和操作（类型和可见性）、明确类之间的关系、整理优化设计模型</li></ul><h3 id="2-基本步骤"><a href="#2-基本步骤" class="headerlink" title="2. 基本步骤"></a>2. 基本步骤</h3><h4 id="2-1-创建初始的设计类"><a href="#2-1-创建初始的设计类" class="headerlink" title="2.1. 创建初始的设计类"></a>2.1. 创建初始的设计类</h4><p><strong>分析类 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 设计类</strong></p><h4 id="2-2-细化属性"><a href="#2-2-细化属性" class="headerlink" title="2.2. 细化属性"></a>2.2. 细化属性</h4><ul><li>具体说明属性的名称、类型、缺省值、可见性：<em><strong>visibility attributeName: Type = Default</strong></em></li><li>属性来源：实体<strong>基本信息、状态信息、其他类之间关联信息、派生属性</strong>（需要计算其他属性的值才能得到，属性前加“/”）</li><li>可见性尽可能private，调用函数set更新、get访问</li><li><em><strong>状态属性：</strong></em>大部分由其他属性值进行逻辑判断得到，状态值变迁是由实体类操作导致的</li><li><em><strong>关联属性：</strong></em>关联属性不只是一个ID，而是关联的一个或多个<strong>完整的对方类的对象</strong>，<strong>和数据库中的外键区分</strong>，在程序运行空间实现object之间导航，无需经过数据库层存取</li></ul><h4 id="2-3-细化操作"><a href="#2-3-细化操作" class="headerlink" title="2.3. 细化操作"></a>2.3. 细化操作</h4><ul><li>给出完整的操作描述：确定操作的名称、参数、返回值、可见性等，遵从程序设计语言命名规则</li><li>详细说明操作的内部实现逻辑：伪代码或者绘制程序流程图/活动图</li><li>提取公共部分</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227224436013.png" alt="image-20211227224436013" style="zoom:80%;"><h4 id="2-4-定义状态"><a href="#2-4-定义状态" class="headerlink" title="2.4. 定义状态"></a>2.4. 定义状态</h4><h4 id="2-5-细化类之间的关系"><a href="#2-5-细化类之间的关系" class="headerlink" title="2.5. 细化类之间的关系"></a>2.5. 细化类之间的关系</h4><p>细化关系：关联关系、依赖关系、继承关系、组合和聚合关系</p><p>关联关系(Association/Composition/Aggregation)</p><p><strong>辅助实体类</strong>，是对从用例中识别出的核心实体的<strong>补充描述</strong>，目的是使每个实体类的<strong>属性均为简单数据类型</strong>——目的：<strong>使用起来更容易</strong></p><h2 id="五-面向对象设计总结"><a href="#五-面向对象设计总结" class="headerlink" title="五. 面向对象设计总结"></a>五. 面向对象设计总结</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227225330430.png" alt="image-20211227225330430" style="zoom:80%;"><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="一-数据库系统及关系数据库简介"><a href="#一-数据库系统及关系数据库简介" class="headerlink" title="一. 数据库系统及关系数据库简介"></a>一. 数据库系统及关系数据库简介</h2><p><em><strong><u>数据库系统=数据库(DB)＋数据库管理系统(DBMS)</u></strong></em></p><ul><li><em><strong>数据库DB：</strong></em>集中控制和管理的存储数据完整集合<ul><li>概念（名字）、逻辑（名字、属性）、物理（名字、属性、属性类型、主键外键）</li></ul></li><li><em><strong>数据库系统DBMS：</strong></em>对数据库的访问进行管理和控制<ul><li>允许同时访问数据库</li><li>无需应用程序就可以访问</li><li>管理已存储数据</li></ul></li><li><em><strong>关系数据库</strong></em><ul><li>关系数据库管理系统将数据存储为表（关系）的结果</li><li>元组：表中的行（也称为一条数据记录），域：表中的列（也成为属性）</li><li>表包含<strong>关键字</strong>（关键属性，key fields），用来<strong>唯一标识</strong>一条记录</li><li>关键字是表间关系的基础</li></ul></li></ul><h2 id="二-数据库逻辑模型设计——ERD"><a href="#二-数据库逻辑模型设计——ERD" class="headerlink" title="二. 数据库逻辑模型设计——ERD"></a>二. 数据库逻辑模型设计——ERD</h2><ul><li>识别自然数据实体（Entity）：<strong>DFD中全部数据存储，分析类图中部分类</strong></li><li>数据实体命名</li><li>给出实体属性</li><li>实体间关联关系和关联重数（1:1、1:M、M:N）</li><li>建立<strong>关联实体来消除M:N重关系</strong></li><li>实体规范化（<strong>3NF，第三范式</strong>）</li><li>评价ERD质量并改进</li></ul><h2 id="三-ERD模型及质量评价"><a href="#三-ERD模型及质量评价" class="headerlink" title="三. ERD模型及质量评价"></a>三. ERD模型及质量评价</h2><p>好的ERD标准：结构清晰、关联简洁、实体个数适中、<strong>属性分配合理、没有低级冗余（重复性冗余）</strong></p><p><em><strong><u>数据库的规范化</u></strong></em></p><ul><li><em><strong>1NF：</strong></em>没有重复的属性或属性组，同样的内容不重复（e.g. 课程1、课程2、课程3）</li><li><em><strong>2NF：</strong></em>是1NF且每个<strong>非主属性均函数依赖于主属性（主键）</strong>（e.g. ID）</li><li><em><strong>3NF：</strong></em>是2NF且<strong>非主属性间均不存在函数依赖</strong></li></ul><p>为了提高运行效率，必须适当降低范式标准，保留冗余数据。</p><h2 id="四-物理数据库设计及建立"><a href="#四-物理数据库设计及建立" class="headerlink" title="四. 物理数据库设计及建立"></a>四. 物理数据库设计及建立</h2><p><em><strong>根据ERD建立物理数据库</strong></em></p><ul><li>为每个实体创建一个<strong>二维表</strong></li><li>为每个字段选择适当的<strong>数据类型和取值范围</strong></li><li>定义每个表的<strong>主键（PK-Primary Key）</strong></li><li>针对1:M关联关系的子表添加<strong>外键（FK-Foreign Key）</strong></li><li>定义<strong>三个方面完整性约束</strong><ul><li><strong>域的完整性</strong>：字段取值范围</li><li><strong>参照完整性</strong>：PK、FK、表级触发器来实现<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227234227397.png" alt="image-20211227234227397" style="zoom:50%;"></li></ul></li><li><strong>用户定义</strong>完整性：定义一些业务规则，用存储过程和触发器来实现</li></ul></li></ul><h2 id="五-物理数据库提高效率的技巧"><a href="#五-物理数据库提高效率的技巧" class="headerlink" title="五. 物理数据库提高效率的技巧"></a>五. 物理数据库提高效率的技巧</h2><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227234249918.png" alt="image-20211227234249918"></p><h2 id="六-描述分布式数据库的不同的体系结构模型"><a href="#六-描述分布式数据库的不同的体系结构模型" class="headerlink" title="六. 描述分布式数据库的不同的体系结构模型"></a>六. 描述分布式数据库的不同的体系结构模型</h2><p>单数据库服务器体系结构</p><p>带备份的数据库服务器体系结构</p><p>将数据库模式划分为多个客户访问子集</p><p>分区数据库服务器体系结构</p><p>联合数据库服务体系结构</p><h2 id="七-OO分析类图映射到ERD"><a href="#七-OO分析类图映射到ERD" class="headerlink" title="七. OO分析类图映射到ERD"></a>七. OO分析类图映射到ERD</h2><h3 id="1-类和关系数据表的关系"><a href="#1-类和关系数据表的关系" class="headerlink" title="1. 类和关系数据表的关系"></a>1. 类和关系数据表的关系</h3><ul><li><p>OOP以class为基本单位，所有的<strong>object都是运行在内存空间</strong>当中</p></li><li><p>若某些object的信息需要<strong>持久化存储</strong>，那么就需要用到<strong>database</strong>，将object的属性信息写入关系数据表</p></li><li><p>在进行OO分析和设计时完全可以将database忘掉，后续再加以考虑</p></li></ul><h3 id="2-数据存储设计"><a href="#2-数据存储设计" class="headerlink" title="2. 数据存储设计"></a>2. 数据存储设计</h3><ul><li><p><strong>数据文件：</strong>由操作系统提供的存储形式，应用系统将数据按字节顺序存储，并定义如何以及何时检索数据</p></li><li><p><strong>关系数据库：</strong>数据是以表的形式存储在预先定义好的成为Schema的类型中</p></li><li><p><strong>面向对象数据库：</strong>将对象和关系作为数据一起存储</p></li><li><p><strong>存储策略的选择：</strong>取决于非功能性的需求</p></li></ul><p><em><strong>数据存储策略权衡 tradeoff</strong></em></p><ul><li><em><strong>文件：</strong></em>大容量、临时数据、低信息密度数据</li><li><em><strong>数据库：</strong></em>并发访问要求高、系统跨平台、多个应用使用相同数据</li><li><em><strong>关系数据库：</strong></em>复杂数据查询、数据集规模大（<strong>子系统来完成应用系统中的对象和数据库中数据的映射与转换</strong>）</li><li><em><strong>面向对象数据库：</strong></em>中等规模、频繁使用对象间联系来读取数据（提供接口供应用系统访问）</li></ul><h3 id="3-OO设计中的数据库设计"><a href="#3-OO设计中的数据库设计" class="headerlink" title="3. OO设计中的数据库设计"></a>3. OO设计中的数据库设计</h3><p><em><strong><u>核心问题：对那些需要永久性存储的数据，如何将UML类图映射为数据库模型</u></strong></em></p><p>本质：把一个类、类之间的关系分别映射到一张表或多张表（UML class diagram <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> Relation DataBase, RDB）</p><p>两方面：<em><strong>类映射到表，关联关系映射到表</strong></em></p><p>***<u>对象关系映射（Object Relational Mapping, ORM）：</u>***解决面向对象与关系数据库存在的互不匹配的现象</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228103356868.png" alt="image-20211228103356868" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228103414345.png" alt="image-20211228103414345" style="zoom:80%;"><p>基于关联类的关联关系：</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228103514676.png" alt="image-20211228103514676" style="zoom:80%;"><p>将继承关系映射到关系数据库：</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228103933414.png" alt="image-20211228103933414" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104303671.png" alt="image-20211228104303671" style="zoom:80%;"><p><em><strong><u>1：1</u></strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104340003.png" alt="image-20211228104340003" style="zoom:70%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104404106.png" alt="image-20211228104404106" style="zoom:70%;"><p>**<em>1：</em> ***</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104446035.png" alt="image-20211228104446035" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104500807.png" alt="image-20211228104500807" style="zoom:67%;"><p>*** <em>：</em> ***</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104523457.png" alt="image-20211228104523457" style="zoom:67%;"><p>一般来说，关联表一定有两个外键，并且会增加属性才有意义</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104532909.png" alt="image-20211228104532909" style="zoom:67%;"><p>**<em>循环</em>：* ***</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104731516.png" alt="image-20211228104731516" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104740676.png" alt="image-20211228104740676" style="zoom:67%;"><p><em><strong>继承关系</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104842964.png" alt="image-20211228104842964" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104921527.png" alt="image-20211228104921527" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228104932113.png" alt="image-20211228104932113" style="zoom:67%;"><p>还可以只建立一张表</p><p><em><strong>思考</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105048360.png" alt="image-20211228105048360" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105102095.png" alt="image-20211228105102095" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105113360.png" alt="image-20211228105113360" style="zoom:67%;"><h2 id="八-关系型数据库规范化示例"><a href="#八-关系型数据库规范化示例" class="headerlink" title="八. 关系型数据库规范化示例"></a>八. 关系型数据库规范化示例</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105136929.png" alt="image-20211228105136929" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105146035.png" alt="image-20211228105146035" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105153880.png" alt="image-20211228105153880" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105201668.png" alt="image-20211228105201668" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105208947.png" alt="image-20211228105208947" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228105217848.png" alt="image-20211228105217848" style="zoom:67%;"><h1 id="用户界面设计"><a href="#用户界面设计" class="headerlink" title="用户界面设计"></a>用户界面设计</h1><h2 id="一-用户界面设计的基本概念"><a href="#一-用户界面设计的基本概念" class="headerlink" title="一. 用户界面设计的基本概念"></a>一. 用户界面设计的基本概念</h2><p><em><strong>广义人机界面：</strong></em>人和机器、设备之间存在的一个相互作用的“面“，e.g. 键盘、显示器、音响、方向盘、仪表等</p><p><em><strong>狭义人机界面：</strong></em>计算机系统，又称为人机接口、用户界面</p><p><em><strong>软件用户界面包含：</strong></em>界面元素的样式、大小、布局；界面的<strong>美观效果</strong>（色彩、风格、图像）声音/触觉等；<strong>操作序列</strong>或功能的隐喻，e.g. 视觉引导；<strong>交互信息</strong>（输入、输出、提示）</p><p><em><strong>用户界面设计：</strong></em>用户界面完成<strong>结构设计、交互设计和视觉设计</strong>，从而使软件达到<strong>易学、易用、美观、高效</strong>的目的</p><p><em><strong>用户界面设计基本过程：</strong></em>分析软件需求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 用户界面结构设计（低保真） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 用户界面交互设计（高保真，有内容，比如点击跳转等） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 设计方案评审（需求、交互等） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 迭代修改</p><p><em><strong>用户界面设计标准：</strong></em>可学性、效率性（缺省值）、记忆性、容错性、满意度</p><h2 id="二-用户界面形式及设计原则"><a href="#二-用户界面形式及设计原则" class="headerlink" title="二. 用户界面形式及设计原则"></a>二. 用户界面形式及设计原则</h2><h3 id="1-用户界面分类"><a href="#1-用户界面分类" class="headerlink" title="1. 用户界面分类"></a>1. 用户界面分类</h3><p>第一代：CUI——字符用户界面，character user interface</p><p>第二代：GUI——图形用户界面，graphics user interface（鼠标为主、键盘为辅） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> WIMP</p><p>第三代：MUI——多通道用户界面，multimodal user interface（多媒体，麦克风、手写板、摄像头、音响等）</p><p><em><strong>从软件功能角度分类：</strong></em></p><ul><li>操作系统用户界面</li><li>文字处理软件用户界面</li><li>工业控制系统用户界面</li><li>管理信息系统用户界面</li><li>网页用户界面</li><li>移动工具用户界面</li><li>游戏软件用户界面</li></ul><h3 id="2-用户界面风格"><a href="#2-用户界面风格" class="headerlink" title="2. 用户界面风格"></a>2. 用户界面风格</h3><p><em><strong>从视觉观感上，图形化界面风格：</strong></em></p><ul><li><p>一致性风格</p></li><li><p>个性化风格</p></li><li><p>传统式风格</p></li><li><p>古典式风格</p></li><li><p>现代派风格</p></li><li><p>高科技风格</p></li><li><p>卡通式风格</p></li><li><p>插画式风格</p></li></ul><h3 id="3-用户界面形式及设计原则"><a href="#3-用户界面形式及设计原则" class="headerlink" title="3. 用户界面形式及设计原则"></a>3. 用户界面形式及设计原则</h3><p><em><strong>用户界面形式（五种）：</strong></em></p><ul><li><p>命令语言界面</p><ul><li>优点：功能强大（一条命令完成多次转移或多次问答），灵活性好，效率高，占用屏幕空间少</li><li>缺点：难以学习记忆、需要键盘输入技巧、出错可能性大</li><li>结构：关键词（+参数）、基于语法、基于自然语言</li></ul></li><li><p>菜单界面</p><ul><li>形式：单一菜单、线状序列菜单、树状结构菜单、非循环网络菜单、循环网络菜单</li><li>式样：全屏幕文本菜单、条形菜单（屏幕顶部或底部）、弹出菜单、工具栏、下拉式菜单、图标菜单、滚动菜单、浮动菜单</li></ul></li><li><p>数据输入界面</p><ul><li>数据输入方式：问答式对话输入、菜单选择输入、填表输入、直接操作输入界面（点击对话，单选复选框等）、关键词数据输入（关键词＋参数，类似于命令行）、条形码和光学字符识别（OCR）、声音数据输入</li><li>交互式数据输入界面设计原则：数据输入一致性、用户输入减少至最少（缺省、系统复制）、信息反馈、灵活输入、错误检测和修改机制</li><li>填表输入数据方式：填表界面系统驱动，输入字段同时显示在屏幕上，同时进行多字段输入，上下文信息</li><li>集中数据项布局及显控协调问题（集中数据项布局原则）<ul><li>随意布局<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228133026284.png" alt="image-20211228133026284"></li><li>接近性原则（物理距离拉开）<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228133030885.png" alt="image-20211228133030885"></li><li>相似性原则<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228133035609.png" alt="image-20211228133035609"></li><li>完整性和闭合性原则<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228133041305.png" alt="image-20211228133041305"></li></ul></li><li>集中数据项布局及显控协调问题（显控协调布局原则）<ul><li>重要性原则</li><li>操作频率原则</li><li>功能分组原则</li><li>操作次序原则</li></ul></li></ul></li><li><p>直接操纵和WIMP界面</p><ul><li>所见及所得</li><li>WIMP: Windows\Icons\Menus\Pointers或Windows\Icons\Mouse\Pull-down menu（图形方式）</li><li>窗口的分类：滚动式窗口（上下翻动可看全部信息）、开关式窗口（只能显示一个）、分列式窗口（水平分区）、瓦片式窗口（水平或垂直规则划分为不重叠子屏幕）、重叠式窗口、弹出式窗口</li></ul></li><li><p>提示、帮助和出错界面</p><ul><li>出错设计原则：错误预防、错误恢复（undo、redo）</li></ul></li></ul><p><em><strong>用户界面设计总原则（12条）：</strong></em></p><ul><li><p><strong>一致性</strong>原则</p></li><li><p>提供信息<strong>提示与反馈</strong></p></li><li><p>合理利用空间、保持界面简洁</p></li><li><p>合理利用颜色与显示效果</p></li><li><p>实现内容与形式的统一</p></li><li><p>恰当使用图形和形象比喻</p></li><li><p>用户<strong>出错宽容性</strong></p></li><li><p>尽量提供<strong>快捷方式</strong></p></li><li><p>尽量允许操作<strong>可逆性</strong>（Undo与Redo）</p></li><li><p>尽量减少用户的<strong>记忆性要求</strong></p></li><li><p>合理的系统响应和低的系统成本</p></li><li><p>良好的联机帮助（Help功能）</p></li></ul><h2 id="三-WIMP用户界面设计"><a href="#三-WIMP用户界面设计" class="headerlink" title="三. WIMP用户界面设计"></a>三. WIMP用户界面设计</h2><h3 id="1-窗口设计"><a href="#1-窗口设计" class="headerlink" title="1. 窗口设计"></a>1. 窗口设计</h3><p>标题、图标，可缩放，可最大化、最小化，可移动，有滚动条，边框风格，光标风格，背景图案</p><h3 id="2-菜单设计"><a href="#2-菜单设计" class="headerlink" title="2. 菜单设计"></a>2. 菜单设计</h3><p>下拉式菜单、弹出式菜单、线性菜单、快捷方式、动态菜单项（涉及到权限，灰显菜单项、隐藏菜单项、位置可变菜单项、内容可变菜单项）、菜单项图标</p><h3 id="3-填表输入界面设计"><a href="#3-填表输入界面设计" class="headerlink" title="3. 填表输入界面设计"></a>3. 填表输入界面设计</h3><p>提示（标签、提示信息）、输入与编辑、选择（单选radiobutton、多选checkbox）、帮助功能</p><h3 id="4-操作控制元素设计"><a href="#4-操作控制元素设计" class="headerlink" title="4. 操作控制元素设计"></a>4. 操作控制元素设计</h3><p>按钮（普通按钮、位图按钮-带图标）、控制焦点（方法SetFocus）、滚动条、进度条</p><h3 id="5-声音输出界面设计"><a href="#5-声音输出界面设计" class="headerlink" title="5. 声音输出界面设计"></a>5. 声音输出界面设计</h3><p>调用Delphi一个音频播放函数</p><p>PlaySound(pchar(filename),0,snd_async);//异步 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 等一定的时间，不管前一个音频是否完成，播放下一个</p><p>PlaySound(pchar(filename),0,snd_synch);//同步 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 等待前一个音频播放结束</p><h3 id="6-图标设计"><a href="#6-图标设计" class="headerlink" title="6. 图标设计"></a>6. 图标设计</h3><p>用已经设计好的<strong>*.ICO</strong>文件</p><p>读入<strong>已有的图片(.bmp, .jpg等)进行再编辑或修改</strong></p><p>抓取<strong>屏幕局部图像</strong>再编辑或修改</p><p><strong>纯像素</strong>画设计</p><h3 id="7-个性化界面设计"><a href="#7-个性化界面设计" class="headerlink" title="7. 个性化界面设计"></a>7. 个性化界面设计</h3><p>.bmp</p><p>界面换肤</p><h3 id="8-UnDo-ReDo设计"><a href="#8-UnDo-ReDo设计" class="headerlink" title="8. UnDo/ReDo设计"></a>8. UnDo/ReDo设计</h3><p>建立一个数据结构，保护每个<strong>对象产生前的现场</strong>：操作序列和结果数据；</p><p>该数据结构是个<strong>环形栈</strong>（栈底不固定）；</p><ul><li><p><strong>UnDo</strong>时做类<strong>退栈</strong>操作，恢复现场；</p></li><li><p><strong>ReDo</strong>时，将由于UnDo<strong>退出的栈元素再压入栈</strong>（只有当UnDo后无新的操作产生才可做）</p></li></ul><h2 id="四-网页界面设计"><a href="#四-网页界面设计" class="headerlink" title="四. 网页界面设计"></a>四. 网页界面设计</h2><h2 id="五-缺省设计问题"><a href="#五-缺省设计问题" class="headerlink" title="五. 缺省设计问题"></a>五. 缺省设计问题</h2><p><em><strong>场合：</strong></em>文本编辑框、输入选择框（列表框、组合框、单选框、多选框）、功能按钮（其上的焦点）</p><p><em><strong>目的：</strong></em>减少用户输入数据，提高系统使用效率</p><p><em><strong>原则：考虑使用效率，从统计结果看输入平均量（含清除缺省值的输入量）&lt; 无缺省值情况下的平均输入量</strong></em></p><p><em><strong><u>缺省值设计方法</u></strong></em></p><ul><li><em><strong>用户操作设置缺省值（强制值输入）</strong></em></li><li><em><strong>经验值作为缺省值</strong></em></li><li><em><strong>统计方法确定出现几率大的值作缺省值</strong></em></li><li><em><strong>安全需要设置缺省值</strong></em></li><li><em><strong>最近使用的值作缺省值</strong></em></li><li><em><strong>输入数据的上下文关联缺省值</strong></em></li><li><em><strong>当前状态值</strong></em></li><li><em><strong>逻辑强制关系互为缺省值</strong></em></li><li><em><strong>正常操作序列选择作为缺省值</strong></em></li><li><em><strong>树状隶属关系约束选项列表</strong></em></li><li><em><strong>智能焦点</strong></em></li></ul><h2 id="六-输入验证设计问题"><a href="#六-输入验证设计问题" class="headerlink" title="六. 输入验证设计问题"></a>六. 输入验证设计问题</h2><p>场合：文本编辑框、功能菜单或按钮</p><p>目的：可能的情况下，保证数据有效性、合理性，减少错误，提高效率，保证安全</p><p><em><strong><u>输入验证的内容及方法：</u></strong></em></p><ul><li>数据位数验证</li><li>字符集验证</li><li>范围验证</li><li>合理性验证</li><li>数据格式验证</li><li>安全性验证</li><li>异常性验证</li></ul><h2 id="七-系统响应及信息反馈问题"><a href="#七-系统响应及信息反馈问题" class="headerlink" title="七. 系统响应及信息反馈问题"></a>七. 系统响应及信息反馈问题</h2><p><em><strong>系统响应内容及方法：</strong></em></p><ul><li>立即确认用户的输入</li><li>提供忙状态提示（静态图标，等待动画：动态沙漏等）</li><li>任务进度指示器<ul><li>虚拟进度（只是忙反馈）</li><li>非精度进度（近似估计）</li><li>动态调整显示进度（进/退）</li><li>进度显示的任务粒度（最小进度单位表示任务量）</li><li>时间方式显示进度（剩余时间）</li><li>百分百形式显示进度</li><li>工作任务动态（正在处理某文件，正在计算第X个单元）</li><li>趣味进度：沙漏形式、广告倒计时</li></ul></li><li>首先反馈重要信息</li><li>处理任务分解、化整为零</li></ul><p><em><strong>信息反馈的内容及方法：</strong></em></p><ul><li>反馈信息<strong>明确具体</strong></li><li><strong>建设性指导原则</strong>与积极的基调</li><li>以用户为中心的措辞</li><li>非拟人化的设计</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件需求与需求获取</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/08%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/08%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="软件需求与需求获取"><a href="#软件需求与需求获取" class="headerlink" title="软件需求与需求获取"></a>软件需求与需求获取</h1><h2 id="一-软件需求的定义"><a href="#一-软件需求的定义" class="headerlink" title="一. 软件需求的定义"></a>一. 软件需求的定义</h2><p><em><strong>对用户需求的管理水平是决定软件成败的重要原因！</strong></em></p><p><em><strong>错误需求的扩散效应</strong></em>：错误的需求会导致之后的设计和编码等工作都是错误的</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224121404794.png" alt="image-20211224121404794" style="zoom:80%;"><p><em><strong>错误需求的修复代价：</strong></em>随着需求、设计、编码、测试、执行的过程代价增高（需求在出错之后会严重影响随后实现的系统）</p><p><em><strong><u>根本原因：</u><em><strong>需求的鸿沟（</strong></em>期望差异</strong></em>）——开发者开发的与用户所想得到的软件存在着巨大期望差异！</p><p><em><strong><u>！！！软件需求的定义：</u></strong></em> 以一种清晰、简洁、一致且无二义性的方式，描述<strong>用户</strong>对目标软件系统在功能、行为、性能、设计约束等方面的期望，是在开发过程中<strong>对系统的约束</strong></p><p><em><strong>需求是质量的基础</strong></em></p><ul><li>为软件项目的成本、时间、风险估计提供准确的依据</li><li>减少开发工作量，避免将时间与资源浪费在设计与实现错误的需求上</li><li>通过提供<strong>需求文档和需求基线</strong>，来有效的<strong>管理系统演化与变更</strong></li><li>作为客户与开发团队之间<strong>正式合同</strong>的一部分</li><li>为<strong>最终的验收测试</strong>提供<strong>标准</strong>和依据</li></ul><h2 id="二-需求的分类"><a href="#二-需求的分类" class="headerlink" title="二. 需求的分类"></a>二. 需求的分类</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224152550773.png" alt="image-20211224152550773" style="zoom:80%;"><p><em><strong><u>业务需求（Business Requirements）：</u><em><strong>客户对于系统的</strong></em>高层次目标要求</strong></em>，定义了项目的<em><strong>远景和范畴</strong></em>。</p><ul><li>业务、客户、特性、价值、优先级</li></ul><p><em><strong><u>用户需求（User Requirements）：</u><em><strong>从用户角度描述的</strong></em><u>系统功能性需求与非功能需求</u><em><strong>，通常只涉及系统的</strong></em>外部行为</strong></em>而不涉及内部特性。</p><p><em><strong><u>功能需求（Functional Requirements, FR）：</u><em><strong>系统应该提供的</strong></em>功能或服务</strong></em>，通常涉及用户或外部系统与该系统之间的交互，不考虑系统内部的实现细节。</p><p><em><strong><u>非功能需求（Non-Functional Requirements, NFR）：</u><em><strong>从各个角度对系统的约束和限制，反映了客户对软件系统</strong></em>质量和性能</strong></em>的额外要求，如响应时间、数据精度、可靠性等。（NFR检验非常困难，一般采用一些可度量的特性进行描述）</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224155159109.png" alt="image-20211224155159109" style="zoom:90%;"><p><em><strong>约束条件（Constraints）：</strong></em>系统设计和实现时必须满足的<strong>限制条件</strong>，对其进行权衡或调整是相当困难的。</p><p><em><strong>业务规则（Business Rule）：</strong></em>对某些功能的可执行性或<strong>内部执行逻辑</strong>的一些限定条件。</p><p><em><strong>外部接口需求：</strong></em>描述系统与其所处的<strong>外部环境之间如何进行交互</strong>，包括：用户接口需求UI、硬件接口需求、软件接口需求、通信接口需求。</p><h2 id="三-好的需求与坏的需求"><a href="#三-好的需求与坏的需求" class="headerlink" title="三. 好的需求与坏的需求"></a>三. 好的需求与坏的需求</h2><h3 id="1-好需求的特性"><a href="#1-好需求的特性" class="headerlink" title="1. 好需求的特性"></a>1. 好需求的特性</h3><ul><li><em><strong>完整性：</strong></em>所要实现的功能描述清楚</li><li><em><strong>正确性：</strong></em>准确地陈述其要开发的功能</li><li><em><strong>可行性：</strong></em>在已知系统和环境的权能和限制范围内可以实施的</li><li><em><strong>必要性：</strong></em>把客户真正所需要的和最终系统所需遵从的标准记录下来</li><li><em><strong>划分优先级</strong></em></li><li><em><strong>无二义性</strong></em></li><li><em><strong>可验证性：</strong></em>检查一下每项需求是否能通过设计测试用例或其它的验证方法</li></ul><h3 id="2-不合格需求的原因"><a href="#2-不合格需求的原因" class="headerlink" title="2. 不合格需求的原因"></a>2. 不合格需求的原因</h3><ul><li><em><strong>无足够用户参与</strong></em></li><li><em><strong>用户需求不断增加：</strong></em>结构紊乱，代码补丁使整个程序难以理解和维护；项目过大超过计划和预算范围。</li><li><em><strong>模棱两可的需求</strong></em></li><li><em><strong>不必要的特性：</strong></em>画蛇添足，需求规格说明未涉及；缺乏实用价值的功能。</li><li><em><strong>过于精简的规格说明</strong></em></li><li><em><strong>忽略了用户分类</strong></em></li><li><em><strong>不准确的计划</strong></em></li></ul><h2 id="四-需求工程（Requirement-Engineering-RE）"><a href="#四-需求工程（Requirement-Engineering-RE）" class="headerlink" title="四. 需求工程（Requirement Engineering, RE）"></a>四. 需求工程（Requirement Engineering, RE）</h2><p><em><strong>需求工程的总体流程</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224162559068.png" alt="image-20211224162559068" style="zoom:80%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224162616480.png" alt="image-20211224162616480"></p><h3 id="1-需求获取-Requirement-Elicitation"><a href="#1-需求获取-Requirement-Elicitation" class="headerlink" title="1. 需求获取 Requirement Elicitation"></a>1. 需求获取 Requirement Elicitation</h3><p>通过与用户的交流，对现有系统的观察及对任务进行分析，从而开发、获取和修订用户的需求</p><ul><li>对用户进行分类</li><li>聆听每一类用户需求</li><li>分析整理所获取的需求</li><li>形成<strong>文档化的描述</strong></li><li>签字确认</li></ul><h3 id="2-需求分析-Requirement-Analysis"><a href="#2-需求分析-Requirement-Analysis" class="headerlink" title="2. 需求分析 Requirement Analysis"></a>2. 需求分析 Requirement Analysis</h3><p>对收集到的需求进行提炼、分析和审查，为最终用户所看到的系统建立概念化的分析模型</p><ul><li>定义<strong>系统边界</strong></li><li>建立<strong>软件原型</strong></li><li>分析需求<strong>可行性</strong></li><li>确定需求<strong>优先级</strong></li><li>建立<strong>需求分析模型</strong></li><li>创建<strong>数据字典</strong></li></ul><h3 id="3-需求规格说明-Software-Requirement-Specification-SRS"><a href="#3-需求规格说明-Software-Requirement-Specification-SRS" class="headerlink" title="3. 需求规格说明 Software Requirement Specification, SRS"></a>3. 需求规格说明 Software Requirement Specification, SRS</h3><ul><li>需求开发的结果</li><li>精确的、形式化地阐述一个软件系统必须提供的功能、非功能、所要考虑的限制条件等</li><li>作为用户和开发者之间的一个契约</li><li>是用户、分析人员和设计人员之间进行理解和交流的依据</li></ul><h3 id="4-需求验证-Requirement-Verification"><a href="#4-需求验证-Requirement-Verification" class="headerlink" title="4. 需求验证 Requirement Verification"></a>4. 需求验证 Requirement Verification</h3><p>以需求规格说明为输入，通过评审、模拟或快速原型等途径，分析需求规格的正确性和可行性，发现存在的错误或缺陷并及时更改和补充</p><h3 id="5-需求管理-Requirement-Management"><a href="#5-需求管理-Requirement-Management" class="headerlink" title="5. 需求管理 Requirement Management"></a>5. 需求管理 Requirement Management</h3><h2 id="五-软件需求与软件工程其他要素的关系"><a href="#五-软件需求与软件工程其他要素的关系" class="headerlink" title="五. *软件需求与软件工程其他要素的关系"></a>五. *软件需求与软件工程其他要素的关系</h2><h2 id="六-与需求工程有关的潜在风险"><a href="#六-与需求工程有关的潜在风险" class="headerlink" title="六. *与需求工程有关的潜在风险"></a>六. *与需求工程有关的潜在风险</h2><h2 id="七-需求获取方法"><a href="#七-需求获取方法" class="headerlink" title="七. 需求获取方法"></a>七. 需求获取方法</h2><p><em><strong>需求获取的目标</strong></em></p><ul><li><p>收集未来系统和正在使用的系统的信息，并从这些信息中提取用户和系统需求</p></li><li><p>为下一步的需求分析提供素材</p></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224165612582.png" alt="image-20211224165612582" style="zoom:80%;"><h2 id="八-需求获取所面临的挑战"><a href="#八-需求获取所面临的挑战" class="headerlink" title="八. 需求获取所面临的挑战"></a>八. 需求获取所面临的挑战</h2><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224170300595.png" alt="image-20211224170300595"></p><h2 id="九-需求获取技术"><a href="#九-需求获取技术" class="headerlink" title="九. 需求获取技术"></a>九. 需求获取技术</h2><p>需求获取的关键：沟通和交流</p><p>要避免的问题：交流障碍、沟通不全、意见冲突</p><p>所要必备的条件：较高的技术水平、丰富的实践经验、较强的人际沟通能力</p><h3 id="1-收集现有书面资料"><a href="#1-收集现有书面资料" class="headerlink" title="1. 收集现有书面资料"></a>1. 收集现有书面资料</h3><ul><li>收集现有的报表、表格和过程描述</li><li>收集现有的<strong>工作流程图</strong></li><li>分发和收集需求<strong>调查表</strong></li></ul><h3 id="2-面对面访谈"><a href="#2-面对面访谈" class="headerlink" title="2. 面对面访谈"></a>2. 面对面访谈</h3><p><strong>访谈问题分类</strong></p><ul><li>上下文无关的问题(context-free questions)：充分理解用户的问题，不涉及具体的解决方案</li><li>解决方案相关的问题(solution-context questions)：通过这类问题，探寻特定的解决方案并得到用户认可</li></ul><h3 id="3-需求研讨会-Workshop"><a href="#3-需求研讨会-Workshop" class="headerlink" title="3. 需求研讨会 Workshop"></a>3. 需求研讨会 Workshop</h3><p>JAD会议室</p><p>联合应用设计会议(Joint Application Design, JAD)：让所有相关人员一起参加某个单一会议来定义需求或设计系统</p><p>短暂而紧凑的时间，一般1至2天</p><h3 id="4-现场观察-体验"><a href="#4-现场观察-体验" class="headerlink" title="4. 现场观察/体验"></a>4. 现场观察/体验</h3><p><strong>被动观察：用户实地工作，需求分析人员在旁边看</strong></p><p><strong>主动体验：需求分析人员直接参与用户的实际工作</strong></p><h3 id="5-头脑风暴"><a href="#5-头脑风暴" class="headerlink" title="5. 头脑风暴"></a>5. 头脑风暴</h3><p>8-12人</p><p>适用场合：产品型系统，需要具有创新性特征，尚未投放市场，无明确的客户</p><h2 id="十-需求获取的主要内容"><a href="#十-需求获取的主要内容" class="headerlink" title="十. 需求获取的主要内容"></a>十. 需求获取的主要内容</h2><p>对用户输入进行分类</p><ul><li>业务需求：描述客户可以从产品中得到的资金、市场或其它业务利润的需求</li><li>业务规则：一些活动只能在特定的条件下，由一些特定的人来完成时，该用户可能在描述一个业务规则</li><li>功能需求</li><li>非功能需求</li><li>外部接口需求</li><li>约束条件</li><li>数据定义</li></ul><h1 id="用户故事与用例建模"><a href="#用户故事与用例建模" class="headerlink" title="用户故事与用例建模"></a>用户故事与用例建模</h1><h2 id="一-敏捷开发中的“用户故事”（User-Story）"><a href="#一-敏捷开发中的“用户故事”（User-Story）" class="headerlink" title="一. 敏捷开发中的“用户故事”（User Story）"></a>一. 敏捷开发中的“用户故事”（User Story）</h2><h3 id="1-用户故事"><a href="#1-用户故事" class="headerlink" title="1. 用户故事"></a>1. 用户故事</h3><p><em><strong>用户故事</strong></em>——对软件用户（或所有者）<strong>有价值的功能性的简明、书面描述</strong></p><p><em><strong>从用户的角度来描述用户渴望得到的功能：</strong></em>  <strong>角色</strong>（谁要使用这个功能）、<strong>目标/活动</strong>（需要完成什么样的功能）、<strong>商业价值</strong>（为什么需要这个功能，这个功能带来什么样的价值）</p><p><em><strong>用户故事的三个组成部分</strong></em></p><ul><li><strong>卡片 Card：</strong>用户故事一般在<strong>小卡片</strong>上写着故事的简短描述，工作估计量等</li><li><strong>交谈 Conversation：</strong>用户故事背后的细节来源于和客户或者产品负责人的<strong>交流沟通</strong></li><li><strong>确认 Confirmation：</strong>通过<strong>验收测试</strong>确认用户故事被正确完成</li></ul><p><strong>用户故事板</strong></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224173417141.png" alt="image-20211224173417141"></p><p><em><strong>用户故事的描述：角色、功能、价值，</strong></em>（作为一个&lt;角色&gt;，我想要&lt;活动&gt;，以便于&lt;商业价值&gt;）</p><h3 id="2-INVEST-好的用户故事应具备的特征"><a href="#2-INVEST-好的用户故事应具备的特征" class="headerlink" title="2. INVEST 好的用户故事应具备的特征"></a>2. INVEST 好的用户故事应具备的特征</h3><ul><li><strong>Independent 尽可能独立</strong></li><li><strong>Negotiable 可讨论的：</strong>不是合同、没有详细规约，后续开发阶段可以不断协商和改进</li><li><strong>Valuable 对用户/客户有价值：</strong>用户可理解的语言，是系统”特性“而不是”开发任务“</li><li><strong>Estimable 工作量可估算</strong></li><li><strong>Small 小</strong></li><li><strong>Testable 可测试的</strong><ul><li>对应敏捷开发的一个基本思想：<strong>写代码之前先写测试（Test-Driven Development, TDD）</strong></li></ul></li></ul><h3 id="3-用户故事支持敏捷迭代计划"><a href="#3-用户故事支持敏捷迭代计划" class="headerlink" title="3. 用户故事支持敏捷迭代计划"></a>3. 用户故事支持敏捷迭代计划</h3><p>一个用户故事，使用Story Point（故事点，一个达到共识的基本时间单位，例如1天）估算工作量</p><p>团队成员分别估计，差异较大时面对面讨论，发现分歧，形成共识</p><p>形成故事清单</p><p>对用户故事排列优先级</p><p>安排负责人</p><p>汇聚为迭代计划并发布</p><p>开发过程中监控进度</p><h2 id="二-面向对象方法中的“用例”（Use-Case）"><a href="#二-面向对象方法中的“用例”（Use-Case）" class="headerlink" title="二. 面向对象方法中的“用例”（Use Case）"></a>二. 面向对象方法中的“用例”（Use Case）</h2><h3 id="1-用例-Use-Case"><a href="#1-用例-Use-Case" class="headerlink" title="1. 用例 Use Case"></a>1. 用例 Use Case</h3><p>用例：表示系统所提供的服务或可执行的某种行为，定义了系统是如何被参与者所使用，描述了参与者为了使用系统所提供的某一完整功能而与系统之间发生的一段”对话“。</p><p>用例：站在用户角度定义软件系统的外部特征。</p><p><em><strong>四大特性</strong></em></p><ul><li><strong>行为序列：</strong>一个用例由一组可产生某些特定结果的行为构成，这些行为是<strong>不可分解的</strong></li><li><strong>系统执行：</strong>系统为外部角色提供服务</li><li><strong>可观测到的、有价值的结果：</strong>用例必须对用户产生价值</li><li><strong>特定角色：</strong>某人、某台设备、某外部系统等等，能够触发某些行为</li></ul><h3 id="2-用例方法的基本思想"><a href="#2-用例方法的基本思想" class="headerlink" title="2. 用例方法的基本思想"></a>2. 用例方法的基本思想</h3><p><em><strong><u>完全站在用户的角度上，从系统外部来描述功能</u></strong></em></p><p>从<strong>用户的角度</strong>来看，他们并<strong>不想了解系统的内部结构和设计</strong>，他们所关心的是<strong>系统所能提供的服务</strong>，也就是被开发出来的系统将是如何被使用的</p><p><em><strong>用例模型的元素构成</strong></em></p><ul><li><strong>参与者 Actor：</strong>系统外部，与系统发生交互的人或其他系统，代表系统的使用者或使用环境</li><li><strong>用例 Use Case：</strong>代表系统所提供的服务或可执行的某种行为</li><li><strong>通讯关系 Communication Association：</strong>参与者与用例之间的对应关系，表示参与者使用了系统中哪些用例、系统所提供的服务（用例）是被哪些参与者使用的（不表示在参与者和用例之间的信息流）</li></ul><h2 id="三-用例建模的基本过程"><a href="#三-用例建模的基本过程" class="headerlink" title="三. 用例建模的基本过程"></a>三. 用例建模的基本过程</h2><ul><li><p><em><strong>Step 1：识别并描述参与者(actor)；</strong></em></p><ul><li>使用、获取提供信息、访问外部硬件、维护管理此系统、系统交互</li><li>特殊的参与者：<strong>系统时钟</strong>（定时操作，从逻辑上，这一参与者应该被理解成是系统外部的，由它来触发系统所提供的用例对话）</li></ul></li><li><p><em><strong>Step 2：识别用例(use case)，并给出简要描述；</strong></em></p><ul><li>根据参与者确认系统的用例，看各参与者需要系统提供什么样的服务</li><li>注意事项：每个用例至少涉及一个actor，每个参与者也必须至少涉及一个用例</li></ul></li><li><p><em><strong>Step 3：识别参与者与角色之间的通讯关联(Association)；</strong></em></p></li><li><p><em><strong>Step 4：给出每一个用例的详细描述</strong></em></p><ul><li>单纯的用例图不能描述完整的信息，需要用<strong>文字描述</strong>不能反映在图形上的信息</li><li><strong>事件流</strong>：数字编号表明步骤，简短概况每一步主要内容（参与者提交信息、系统响应）<ul><li><strong>常规事件流：</strong>描述该用例<strong>最正常的一种场景</strong>，系统执行一系列活动步骤来响应参与者提出的服务请求</li><li><strong>备选事件流：</strong>负责描述用例执行过程中<strong>异常的或偶尔发生</strong>的一些情况</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224184254367.png" alt="image-20211224184254367"></li></ul></li></ul></li><li><p><em><strong>Step 5：细化用例模型</strong></em></p><ul><li>参与者与参与者之间的泛化</li><li>用例与用例之间的包含&lt;<include>&gt;</include></li><li>用例与用例之间的扩展&lt;<extend>&gt;（<strong>实际上相当于一个用例的“备选流”</strong>）</extend></li><li>用例与用例之间的泛化（子用例继承了父用例所有的结构、行为和关系）</li></ul><p>利用这些关系来调整已有的用例模型，把一些公共的信息抽取出来复用，使得用例模型更易于维护</p></li></ul><p><em><strong>需要注意的问题</strong></em></p><ul><li><em><strong>用例的粒度</strong></em><ul><li>**<u>用例识别的标准：actor与系统之间的一次独立交互</u>**，多次交互同时且不会单独发生可以合并为一个用例</li><li>用例也可称为user story，将来使用时可看作一个独立存在的功能体</li><li>用例过大，可以拆分</li></ul></li><li><em><strong>用例是actor与系统的交互</strong></em><ul><li>actor对系统的请求，系统对actor的请求</li><li>**<u>actor与actor在现实当中的交互不应包含在use case中</u>**，如讨价还价、处理纠纷</li></ul></li><li><em><strong>actor与系统的区分</strong></em><ul><li>**<u>系统自己做的事情，不是单独的用例</u>**：系统的行为受到actor的触发(可能是系统时钟)</li></ul></li></ul><h2 id="四-用例模型的提交物"><a href="#四-用例模型的提交物" class="headerlink" title="四. 用例模型的提交物"></a>四. 用例模型的提交物</h2><ol><li><p> <strong>用例模型</strong></p></li><li><p> 每个用例的<strong>详细描述</strong></p></li><li><p> <strong>术语表</strong>：所用到的术语说明</p></li><li><p><strong>补充规约</strong>：非功能性需求的说明</p></li></ol><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224185431999.png" alt="image-20211224185431999" style="zoom:80%;"><h2 id="五-活动图-amp-泳道图"><a href="#五-活动图-amp-泳道图" class="headerlink" title="五. 活动图 &amp; 泳道图"></a>五. 活动图 &amp; 泳道图</h2><p>活动图（Activity Diagram）提供一种可视化的流程图方式，<strong>对use case的事件流进行直观展示</strong>（同时，活动图也可以用来描述多个用例之间所形成的大粒度流程）</p><p>泳道图（swim-lane diagram）：侧重于描述多个<strong>参与者的活动之间</strong>的交互关系</p><h1 id="需求的结构化分析"><a href="#需求的结构化分析" class="headerlink" title="需求的结构化分析"></a>需求的结构化分析</h1><h2 id="一-结构化方法vs面向对象方法"><a href="#一-结构化方法vs面向对象方法" class="headerlink" title="一. 结构化方法vs面向对象方法"></a>一. 结构化方法vs面向对象方法</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224185949793.png" alt="image-20211224185949793" style="zoom:80%;"><p>结构化方法：从功能的观点设计系统，自顶向下、分而治之，将大系统分解为若干模块</p><p>面向对象方法：自底向上，先考虑对象，再考虑关系</p><p>基于UML的面向对象方法：开发一整套系统分析与设计模型及描述方法，从形式上和概念上统一描述软件系统</p><h2 id="二-需求的结构化分析方法"><a href="#二-需求的结构化分析方法" class="headerlink" title="二. 需求的结构化分析方法"></a>二. 需求的结构化分析方法</h2><p><em><strong>结构化分析方法（SA）：</strong></em>将待解决的问题看作一个系统，从而用系统科学的思想方法(抽象、分解、模块化)来分析和解决问题（核心思想：自顶向下的分解）</p><p><em><strong>结构化分析</strong></em>：帮助开发人员定义系统需要做什么（处理需求），系统需要存储和使用哪些数据（数据需求），系统需要什么样的输入和输出以及如何把这些功能结合在一起来完成任务</p><ul><li><strong>基于数据流的需求分析建模——DFD</strong></li><li><strong>数据分析建模——ERD/IDEF1X</strong></li></ul><h2 id="三-数据流图（DFD-Data-Flow-Diagram）"><a href="#三-数据流图（DFD-Data-Flow-Diagram）" class="headerlink" title="三. 数据流图（DFD, Data Flow Diagram）"></a>三. 数据流图（DFD, Data Flow Diagram）</h2><p><strong>数据流图：</strong>用处理、外部实体、数据流以及数据存储来表示系统需求的图表</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224193853214.png" alt="image-20211224193853214" style="zoom:80%;"><p>DFD图可以描述高层次的<strong>具有高度概括</strong>的系统处理，也可以描述低层次的具有<strong>更详细分解</strong>的系统处理</p><p><strong>抽象层次：</strong>把系统分解成一个<strong>逐步细化</strong>的分层集合的建模技术</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224194214455.png" alt="image-20211224194214455" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224194445652.png" alt="image-20211224194445652" style="zoom:80%;"><h3 id="1-关联DFD图"><a href="#1-关联DFD图" class="headerlink" title="1. 关联DFD图"></a>1. 关联DFD图</h3><p>关联图：在<em><strong>单个处理</strong></em>符号中概括系统内所有处理活动的DFD</p><p>表示<em><strong>系统边界</strong></em>时用处很大</p><p><strong>系统的范围是通过单个的处理和外部实体所表示的事物来定义的</strong></p><p><strong><u>数据存储不画在关联图中</u>是因为它本身被认为是<u>系统内部的内容</u></strong></p><p>当一个系统响应事件较多时，常常将系统分成多个<strong>子系统</strong>，并为每个子系统创建一张关联图</p><h3 id="2-DFD片段"><a href="#2-DFD片段" class="headerlink" title="2. DFD片段"></a>2. DFD片段</h3><p>DFD片段：用一个<em><strong>单一处理符号</strong></em>表示系统响应<em><strong>一个事件</strong></em>的DFD</p><p>展示了<strong>处理、外部实体和内部数据存储</strong>之间的交互细节</p><h3 id="3-DFD的层次"><a href="#3-DFD的层次" class="headerlink" title="3. DFD的层次"></a>3. DFD的层次</h3><p>一个系统或子系统的所有DFD片段组合到一个单个的DFD图中，这样的DFD图称为<strong>事件分离的系统模型/0层图</strong></p><p>分解”处理“——理解”处理“的细节（）</p><p>0层DFD图编号：i</p><p>1层DFD图编号：i.j</p><p>2层DFD图编号：i.j.k</p><h3 id="4-DFD的质量评估"><a href="#4-DFD的质量评估" class="headerlink" title="4. DFD的质量评估"></a>4. DFD的质量评估</h3><p>高质量DFD：可读性强、内部一致、能够准确描述系统需求</p><p>措施：最小化复杂度，保证数据流一致性</p><p><em><strong><u>最小化复杂度</u></strong></em></p><ul><li>每幅DFD图尽量简单易懂，避免信息超量——太多信息同时显示时所发生的难以理解的情况</li><li>采用<strong>分层结构</strong>将DFD划分为小的且相对独立的子集</li><li>构造<strong>DFD图的7±2规则</strong>（单个DFD不超过7±2个处理、不超过7±2个数据量进出同一个处理/数据存储）</li><li><strong>接口最小化</strong>：DFD各个元素之间的连接越少越好（低耦合）</li></ul><p><em><strong><u>保证数据流一致性</u></strong></em></p><ul><li>一个”处理“和该”处理“被详细分解后在数据流内容上应该一致</li><li>对一个”处理“，有数据流入则必须有相应的数据流出</li><li>对一个”处理“，有数据流出则必须有相应的数据流入</li></ul><p><em><strong><u>黑洞</u></strong></em></p><p><em><strong>带有输入数据但不用其产生输出数据的处理或数据存储（有入无出）</strong></em></p><p><em><strong><u>奇迹</u></strong></em></p><p><em><strong>没有足够数据元素作为输入或产生来源的一个处理或数据存储（无足够入，包括无入）</strong></em></p><p><em><strong><u>数据流典型错误</u></strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224214811037.png" alt="image-20211224214811037" style="zoom:80%;"><p><em><strong><u>总结</u></strong></em></p><ul><li>关联图中不画数据存储</li><li>数据流不反应处理顺序，显示数据通过系统的流程，因此”处理“可以并行工作</li><li>”处理/数据存储“既要有输入，又有输出（黑洞、奇迹）</li></ul><h3 id="5-DFD细节内容"><a href="#5-DFD细节内容" class="headerlink" title="5. DFD细节内容"></a>5. DFD细节内容</h3><p>在传统方法中，DFD图在一个图中描述了三种元素：</p><ul><li><p>处理——每个最底层“处理”需要详细描述其细节</p></li><li><p>数据流——”数据流”包含的数据元素需要定义</p></li><li><p>数据存储——<strong>“数据存储”需要在ERD中定义</strong></p></li></ul><p><em><strong>数据流和数据存储就是狭义的数据字典DD</strong></em></p><p><em><strong>处理的细节描述</strong></em></p><ul><li>处理细分解、层层分解</li><li>结构化语言/伪代码<ul><li>结构化语言：自然语言和形式语言之间的语言（短句、多层缩进、无确定语法、可分层和嵌套、结构化编程技术和叙述性语言结合）</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224220259810.png" alt="image-20211224220259810" style="zoom:80%;"></li></ul></li><li>决策表/决策树</li></ul><h2 id="四-数据字典（DD）"><a href="#四-数据字典（DD）" class="headerlink" title="四. 数据字典（DD）"></a>四. 数据字典（DD）</h2><p>数据字典是数据分析的描述模型，包括：<strong>数据项定义、数据结构定义、数据流描述、数据存储描述</strong></p><ul><li><strong>数据项</strong>定义：定义特定数据项的<strong>组成和意义</strong><ul><li>数据项是<strong>数据的基本单位</strong></li><li>包含：数据项名、数据项说明、数据类型、长度、取值范围、语法定义、与其他数据项的关联</li></ul></li><li><strong>数据结构</strong>定义：定义有数据项组成的<strong>表达数据的基本数据</strong><ul><li>数据结构由<strong>数据项构成</strong>，是<strong>数据基本结构单位</strong></li><li>包含：数据结构名、数据结构说明、数据结构组成：{数据项/数据结构}、数据结构约束</li></ul></li><li><strong>数据流</strong>描述：描述数据流的数据<strong>构成</strong>，并指明其<strong>来源或去向</strong><ul><li>数据流是数据结构在<strong>系统中的流通途径</strong></li><li>包含：数据流名、数据流说明、来源、去向、组成：{数据结构}、平均流量、高峰流量</li><li>数据流是数据元素的集合，数据流定义就是列出其包含的所有数据项</li><li>数据元素还需进一步的定义：说明类型、长度等，一般在设计阶段详细定义</li><li>代数公式方式定义数据流<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224221847733.png" alt="image-20211224221847733" style="zoom:50%;"></li></ul></li><li><strong>数据存储</strong>描述：描述保存在<strong>存储介质</strong>上的<strong>数据文件或数据库表的格式和内容</strong>（颗粒度比数据项和数据结构大）<ul><li>数据存储：数据结构<strong>保存或停留</strong>之处，<strong>数据文件或数据库表</strong></li><li>包含：数据存储名、数据存储说明、输入的数据流、输出的数据流、数据存储组成：{数据结构}、数据量、存储频度、存储方式</li></ul></li></ul><ul><li><em><strong>广义的数据字典也包含对”处理“的描述。</strong></em><ul><li>数据处理：给出处理的流程和说明信息</li><li>包含：数据处理名、数据处理说明、输入数据：{数据结构}、输出数据：{数据结构}、处理过程简要描述</li></ul></li></ul><h2 id="五-数据分析（ERD、IDEF1X）什么区别？？？？"><a href="#五-数据分析（ERD、IDEF1X）什么区别？？？？" class="headerlink" title="五. 数据分析（ERD、IDEF1X）什么区别？？？？"></a>五. 数据分析（ERD、IDEF1X）什么区别？？？？</h2><h3 id="1-实体关系图——ERD"><a href="#1-实体关系图——ERD" class="headerlink" title="1. 实体关系图——ERD"></a>1. 实体关系图——ERD</h3><ul><li><p><strong>传统的系统开发方法都将重点集中在数据存储需求上</strong></p></li><li><p><strong>数据存储需求包括数据实体、数据实体的属性以及它们之间的关系</strong></p></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224222532502.png" alt="image-20211224222532502" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224222633420.png" alt="image-20211224222633420" style="zoom:80%;"><h3 id="2-实体关系图——IDEF1X"><a href="#2-实体关系图——IDEF1X" class="headerlink" title="2. 实体关系图——IDEF1X"></a>2. 实体关系图——IDEF1X</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224222650590.png" alt="image-20211224222650590" style="zoom: 67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224222701857.png" alt="image-20211224222701857" style="zoom:80%;"><h1 id="面向对象的分析"><a href="#面向对象的分析" class="headerlink" title="面向对象的分析"></a>面向对象的分析</h1><h2 id="一-面向对象的分析方法概述"><a href="#一-面向对象的分析方法概述" class="headerlink" title="一. 面向对象的分析方法概述"></a>一. 面向对象的分析方法概述</h2><h3 id="1-需求分析的本质"><a href="#1-需求分析的本质" class="headerlink" title="1. 需求分析的本质"></a>1. 需求分析的本质</h3><p><em><strong>需求分析(Requirement Analysis)<em><strong>：对收集到的需求进行提炼、分析和审查，为最终用户所看到的系统建立</strong></em>概念化的分析模型</strong></em></p><p><em><strong>本质：</strong></em><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224232625742.png" alt="image-20211224232625742" style="zoom:67%;"></p><p>分析模型的目标：描述客户需要什么（软件的信息、功能和行为），为软件设计奠定基础（结构、接口、软件设计），定义软件完成后可以被确认的一组需求</p><p><em><strong>需求分析的基本思想：</strong></em></p><ul><li><em><strong>抽象</strong></em>——透过现象看本质（具体事物中发现其本质性特征和方法的过程）</li><li><em><strong>分治</strong></em>——分而治之，整体/部分关系，降低问题复杂性</li><li><em><strong>投影</strong></em>——不同视角看问题</li><li><em><strong>建模</strong></em>——需求描述模型化（形式化的数学模型、非形式化的图形化模型）</li></ul><h3 id="2-面向对象分析"><a href="#2-面向对象分析" class="headerlink" title="2. 面向对象分析"></a>2. 面向对象分析</h3><p><strong>*<u>面向对象的分析模型由三个独立的模型构成：</u><em><strong>如下图所示，功能模型——</strong>用例</em>*模型，静态结构模型——</strong>类图<strong>（系统概念实体），动态行为模型——</strong>时序图和协作图**。箭头表示驱动，或者说画图顺序。</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224234844834.png" alt="image-20211224234844834" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224234858228.png" alt="image-20211224234858228" style="zoom:80%;"><p><em><strong><u>面向对象分析的过程</u></strong></em></p><ul><li>第一阶段：<em><strong>业务领域</strong></em>分析：业务范围，确定系统<em><strong>边界</strong></em>，确定系统需求——用例模型</li><li>第二阶段：发现和定义<em><strong>对象和类</strong></em>：确定内部特征（属性和服务操作），现实到概念模型的<strong>抽象</strong></li><li>第三阶段：<em><strong>识别对象的外部联系</strong></em>：识别对象与对象、类与类之间的各种外部联系</li><li>第四阶段：<em><strong>建立系统的静态结构模型</strong></em>：图形和文字，如绘制<strong>类图、对象图、系统与子系统结构图</strong>等，编制相应的说明文档</li><li>第五阶段：<em><strong>建立系统的动态行为模型</strong></em>：图形和文字，如绘制<strong>活动图、交互图、状态图</strong>等，编制相应的说明文档</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225000315441.png" alt="image-20211225000315441" style="zoom: 67%;"><h2 id="二-建立静态结构模型"><a href="#二-建立静态结构模型" class="headerlink" title="二. 建立静态结构模型"></a>二. 建立静态结构模型</h2><p><em><strong>分析类</strong></em></p><ul><li>分析类是概念层次上的内容，用于描述系统中较高层次的对象</li><li>分析类直接与<strong>应用逻辑相关</strong>，而不关注技术实现的问题</li><li>分析类的类型：<ul><li><strong>实体类：表示系统存储和管理的持久性信息</strong><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225000958185.png" alt="image-20211225000958185" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002807023.png" alt="image-20211225002807023" style="zoom:67%;"></li><li><strong>必须存贮的信息及其相关行为</strong>，通常这些信息需要长久保存</li><li><strong>对应现实世界中的事物</strong></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002923933.png" alt="image-20211225002923933" style="zoom:67%;"></li></ul></li><li><strong>边界类：表示参与者与系统之间的交互</strong><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225001009933.png" alt="image-20211225001009933" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002015607.png" alt="image-20211225002015607" style="zoom:67%;"></li><li>将用例的<strong>内部逻辑与外部环境进行隔离</strong>，使得外界的变化不会影响到内部的逻辑部分</li><li>类型：用户界面、系统接口、设备接口<ul><li>对用户界面来说：用户与<strong>系统的交互信息</strong>，而不是用户界面的显示形式（按钮、菜单等）</li><li>对系统接口/设备接口来说：描述<strong>通信协议</strong>，不必说明协议如何实现</li></ul></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002227636.png" alt="image-20211225002227636" style="zoom:67%;"></li></ul></li><li><strong>控制类：表示系统在运行过程中的业务控制逻辑</strong><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225001026506.png" alt="image-20211225001026506" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002544709.png" alt="image-20211225002544709" style="zoom:67%;"></li><li>用例所具有的<strong>事件流的控制行为</strong>， 本身并不处理具体的任务，而是<strong>调度其他类</strong>来完成具体的任务</li><li>实现了<strong>对用例行为的封装</strong>，将用例的执行逻辑与边界和实体进行隔离，使得边界类和实体类具有较好的通用性</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225002733461.png" alt="image-20211225002733461" style="zoom:67%;"></li></ul></li></ul></li></ul><p><em><strong><u>三种分析类多对多的关联关系</u></strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211225003218988.png" alt="image-20211225003218988" style="zoom:67%;"><p><u><em><strong>Step 1：识别分析类</strong></em></u></p><p>方法：重用和修改现有的模型，使用分类列表（不同领域不同的分类列表），对用例文本进行“语法分析”（名词/名词短语，动词映射为类的操作、形容词/名词映射为类的属性）</p><ul><li><em><strong>边界类：</strong></em><ul><li>一个参与者与一个用例之间的交互或通信关联对应一个边界类</li><li>一般是<em><strong>界面、接口</strong></em></li><li>关注于<strong>参与者与用例之间交互</strong>的信息或者响应的事件，不要描述界面组成元素</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211226235519779.png" alt="image-20211226235519779" style="zoom:67%;"></li></ul></li><li><em><strong>控制类：</strong></em><ul><li><strong>协调边界类和实体类</strong>，通常在现实世界中没有对应的事物</li><li>负责接收边界类的信息，并将其分发给实体类</li><li>一般来说，一个用例对应一个控制类（但是一个用例可以有多个控制类，如分支事件流情况下；有的情况没必要使用控制类；有些用例可以使用一个控制类）</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227000027795.png" alt="image-20211227000027795" style="zoom:67%;"></li></ul></li><li><em><strong>实体类：</strong></em><ul><li>名词驱动的识别方法</li><li><strong>对用例文本进行“语法分析”（名词/名词短语，动词映射为类的操作、形容词/名词映射为类的属性）</strong></li><li><em><strong>角色actor不一定是实体类。</strong></em> 除非系统需要在各用例中<strong>管理和维护该角色的信息</strong>(不是指ID和密码)，否则只需将其作为actor，无需作为实体类。</li></ul></li></ul><p><u><em><strong>Step 2：描述分析类的属性</strong></em></u></p><ul><li><em><strong>边界类：</strong></em><ul><li>UI类型的边界类：actor输入数据、系统反馈数据、临时数据</li><li>API类型的边界类：内外部系统（软件/硬件）传递、接收数据</li></ul></li><li><em><strong>控制类：</strong></em>从UI接收数据、事件流执行临时数据、调用实体类、发送给UI的数据</li><li><em><strong>实体类：</strong></em>基本属性、状态属性、关联属性、派生属性（计算其他属性值得到的新属性）</li></ul><p><u><em><strong>Step 3：定义分析类的操作</strong></em></u></p><ul><li><em><strong>边界类的操作</strong></em><ul><li>提供给用户的（actor自己做的动作都是边界类的操作）、可在UI上进行的各类操作<ul><li>actor发出的每个动作，通常都比较大，需要仔细分析对应于实体类的哪些属性做CRUD</li></ul></li><li>对从控制类返回的数据进行各类临时处理而进行的操作</li><li>提供给其他系统的API</li></ul></li><li><em><strong>控制类的操作</strong></em><ul><li>对从边界类接收到的数据进行各类临时处理而进行的操作</li><li>向<strong>实体类</strong>发出的<strong>调用操作</strong></li><li>对从实体类接收到的数据进行<strong>临时处理</strong>而进行的操作</li></ul></li><li><em><strong>实体类的操作</strong></em><ul><li>对<strong>实体内部的属性</strong>进行<strong>CRUD操作（create、read、update、delete）</strong></li><li>对状态进行更新的操作</li><li>辅助操作</li></ul></li></ul><p><u><em><strong>Step 4：建立类之间的关系</strong></em></u></p><p><em><strong>泛化、关联、组合、聚合、依赖</strong></em></p><p><u><em><strong>Step 5：绘制类图</strong></em></u></p><ul><li><p><strong>分析类图：</strong>描述各<strong>边界类、实体类、控制类之间的关联关系</strong>，无需刻画属性与操作集</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227000822929.png" alt="image-20211227000822929" style="zoom:67%;"></li><li><p><strong>领域类图：</strong>可以不包含边界类与控制类，<strong>侧重描述各实体类之间的五种关系</strong>，需要给出详细的<strong>属性与操作</strong>集合</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227000834850.png" alt="image-20211227000834850" style="zoom:80%;"></li></ul><h2 id="三-建立动态行为模型"><a href="#三-建立动态行为模型" class="headerlink" title="三. 建立动态行为模型"></a>三. 建立动态行为模型</h2><p><em><strong>时序图/顺序图（Sequence Diagram）</strong></em></p><p><em><strong>协作图（Collaboration Diagram）</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227193731449.png" alt="image-20211227193731449" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227193739902.png" alt="image-20211227193739902" style="zoom:80%;"><p>一张时序图从左到右应该是：actor（用户）、边界类、控制类、实体类、actor（外部系统）</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227193933515.png" alt="image-20211227193933515"></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211227193955189.png" alt="image-20211227193955189" style="zoom:80%;"><h2 id="四-案例分析"><a href="#四-案例分析" class="headerlink" title="四. 案例分析"></a>四. 案例分析</h2><p><em><strong><u>仔细看</u></strong></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件演化与配置管理</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/06%E8%BD%AF%E4%BB%B6%E6%BC%94%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/06%E8%BD%AF%E4%BB%B6%E6%BC%94%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="软件演化与配置管理"><a href="#软件演化与配置管理" class="headerlink" title="软件演化与配置管理"></a>软件演化与配置管理</h1><h2 id="一-软件演化"><a href="#一-软件演化" class="headerlink" title="一. 软件演化"></a>一. 软件演化</h2><h3 id="1-Lifecycle-of-a-software"><a href="#1-Lifecycle-of-a-software" class="headerlink" title="1. Lifecycle of a software"></a>1. Lifecycle of a software</h3><p><strong>Software Development Life Cycle (SDLC): From 0 to 1</strong></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221203106899.png" alt="image-20211221203106899" style="zoom: 67%;"><p><strong>Multiple versions in the life of a software: From 1 to n</strong></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221203333937.png" alt="image-20211221203333937" style="zoom:80%;"><p><em><strong>软件演化Lehman定律</strong></em></p><ul><li><strong>持续变化</strong><ul><li>环境变化产生软件修改，软件修改促进环境变化</li></ul></li><li><strong>复杂度逐渐增大</strong><ul><li>系统变化，结构和功能变复杂 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 难以维护并失去控制，无法继续演化 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 需要大量额外的资源和维护工作来保持系统的正常运行</li><li>软件修改引入新的错误，造成故障率升高</li></ul></li></ul><h3 id="2-软件演化的处理策略"><a href="#2-软件演化的处理策略" class="headerlink" title="2. 软件演化的处理策略"></a>2. 软件演化的处理策略</h3><ul><li><em><strong>软件维护</strong></em><ul><li><strong>修改软件缺陷</strong>或增加<strong>新功能</strong>而对软件进行的<strong>变更</strong></li><li>软件变更通常发生在<strong>局部</strong>，不会改变整个结构</li></ul></li><li><em><strong>软件再工程</strong></em><ul><li>避免软件退化而对软件的一部分进行<strong>重新设计、编码和测试</strong>，提高软件的可维护性和可靠性等</li></ul></li></ul><h2 id="二-软件维护"><a href="#二-软件维护" class="headerlink" title="二. 软件维护"></a>二. 软件维护</h2><p><em><strong>软件维护的概念</strong></em>：软件产品发行和被投入运行使用之后对其的修改，以改正错误，改善性能或其他属性，从而使产品适应新的环境或新的需求</p><p><em><strong><u>软件维护的类型</u></strong></em></p><ul><li><em><strong>纠错性维护：</strong></em>开发时的测试不彻底，错误隐藏，特定环境暴露 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 诊断和改正错误（改正性维护）</li><li><em><strong>适应性维护：</strong></em>外部环境（硬软件配置）和数据环境（数据库、数据格式、输入输出方式、数据存储介质）变化 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 适应变化（适应性维护）</li><li><em><strong>完善性维护：</strong></em>用户提出的功能与性能要求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 完善性维护</li><li><em><strong>预防性维护：</strong></em>提高软件的<strong>可维护性、可靠性</strong>等，为<strong>以后</strong>进一步改进软件打下良好基础</li></ul><p>几种维护活动中，***<u>完善性维护所占的比重最大</u>***，即大部分维护工作是改变和加强软件，而不是纠错</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222161751794.png" alt="image-20211222161751794" style="zoom: 67%;"><p><em><strong><u>软件维护的内容</u></strong></em></p><ul><li><em><strong>程序维护</strong></em></li><li><em><strong>数据维护</strong></em></li><li><em><strong>硬件维护</strong></em></li></ul><p><em><strong>软件维护的成本——极其昂贵</strong></em></p><ul><li>业务应用系统：维护成本与开发成本大体相同</li><li><strong>嵌入式实时系统：维护成本是开发成本的四倍以上</strong></li></ul><p><em><strong>软件维护的典型困难</strong></em></p><ul><li>软件维护中的大部分问题都可以归咎于<strong>软件规划和开发方法的缺陷</strong>：原开发人员程序难以读懂；人员流动，难以沟通；文档不足；软件设计时，欠考虑软件的可修改性；软件升级频繁，难以追踪演化</li></ul><p><strong>遗留系统：</strong>已经运行了很长时间的、对用户来说很重要的、但是目前已无法完全满足要求却不知道如何处理的软件系统（维护人员没有参与开发、不具备现有的开发规范、文档不完整） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 更换有风险</p><h2 id="三-软件配置管理（SCM）"><a href="#三-软件配置管理（SCM）" class="headerlink" title="三. 软件配置管理（SCM）"></a>三. 软件配置管理（SCM）</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222162934146.png" alt="image-20211222162934146" style="zoom:67%;"><h3 id="2-软件配置的概念"><a href="#2-软件配置的概念" class="headerlink" title="2. 软件配置的概念"></a>2. 软件配置的概念</h3><p><em><strong>软件配置：</strong></em>由在软件工程过程中产生的<strong>所有信息项构成</strong>，可以看作该软件的具体形态（<strong>软件配置项</strong>）在某一时刻的<strong>瞬间映像</strong></p><p>SCI：软件配置项</p><p>SCM：软件配置管理（Software Configuration Management）——处理变更、保持软件系统的完整性，跟踪变更，保存系统在不同时间的状态；使混乱减到最小，对正在开发的软件进行标识、组织和控制</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222165140722.png" alt="image-20211222165140722" style="zoom:80%;"><p><em><strong>软件配置管理的目标：</strong></em>标识变更、控制变更、确保变更的正确实现、向开发组织内各角色报告变更</p><p><em><strong>当变更发生时，能够提高适应变更的容易程度，并且能够减少所花费的工作量</strong></em></p><h3 id="3-SCM的基本元素"><a href="#3-SCM的基本元素" class="headerlink" title="3. SCM的基本元素"></a>3. SCM的基本元素</h3><p><em><strong>配置项（Configuration Item, CI），基线（Baseline），配置管理数据库（CMDB），最终硬件库（Definitive Hardware Store, DHS），最终软件库（Definitive Software Library, DSL）</strong></em></p><h4 id="3-1-配置项-CI"><a href="#3-1-配置项-CI" class="headerlink" title="3.1 配置项 CI"></a>3.1 配置项 CI</h4><p>软件过程的输出信息主要包括三个主要类别：<strong>计算机程序（源代码和可执行程序）、描述计算机程序的文档（针对技术开发者和用户）、数据（包含在程序内部或外部）</strong>。这些项包含了所有在软件过程中产生的信息，总称为软件配置项（SCI）。SCI是软件全生命周期内受管理和控制的基本单位，大到整个系统，小到某个硬件设备或软件模块。</p><p>SCI具有<strong>唯一的名称标识和多个属性</strong>：名称、描述、类型（模型元素、程序、数据、文档等）、项目标识符、关联关系、变更和版本信息</p><p><em><strong>配置项之间的依赖关系</strong></em></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222183927178.png" alt="image-20211222183927178"></p><ul><li><strong>整体-部分关系</strong><ul><li><strong>Data flow diagram (DFD) <part-of> analysis model</part-of></strong></li><li><strong>Analysis model <part-of> requirement specification</part-of></strong></li></ul></li><li><strong>关联关系</strong><ul><li><strong>Data model <interrelated> data flow diagram (DFD)</interrelated></strong></li><li><strong>Data model <interrelated> test case class m</interrelated></strong></li></ul></li><li>组成关系、组合关系</li></ul><p><em><strong>配置项的演变图</strong></em></p><p>在对象成为基线以前可能要做多次变更，在成为基线之后也可能需要频繁的变更；对于每一配置项都要建立一个演变图，以记录对象的变更历史。</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222184547493.png" alt="image-20211222184547493" style="zoom:80%;"><h4 id="3-2-基线-Baseline"><a href="#3-2-基线-Baseline" class="headerlink" title="3.2 基线 Baseline"></a>3.2 基线 Baseline</h4><p><em><strong>基线的概念：</strong></em>已经通过 <strong>正式评审和批准</strong> 的软件规格说明或代码，可以作为进一步开发的基础，并且<strong>只有通过正式的变更规程才能修改基线</strong>，基线可以看作是软件开发过程中的“里程碑”。（软件配置项成为基线前，可以迅速而随意的进行变更）</p><p><em><strong>Version <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> Release（内发布，相对正确的基线） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> Baseline <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> Milestone <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> Checkpoint</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222185513337.png" alt="image-20211222185513337" style="zoom:80%;"><p>基线是在某个时间点上对产品属性的一致描述，它是定义变化的基础？？？</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222185651825.png" alt="image-20211222185651825"></p><h4 id="3-3-配置管理数据库"><a href="#3-3-配置管理数据库" class="headerlink" title="3.3 配置管理数据库"></a>3.3 配置管理数据库</h4><p><strong>配置管理数据库(CMDB，也称“SCM中心存储库”)<strong>，用于保存与软件相关的</strong>所有配置项</strong>的信息以及<strong>配置项之间关系</strong>的数据库——配置项及其版本号、变更可能影响到的配置项、配置项变更路线及轨迹、与配置项有关的变更内容、计划升级替换或弃用的配置项、不同配置项之间的关系（关联矩阵）</p><p>配置管理数据库 CMDB的功能：存储配置项及其之间的关系、版本控制、相关性跟踪和变更管理、需求跟踪、配置管理、审核跟踪</p><p><em><strong>版本控制</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222190241021.png" alt="image-20211222190241021" style="zoom:67%;"><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container> 测试：开发环境下，由开发人员参与的测试</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container> 测试：开发环境，外部用户参与测试</li></ul><p><strong>SCM 软件配置管理常用工具</strong>：VSS (Microsoft Visual SourceSafe)、CVS (Concurrent Version System)、IBM Rational ClearCase、<strong>SVN (Subversion)、Git(GitHub、GitLab、GitEE)</strong></p><h2 id="四-持续集成"><a href="#四-持续集成" class="headerlink" title="四. 持续集成"></a>四. 持续集成</h2><ul><li><em><strong>持续集成：敏捷开发的一项重要实践</strong></em><ul><li>每个成员每天<strong>至少集成一次</strong>（可能多次）</li><li>每次集成通过<strong>自动化的构建（包括编译、发布、自动化测试）</strong>来验证，从而尽快发现集成错误，大大减少集成的问题，让团队能够更快的开发内聚的软件</li></ul></li><li>价值<ul><li><strong>减少风险</strong>：不是等到最后再做集成测试，而是<strong>每天都做测试</strong></li><li><strong>减少重复过程</strong>：通过<strong>自动化</strong>来实现</li><li>任何时间、任何地点生成<strong>可部署</strong>的软件</li><li>增强项目的<strong>可见性</strong></li><li>建立团队对开发产品的信心</li></ul></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222191322283.png" alt="image-20211222191322283" style="zoom:80%;"><h1 id="Git与GitHub"><a href="#Git与GitHub" class="headerlink" title="Git与GitHub"></a>Git与GitHub</h1><h2 id="一-本地-VS-集中式-VS-分布式版本控制系统"><a href="#一-本地-VS-集中式-VS-分布式版本控制系统" class="headerlink" title="一. 本地 VS 集中式 VS 分布式版本控制系统"></a>一. 本地 VS 集中式 VS 分布式版本控制系统</h2><ul><li><strong>本地版本控制系统（Local VCS）</strong>：采用简单的 <strong>数据库或文件系统</strong> 来记录本地文件的<strong>历次更新差异</strong>。 </li><li><strong>集中化的版本控制系统（Centralized VCS）</strong>：包括CVS、Subversion和Perforce等，有一个<strong>单一的集中管理服务器</strong>，保存所有文件的修订版本，而协同工作的开发者通过客户端连到这台服务器，取出<strong>最新</strong>的<strong>文件</strong>或者提交更新（不涉及版本信息）（<strong>有单点故障和可靠性问题</strong>）。</li><li><strong>分布式版本控制系统（Distributed VCS）</strong>：客户端并不只提取最新版本的文件快照，而是把<strong>原始的代码仓库完整地镜像下来</strong>；协同工作的某一服务器发生故障，都可以用任何一个镜像出来的本地仓库恢复。</li></ul><table><thead><tr><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222192840621.png" alt="image-20211222192840621"></th><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222192844979.png" alt="image-20211222192844979"></th><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222192850082.png" alt="image-20211222192850082"></th></tr></thead></table><h2 id="二-Git的基本思想"><a href="#二-Git的基本思想" class="headerlink" title="二. Git的基本思想"></a>二. Git的基本思想</h2><p>***<u>分布式版本控制工具</u>***——最开始是用于管理Linux内核的开发（绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上）</p><p>基本思想：其他大多数SCM系统则关心文件内容的具体差异（记录更新文件，以及更新哪些行的内容），而Git关心文件数据整体是否发生了变化（不保存这些前后变化的差异）</p><ul><li><strong>变化的文件</strong>作<strong>快照</strong>，记录在微型的文件系统中</li><li>提交更新，纵览全部文件的指纹信息并对文件作一快照，然后保存一个<strong>指向这次快照的索引</strong></li><li>若文件没有变化，Git不会再次保存，只<strong>对上次保存的快照作一链接</strong></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222200003014.png" alt="image-20211222200003014" style="zoom:80%;"><p><em><strong>Git中文件的三种状态：</strong></em> **已提交(committed)<strong>：文件已经被安全地保存在本地数据库中；</strong>已修改(modified)<strong>：文件被修改，还没提交保存；</strong>已暂存(staged)**：把已修改的文件放在下次提交时要保存的清单中</p><p><em><strong>Git管理项目的三个工作区：</strong></em> <strong>Git目录（仓库，Git Directory）、工作目录（working directory）、暂存目录（staging area，本质上是一个文件，保存下次将要提交的文件列表信息）</strong> </p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222200609090.png" alt="image-20211222200609090" style="zoom:80%;"><p><em><strong>工作流程：</strong></em>在工作目录中修改某些文件 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 修改后的文件<strong>进行快照</strong>，保存到暂存区域 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 提交更新，将保存到暂存区域的文件快照永久转储到Git目录中</p><h2 id="三-基本Git指令"><a href="#三-基本Git指令" class="headerlink" title="三. 基本Git指令"></a>三. 基本Git指令</h2><ul><li><p>初始化新仓库执行git init命令</p></li><li><p>git add 命令告诉Git开始对这些文件进行跟踪（运行了git add之后又对相应文件做了修改，要重新git add，否则提交时只会提交add之前所做的修改）</p></li><li><p>提交 git commit</p><ul><li>git commit 加上-a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过git add步骤</li><li>git commit –amend撤销上一次提交，形成新的提交（本质：<strong>合并暂存区的修改和最近的一次commit的修改内容</strong>，用生成的新的commit替换掉原来的commit，而不会形成新的分支）</li><li>git reset HEAD^：工作区不变，<strong>暂存区回退到上一次commit之前</strong>，上一次commit取消</li></ul></li><li><p>git clone [URL]从远程服务器克隆特定的git仓库至本地</p></li><li><p>文件当前处于什么状态，用git status命令</p><ul><li>**# On branch master nothing to commit (working directory clean) ** 当前没有任何跟踪着的文件，也没有任何文件在上次提交后更改过</li><li><strong># On branch master # Untracked files: …</strong> 有未跟踪的文件，使用git add开始跟踪一个新文件</li><li>**# On branch master # Changes to be committed: ** 有处于已暂存状态的文件</li></ul></li><li><p>查看具体修改了什么地方，可以用git diff命令</p><ul><li><strong>git diff</strong> ，比较工作目录中当前文件和暂存区域快照之间的差异，（修改之后但未加入暂存）</li><li><strong>git diff –cached</strong>，比较暂存区域内的文件的更改（修改之后加入缓存但尚未提交，与上次提交时的快照差异）</li><li><strong>git diff HEAD</strong>，已缓存和未缓存的所有差异</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222203634211.png" alt="image-20211222203634211" style="zoom:80%;"></li></ul></li><li><p>git reset [files] 重置文件的暂存状态，把文件从暂存区移除，使得暂存区版本和仓库版本一致、</p></li><li><p>git checkout把文件从暂存区复制到工作目录，丢弃自上一次git add以来的所有本地修改</p></li><li><p>git checkout HEAD命令将最后一次提交的结果复制到工作目录和暂存区，丢弃了本地修改</p></li><li><p>git rm命令从暂存区域中移除，并从工作目录中删除指定的文件（不从工作目录中删除用 git rm –cached）</p></li><li><p>git log查看git项目的提交历史，进行统计分析</p><ul><li>不加任何参数：会按提交时间列出所有的commit，最近的排在最上面，包含SHA-1校验和、作者的名字和电子邮件地址、提交时间以及提交说明</li><li>-p参数：显示每次提交的内容差异(针对每个变化了的文件，增加了哪些行、删除了哪些行)</li><li>–stat参数：查看每次commit的简要统计信息，列出所有被修改过的文件及总数量、每个被修改过的文件有多少行发生变化等</li><li>–pretty=format:… 按特定格式展示commit的结果(格式化输出)</li><li>–graph：以图形方式展示commit的历史</li></ul></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222211322457.png" alt="image-20211222211322457" style="zoom:80%;"><h2 id="四-Git远程仓库指令"><a href="#四-Git远程仓库指令" class="headerlink" title="四. Git远程仓库指令"></a>四. Git远程仓库指令</h2><p><em><strong>远程仓库：托管在网络上的Git项目仓库</strong></em></p><ul><li>添加远程仓库<ul><li><strong>git</strong> <strong>clone</strong>，指令在克隆远程仓库内容到本地之后，自动生成了一个远程仓库配置(origin)</li><li>**git remote add <shortname> <url>**，添加一个新的远程Git仓库，同时指定一个缩写</url></shortname></li></ul></li><li>查看已配置的远程仓库<ul><li><strong>git</strong> <strong>remote</strong>：获取当前配置的所有远程仓库</li><li><strong>git</strong> <strong>remote –v:</strong> 显示当前配置的远程仓库及其读写操作权限(fetch, push)和URL地址</li><li><strong>git</strong> **remote show [remote-name]**：查看某个远程仓库的详细信息</li></ul></li><li>git remote rm pb：从本地移除远程仓库 (不再关注其更新、不再对其有贡献)</li><li>git remote rename pb pb1：将远程仓库重命名</li><li>git fetch：从远程仓库抓取数据到本地，获取本地仓库尚未拥有的全部更新<ul><li>如果本地仓库有了不同的修改，则需要手工将本地修改与远程仓库的修改合并起来(分支的合并git merge)</li></ul></li><li>git pull == git fetch + git merge：获取远程仓库的更新并与本地当前分支合并 </li><li>git push [remote-name] [branch-name]：将本地仓库中的数据推送到远程仓库</li></ul><h2 id="五-Git分支指令"><a href="#五-Git分支指令" class="headerlink" title="五. Git分支指令"></a>五. Git分支指令</h2><p>在 git 中提交时，会保存一个提交(commit)对象，该对象<strong>包含一个指向暂存内容快照的指针</strong>，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针</p><p><em><strong>Git中的分支本质上仅仅是个指向 commit 对象的可变指针</strong></em></p><p>新提交节点中的所有文件都会被复制到暂存区域和工作目录中；只存在于老的提交节点中的文件会被删除</p><ul><li>git branch列出当前所有分支</li><li>git branch (name) 在当前commit对象上新建一个分支指针</li><li>git使用一个叫做HEAD的特别指针来获知你当前在哪个分支上工作</li><li>要切换到其他分支，可以执行git checkout命令</li><li>创建一个新的分支并立即切换过去：git branch –b</li><li>删除一个分支：git branch –d</li><li>使用git log –decorate查看当前各个分支所指的commit对象</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222221210782.png" alt="image-20211222221210782"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222221226032.png" alt="image-20211222221226032"></p><p>如果在不同的分支中都修改了同一个文件的同一部分，Git无法干净地把两者合到一起，使用<strong>git status查看任何包含未解决冲突的文件</strong>，在有冲突的文件里加入标准的冲突解决标记，可以通过它们来<strong>手工定位并解决这些冲突</strong></p><p><em><strong><u>分支合并的本质</u></strong></em></p><ul><li><strong>被合并的分支是当前commit对象的祖父节点</strong>，那么合并命令将什么也不做</li><li><strong>当前commit是被合并分支的祖父节点</strong>，就导致fast-forward合并；指向只是简单的移动，并生成一个新<strong>的提交</strong></li><li>默认把当前commit对象和被合并的分支，以及他们的共同祖父commit节点进行<strong>一次三方合并</strong></li></ul><table><thead><tr><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222222429399.png" alt="image-20211222222429399"></th><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222222434284.png" alt="image-20211222222434284"></th></tr></thead></table><p><em><strong>分支的衍合/变基（rebase）</strong></em></p><p><strong>merge</strong>：把两个父分支合并进行一次提交，提交历史不是线性的</p><p><strong>rebase</strong>：在当前分支上<strong>重演另一个分支的历史</strong>，提交历史是线性的——保持提交历史的整洁</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211222222741305.png" alt="image-20211222222741305" style="zoom:80%;"><p><em><strong>利用分支进行开发的工作流程</strong></em></p><ul><li><strong>长期分支</strong>：稳定master；develop或next后续开发或稳定性测试 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 进入稳定状态合并至master（拥有不同层次的<strong>稳定性</strong>：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去 ）</li><li><strong>特性分支（Topic）</strong>：短期的、用来实现单一特性或与其相关工作的分支（开发工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关）</li></ul><h2 id="六-远程分支"><a href="#六-远程分支" class="headerlink" title="六. 远程分支"></a>六. 远程分支</h2><p>使用“(远程仓库名)/(分支名)”表示</p><p>只能看，不能修改</p><p>git push origin –delete serverfix 从origin远程仓库上删除serverfix的远程分支</p><h2 id="七-使用Git进行协同开发的实例"><a href="#七-使用Git进行协同开发的实例" class="headerlink" title="七. 使用Git进行协同开发的实例"></a>七. 使用Git进行协同开发的实例</h2><h2 id="八-GitHub"><a href="#八-GitHub" class="headerlink" title="八. GitHub"></a>八. GitHub</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——UML及建模工具</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/07UML%E5%8F%8A%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/07UML%E5%8F%8A%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="UML及建模工具"><a href="#UML及建模工具" class="headerlink" title="UML及建模工具"></a>UML及建模工具</h1><h2 id="一-UML简介"><a href="#一-UML简介" class="headerlink" title="一. UML简介"></a>一. UML简介</h2><h3 id="1-模型及其作用"><a href="#1-模型及其作用" class="headerlink" title="1. 模型及其作用"></a>1. 模型及其作用</h3><ul><li><p><em><strong>模型就是现实的简单化</strong></em></p></li><li><p><strong>模型的目的或用途：</strong>模型是为了更好地理解正在开发的系统：系统<strong>可视化</strong>、详细说明系统的<strong>结构或行为</strong>（e.g. 静态/动态结构、行为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 时序描写）、指导构造系统的<strong>模板</strong>、决策进行<strong>文档化</strong>、构建物理实体前先测试、与客户交流、降低<strong>复杂度</strong>。</p></li><li><p><strong>面向对象的建模：</strong>软件系统用<strong>对象（类）</strong>作为其构造单元（块）；class属性（静态）、方法（动态）</p><ul><li>从<strong>问题空间或解空间</strong>的<strong>词汇</strong>中找出<strong>对象</strong></li><li>类是对具有共同性质的一组对象的描述</li></ul></li></ul><h3 id="2-UML介绍"><a href="#2-UML介绍" class="headerlink" title="2. UML介绍"></a>2. UML介绍</h3><p><em><strong>UML——Unified Modeling Language 统一建模语言</strong></em></p><p>UML 是一种对软件系统的制作过程/产出物进行下述工作的描述语言，这些工作包括：<strong>可视化（visualizing）、详述 （specifying）、构造 （constructing）、文档化（documenting）</strong>。</p><p>统一标准：UML已成为<strong>面向对象的标准化</strong>的统一的建模语言</p><p><strong>UML与代码的关系</strong>：编码是实现一个系统，UML是对一个模型建立模型，一些工具（比如Rational Rose）可以根据UML建立的模型来产生java、C++或其他程序语言代码框架。</p><p><strong>UML的构成：</strong>视图（Views）、图（Diagrams）、模型元素、通用机制</p><h3 id="3-UML工具"><a href="#3-UML工具" class="headerlink" title="3. UML工具"></a>3. UML工具</h3><p>Microsoft Visio、IBM Rational Rose、I-Logix、POPKIN、ORACLE、Borland、StarUML、</p><h3 id="4-视图（Views）"><a href="#4-视图（Views）" class="headerlink" title="4. 视图（Views）"></a>4. 视图（Views）</h3><p>三视图</p><p><em><strong>视图</strong></em>是表达系统某一方面特征的 UML 建模元素的子集，它是由一个或者多个图组成的<strong>对系统某个角度的抽象</strong>。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223120418441.png" alt="image-20211223120418441"></p><ul><li><em><strong>Use Case View（用例视图）</strong></em><ul><li>用途：描述系统应该具备的功能，被称为参与者（执行者）的<em><strong>外部用户所能观察到的功能</strong></em></li><li>其他几个视图的核心，直接驱动其他视图的开发</li><li>包含UML图：<em><strong>用例图</strong></em></li><li>使用者：分析人员</li></ul></li><li><em><strong>Logical View（逻辑视图）</strong></em><ul><li>用途：描述用例图中提出的<em><strong>系统功能的实现</strong></em></li><li>包含UML图：<em><strong>静态结构（类图、对象图），动态协作关系（状态图、时序图、协作图、活动图）</strong></em></li><li>使用者：分析人员、设计人员、开发人员</li></ul></li><li><em><strong>Process View（进程视图）</strong></em><ul><li>用途：考虑<em><strong>资源</strong></em>的有效利用、<em><strong>代码的并行执行</strong></em>以及系统环境中<em><strong>异步事件</strong></em>的处理</li><li>解决在并发系统中存在的<strong>通信和同步问题</strong></li><li>包含UML图：<em><strong>状态图、协作图、组件图、活动图</strong></em></li><li>使用者：开发人员、系统集成人员</li></ul></li><li><em><strong>Implementation View（实现视图）</strong></em><ul><li>用途：描述系统的<em><strong>实现模块</strong></em>以及它们之间的<em><strong>依赖关系</strong></em></li><li>包含UML图：<em><strong>组件图</strong></em></li><li>使用者：开发人员</li></ul></li><li><em><strong>Deployment View（部署视图）</strong></em><ul><li>用途：显示系统的<em><strong>物理部署（物理设备）</strong></em>，并描述位于节点实例上的运行组件实例的部署情况</li><li>包含UML图：<em><strong>部署图</strong></em></li><li>使用者：开发人员、系统集成人员、测试人员</li></ul></li></ul><p>***<u>UML中的模型图</u>***：类图（class diagram）、对象图（object diagram）、用例图（use case diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、组件图（component diagram）、部署图（deployment diagram）</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223125337619.png" alt="image-20211223125337619" style="zoom:80%;"><p>UML中的关系：<strong>关联、依赖、泛化、实现、聚合</strong></p><ul><li><em><strong>关联</strong></em><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130359738.png" alt="image-20211223130359738"></li><li><em><strong>依赖</strong></em> <img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130432036.png" alt="image-20211223130432036"></li><li><em><strong>泛化</strong></em> <img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130445435.png" alt="image-20211223130445435"></li><li><em><strong>实现</strong></em> <img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130457344.png" alt="image-20211223130457344"></li><li><em><strong>聚合/组合</strong></em> <img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130509537.png" alt="image-20211223130509537"></li></ul><p>UML 模型中最<strong>基本的结构化事物</strong>，包括：<em><strong>类、接口、协作、用例、活动类、组件、节点</strong></em></p><ul><li><em><strong>类</strong></em><ul><li>对相同属性、方法、关系和语义的对象的抽象</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223125737888.png" alt="image-20211223125737888" style="zoom:50%;"></li></ul></li><li><em><strong>接口</strong></em><ul><li><strong>类或组件</strong>提供特定服务的一组操作的集合</li><li>描述了类或组件的<strong>对外可见的动作</strong></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223125924946.png" alt="image-20211223125924946" style="zoom: 33%;"></li></ul></li><li><em><strong>协作</strong></em><ul><li>定义了交互操作</li><li>代表构成系统的模式的实现</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130014686.png" alt="image-20211223130014686" style="zoom:50%;"></li></ul></li><li><em><strong>用例</strong></em><ul><li>描述系统对一个特定角色执行一系列动作</li><li>组织动作事件</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130100994.png" alt="image-20211223130100994" style="zoom:50%;"></li></ul></li><li><em><strong>活动类（对象）</strong></em><ul><li>有一个或多个进程或线程的类</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130146423.png" alt="image-20211223130146423" style="zoom:50%;"></li></ul></li><li><em><strong>组件</strong></em><ul><li>实现了物理上可替换的系统部分</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130219987.png" alt="image-20211223130219987" style="zoom:50%;"></li></ul></li><li><em><strong>节点</strong></em><ul><li>在运行时存在的一个物理元素</li><li>代表一个可计算的资源</li><li>通常占用一些内存和具有处理能力</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223130320177.png" alt="image-20211223130320177" style="zoom:67%;"></li></ul></li></ul><h2 id="二-用例图"><a href="#二-用例图" class="headerlink" title="二. 用例图"></a>二. 用例图</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/5CD16393087937A75137A308A25D4B97.png" alt="img" style="zoom: 50%;"><h3 id="1-用例图简介"><a href="#1-用例图简介" class="headerlink" title="1. 用例图简介"></a>1. 用例图简介</h3><p>用例图应用在软件开发的<strong>需求分析阶段</strong>，描述了系统的功能以及如何使用一个系统</p><p>用例图显示谁将是相关的<em><strong>用户</strong></em>、用户希望<em><strong>系统提供什么服务</strong></em>以及<em><strong>用户需要为系统提供的服务</strong></em></p><p><em><strong><u>用例图类型</u></strong></em></p><ul><li><strong>业务用例图</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 边界是组织——用例是期望、服务</li><li><strong>系统用例图</strong>  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 边界是系统/子系统——用例是子系统、模块、功能</li></ul><h3 id="2-用例图的组成"><a href="#2-用例图的组成" class="headerlink" title="2. 用例图的组成"></a>2. 用例图的组成</h3><p>用例图主要包含以下 6 个元素：<strong>参与者（Actor）、用例（Use Case）、关联关系（Association）、包含关系（Include）、扩展关系（Extend）、泛化关系（Generalization）</strong></p><h3 id="3-参与者、用例、事件流"><a href="#3-参与者、用例、事件流" class="headerlink" title="3. 参与者、用例、事件流"></a>3. 参与者、用例、事件流</h3><h4 id="3-1-参与者（Actor）"><a href="#3-1-参与者（Actor）" class="headerlink" title="3.1 参与者（Actor）"></a>3.1 参与者（Actor）</h4><p><em><strong><u>参与者的概念</u><em><strong>：参与者是</strong></em>系统外部的一个实体</strong></em>，参与用例的执行过程，参与者由参与用例时所担当的<em><strong>角色表示</strong></em>，每个参与者可以参加<strong>一个或多个用例</strong></p><p><em><strong>参与者的种类：</strong></em>参与者可以是系统<strong>用户</strong>（真实的人，即user，<strong>最常见</strong>的参与者，存在于每一个系统，按角色命名）、<strong>时间代理人（timer）</strong>、交互的<strong>其他系统</strong>（外部程序），其他如硬件设备、外部设备和外部数据库等。</p><p><strong>总之参与者不一定是人</strong> ，但参与者由”<em><strong>角色</strong></em>“表示<strong>而不是特定的人或事</strong>。</p><p><em><strong><u>先定系统边界</u></strong></em> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 寻找系统参与者，参与者对系统而言总是外部的</p><p>参与者可以<strong>直接或间接</strong>地同系统交互或使用系统提供的服务以完成某件事件</p><p>一个人或事物在与系统发生交互时，可以<strong>扮演多个角色</strong></p><p><em><strong>启动者和支持者（协作者）</strong></em></p><ul><li><strong>启动者是用例的主要服务对象</strong></li><li><strong>另一类是扮演支持者角色的参与者</strong></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223134646388.png" alt="image-20211223134646388" style="zoom: 80%;"></li></ul><p>参与者之间可以具有<em><strong>泛化关系</strong></em>，使用泛化关系来描述多个参与者之间的<strong>公共行为</strong></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223134750808.png" alt="image-20211223134750808" style="zoom: 67%;"><h4 id="3-2-用例与事件流"><a href="#3-2-用例与事件流" class="headerlink" title="3.2 用例与事件流"></a>3.2 用例与事件流</h4><p><em><strong>用例的概念</strong></em>：用例是<strong>外部可见的系统功能单元</strong>，不揭露系统内部构造的前提下定义连贯的行为，不是需求或功能的说明</p><p>用例的表示：简单名（simple name）<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223141700254.png" alt="image-20211223141700254" style="zoom:50%;">、路径名（Path name)<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223141709224.png" alt="image-20211223141709224" style="zoom:50%;"></p><p><strong>用例分析处于系统的需求分析阶段，这个阶段应该尽量避免考虑系统的细节问题</strong></p><p><strong>实际建立系统，则需要更加具体的细节，这些细节写在用例对应的事件流文件中</strong></p><p>值得注意的是事件流描述的也是系统<em><strong>”做什么“</strong></em>，而不是”怎么做“</p><p><em><strong>事件流文件组成</strong></em>（常见的事件流描述方法是一个表格）</p><ul><li>简要说明（用例相关、参与者）</li><li>前提条件</li><li>后置条件</li><li>事件流程（主事件流、其他事件流、错误流）</li></ul><h3 id="4-用例间的关系"><a href="#4-用例间的关系" class="headerlink" title="4. 用例间的关系"></a>4. 用例间的关系</h3><ul><li><em><strong>关联关系：</strong></em>参与者与用例之间的关系<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223142528579.png" alt="image-20211223142528579" style="zoom: 50%;"></li></ul></li><li><em><strong>包含关系：</strong></em>用例之间，一个用例简单地包含其他用例具有的行为<ul><li>包含关系把几个用例的<strong>公共部分</strong>分离成一个单独的被包含用例；一个用例的功能太多，用包含关系建模成两个以上的用例，<strong>降低用例的复杂度</strong></li><li>被包含用例称为<strong>提供者用例</strong>，包含用例称为<strong>客户用例</strong></li><li><em><strong>客户用例执行，则提供者用例必须执行</strong></em></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223142907237.png" alt="image-20211223142907237" style="zoom:50%;"></li></ul></li><li><em><strong>扩展关系：</strong></em>基础用例的增量扩展<ul><li>把新的行为加到已有的用例中去</li><li>基础用例提供<strong>扩展点</strong>以添加新的行为，扩展用例插入到基础用例的扩展点上</li><li><em><strong>基础用例被执行，一般不会涉及扩展用例；只有特定的条件发生，扩展用例才被执行</strong></em>，与包含关系区分</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223143320145.png" alt="image-20211223143320145" style="zoom:50%;"></li></ul></li><li><em><strong>泛化关系：</strong></em>一般与特殊的关系<ul><li>父用例可以被特别地列举为一个或多个子用例，子用例表示父用例的特殊形式</li><li>子用例从父用例处继承行为和属性，还可以添加行为或覆盖、改变继承的行为</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223143559930.png" alt="image-20211223143559930" style="zoom:50%;"></li></ul></li></ul><h3 id="5-实例：图书馆管理系统的用例图（看PPT）"><a href="#5-实例：图书馆管理系统的用例图（看PPT）" class="headerlink" title="5. 实例：图书馆管理系统的用例图（看PPT）"></a>5. 实例：图书馆管理系统的用例图（看PPT）</h3><ul><li><p><em><strong>确定系统涉及的总体信息</strong></em></p></li><li><p><em><strong>确定系统的参与者</strong></em></p></li><li><p><em><strong>确定系统的用例</strong></em>（包括不同参与者的不同用例）</p></li><li><p><em><strong>图书馆管理系统的用例图</strong></em></p></li></ul><h3 id="6-边界"><a href="#6-边界" class="headerlink" title="6. 边界"></a>6. 边界</h3><ul><li>正确用例图<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223144315863.png" alt="image-20211223144315863" style="zoom: 67%;"></li></ul></li><li>错误用例图<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223144342090.png" alt="image-20211223144342090" style="zoom: 67%;"></li></ul></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223144452473.png" alt="image-20211223144452473" style="zoom: 67%;"><h3 id="7-用例的粒度"><a href="#7-用例的粒度" class="headerlink" title="7. 用例的粒度"></a>7. 用例的粒度</h3><p>是用例吗？常有<strong>把步骤当作用例的错误</strong>：</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223144715314.png" alt="image-20211223144715314" style="zoom:67%;"><p>用例能多能少</p><h3 id="8-用例的层次"><a href="#8-用例的层次" class="headerlink" title="8. 用例的层次"></a>8. 用例的层次</h3><p>？？？？？《include》关系</p><h3 id="9-业务建模"><a href="#9-业务建模" class="headerlink" title="9. 业务建模"></a>9. 业务建模</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223145114938.png" alt="image-20211223145114938" style="zoom:80%;"><h2 id="三-活动图"><a href="#三-活动图" class="headerlink" title="三. 活动图"></a>三. 活动图</h2><h3 id="1-活动图简介"><a href="#1-活动图简介" class="headerlink" title="1. 活动图简介"></a>1. 活动图简介</h3><p>活动图是UML用于<em><strong>系统动态行为模型</strong></em>工具</p><p>描述活动顺序，***<u>从一个活动到另一个活动的控制流</u>***</p><p>本质上是流程图</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223145831401.png" alt="image-20211223145831401" style="zoom:80%;"><h3 id="2-活动图元素"><a href="#2-活动图元素" class="headerlink" title="2. 活动图元素"></a>2. 活动图元素</h3><ul><li><em><strong>动作状态：</strong></em>原子的、瞬时的、不可分解、不可中断<ul><li>可以有入转换（动作流、对象流），至少一条出转换</li><li>不能有入口动作和出口动作，更不能有内部转移</li></ul></li><li><em><strong>活动状态：</strong></em>非原子、可分解（分解为子活动或动作状态）<ul><li>活动状态的<strong>内部活动</strong>可以用<strong>另一个活动图</strong>来表示</li><li>活动状态可以有入口动作和出口动作，也可以有内部转移</li></ul></li></ul><p><strong>动作状态是活动状态的一个特例，如果某个活动状态只包括一个动作，那么它就是一个动作状态</strong></p><p>动作状态图和活动状态图都用平滑的圆角矩形表示</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223150943098.png" alt="image-20211223150943098" style="zoom:50%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223150950213.png" alt="image-20211223150950213" style="zoom:50%;"></p><ul><li><em><strong>开始点</strong></em><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223151243264.png" alt="image-20211223151243264" style="zoom: 67%;"></li></ul></li><li><em><strong>结束点</strong></em><ul><li>整个活动结束<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223151255057.png" alt="image-20211223151255057" style="zoom:67%;"></li></ul></li><li>子流程的结束<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223151302524.png" alt="image-20211223151302524" style="zoom:67%;"></li></ul></li></ul></li><li><em><strong>分支与合并</strong></em><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223151329402.png" alt="image-20211223151329402" style="zoom: 67%;"></li></ul></li><li><em><strong>分叉与汇合</strong></em><ul><li>分叉用将控制流分为<strong>两个或者多个并发运行</strong>的分支</li><li>汇合用于<strong>同步</strong>这些并发分支，以达到<strong>共同完成一项事务</strong>的目的</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223151447513.png" alt="image-20211223151447513" style="zoom:80%;"></li></ul></li><li><em><strong>泳道</strong></em></li><li><em><strong>对象流</strong></em><ul><li>对象放在活动图中，并用一个依赖将其连接到进行创建、修改或撤销等动作状态或者活动状态上</li><li>对象流是<em><strong>动作状态或者活动状态与对象之间的依赖关系</strong></em>，表示动作使用对象或动作对对象的影响</li></ul></li></ul><h3 id="3-图书馆活动图"><a href="#3-图书馆活动图" class="headerlink" title="3. 图书馆活动图"></a>3. 图书馆活动图</h3><h3 id="4-活动图和状态图区别"><a href="#4-活动图和状态图区别" class="headerlink" title="4. 活动图和状态图区别"></a>4. 活动图和状态图区别</h3><ul><li><p>活动图着重表现从<strong>一个活动到另一个活动的控制流</strong>，是<em><strong>内部处理驱动的流程</strong></em></p></li><li><p>状态图着重描述从<strong>一个状态到另一个状态的流程</strong>，主要<em><strong>有外部事件的参与</strong></em></p></li></ul><h3 id="5-活动图和流程图区别"><a href="#5-活动图和流程图区别" class="headerlink" title="5. 活动图和流程图区别"></a>5. 活动图和流程图区别</h3><ul><li><p>流程图着重描述处理过程，它的主要控制结构是顺序、分支和循环，各个处理之间有严格的顺序和时间关系</p></li><li><p>活动图描述的则是对象活动的顺序关系所遵循的规则，它着重表现的是系统的行为，而非系统的处理过程</p></li><li><p>活动图能够表示<em><strong>并发活动</strong></em>的情形，流程图不能</p></li></ul><h2 id="四-类图-对象图"><a href="#四-类图-对象图" class="headerlink" title="四. 类图/对象图"></a>四. 类图/对象图</h2><h3 id="1-类图的概念"><a href="#1-类图的概念" class="headerlink" title="1. 类图的概念"></a>1. 类图的概念</h3><ul><li><p>描述<strong>类、接口及它们之间关系</strong>的图</p></li><li><p>显示系统中各个类的<strong>静态结构</strong></p></li></ul><h3 id="2-类图的元素"><a href="#2-类图的元素" class="headerlink" title="2. 类图的元素"></a>2. 类图的元素</h3><p><em><strong>类（class）、接口（interface）、依赖关系（dependency）、泛化关系（generalization）、关联关系（association）、实现关系（realization）</strong></em></p><h3 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/F3DFFE17429007C9A725FF957673FCF2.png" alt="img" style="zoom: 45%;"><ul><li><em><strong>分析阶段的类</strong></em>：不考虑方法</li><li><em><strong>设计阶段的类</strong></em>：进行拆分</li><li>数量对比：设计阶段类图类的数量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> 分析阶段类数</li></ul><p>类面向对象系统组织结构的核心</p><p><em><strong><u>类的组成：</u></strong></em></p><ul><li><em><strong>名称（Name）：</strong></em>名词、首字母大写、简单名和路径名</li><li><em><strong>属性（Attribute）：</strong></em> 描述对象具备的特性<ul><li>任意数目的属性，也可以没有属性</li><li><strong>UML类属性语法：[可见性] 属性名 [类型] [=初始值]</strong><ul><li>属性提倡私有，通过方法进行修改</li><li>属性的可见性 $\left{ <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="104.525ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 46200 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="merror" data-mjx-error="You can't use 'macro parameter character #' in math mode" title="You can't use 'macro parameter character #' in math mode"><rect data-background="true" width="46200" height="950" y="-200"></rect><title>You can't use 'macro parameter character #' in math mode</title><g data-mml-node="mtext" style="font-family: serif"><text data-variant="-explicitFont" transform="scale(1,-1)" font-size="884px">\begin{aligned} public + \ private- \ protected# \ package \sim \end{aligned}</text></g></g></g></g></svg></mjx-container> \right.$</li></ul></li></ul></li><li><em><strong>操作（Operation）：</strong></em> 对类的对象所能做的事务的抽象<ul><li><strong>类操作的语法为：[可见性] 操作名 [(参数列表)] [:返回类型]</strong></li><li><strong>返回类型、名称和参数一起被称为操作签名</strong></li></ul></li></ul><h3 id="4-接口"><a href="#4-接口" class="headerlink" title="4. 接口"></a>4. 接口</h3><p>没有给出对象的实现和状态的情况下对对象行为的描述</p><p>包含操作但<strong>不包含属性</strong>，没有对外界可见的关联，一个类可以实现一个或多个接口</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223183017010.png" alt="image-20211223183017010" style="zoom:80%;"><h3 id="5-类之间的关系"><a href="#5-类之间的关系" class="headerlink" title="5. 类之间的关系"></a>5. 类之间的关系</h3><ul><li><p><u><em><strong>依赖关系</strong></em></u></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223183209032.png" alt="image-20211223183209032" style="zoom:50%;"></li><li>依赖关系的分类：<strong>使用依赖、抽象依赖、授权依赖、绑定依赖</strong><ul><li>使用依赖，包括：调用call、参数parameter、发送send、实例化instantiate</li><li>抽象依赖，包括：跟踪trace、精化refine、派生derive</li><li>授权依赖，包括：访问access、导入import、友元friend</li><li>绑定依赖，包括：绑定bind</li></ul></li></ul></li><li><p><u><em><strong>泛化关系</strong></em></u></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223215841906.png" alt="image-20211223215841906" style="zoom:50%;"></li><li>存在于一般元素和特殊元素间的分类关系</li><li>描述了一种”a kind of“的关系</li></ul></li><li><p><u><em><strong>关联关系</strong></em></u></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223220010992.png" alt="image-20211223220010992" style="zoom:50%;"></li><li><p>结构关系，指明对象之间的联系</p></li><li><p><em><strong>关联的名称</strong></em>：动词或动词短语（不必要），指示符消除歧义</p></li><li><p><em><strong>关联的角色</strong></em>：动词或动词短语，关联关系中一个类对另一个类所表现出来的职责（如，学习者和教学者）</p></li><li><p><em><strong>关联的多重性</strong></em>：多少对象参与该关联，一个取值范围、特定值、无限定的范围或一组离散值</p></li></ul></li><li><p><u><em><strong>实现关系</strong></em></u></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223221006856.png" alt="image-20211223221006856" style="zoom:67%;"></li><li>接口和其实现之间的关系</li></ul></li><li><p><em><strong><u>聚合关系</u></strong></em></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223220743091.png" alt="image-20211223220743091" style="zoom:50%;"></li><li>整体与部分的关系</li></ul></li><li><p><em><strong><u>组合</u></strong></em></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223220816880.png" alt="image-20211223220816880" style="zoom:50%;"></li><li>强聚合，类似于人体和躯干、四肢的关系</li></ul></li></ul><h3 id="6-分析阶段的类图"><a href="#6-分析阶段的类图" class="headerlink" title="6. 分析阶段的类图"></a>6. 分析阶段的类图</h3><p>分析阶段主要对领域建模，与实现技术和平台无关，只需要掌握：<em><strong>类（属性、操作、可见性）</strong></em>、<em><strong>关联关系</strong></em>、<em><strong>组合关系</strong></em></p><p>使用”<em><strong>事务模式</strong></em>“对领域建模</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223221521392.png" alt="image-20211223221521392" style="zoom:80%;"><h3 id="7-设计阶段的类图"><a href="#7-设计阶段的类图" class="headerlink" title="7. 设计阶段的类图"></a>7. 设计阶段的类图</h3><h3 id="8-实例：图书馆管理系统的类图"><a href="#8-实例：图书馆管理系统的类图" class="headerlink" title="8. 实例：图书馆管理系统的类图"></a>8. 实例：图书馆管理系统的类图</h3><h2 id="五-交互图（时序图）"><a href="#五-交互图（时序图）" class="headerlink" title="五. 交互图（时序图）"></a>五. 交互图（时序图）</h2><h3 id="1-什么是交互图"><a href="#1-什么是交互图" class="headerlink" title="1. 什么是交互图"></a>1. 什么是交互图</h3><p>交互图是描述系统中<strong>对象之间</strong>通过<strong>消息通信</strong>的图，包括：<strong>序列图（也称时序图、顺序图）、协作图（也称通信图）</strong></p><h3 id="2-序列图简介"><a href="#2-序列图简介" class="headerlink" title="2. 序列图简介"></a>2. 序列图简介</h3><p>序列图用来描述系统中<em><strong>对象间通过消息进行交互</strong></em>，它强调消息在<em><strong>时间轴上的先后</strong></em>顺序。</p><p>序列图常用来描述<strong>用例的实现</strong>，标识了消息发生交互的<strong>先后顺序</strong>，明确<strong>类的职责</strong></p><h3 id="3-序列图的组成"><a href="#3-序列图的组成" class="headerlink" title="3. 序列图的组成"></a>3. 序列图的组成</h3><p><em><strong>组成元素：对象、生命线、消息、激活</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223222353424.png" alt="image-20211223222353424" style="zoom:80%;"><ul><li><em><strong>对象</strong></em><ul><li>序列图顶部——交互开始就被创建，不在顶部——交互过程中被创建<ul><li>创建的两种表示</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223222948287.png" alt="image-20211223222948287" style="zoom:67%;"></li></ul></li><li>名称（对象名：类名）<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223223201098.png" alt="image-20211223223201098" style="zoom:50%;"></li><li>注销：”X“符号</li></ul></li><li><em><strong>生命线</strong></em><ul><li>生命线是一条<strong>垂直的虚线</strong>，表示序列图中的对象在<strong>一段时间内的存在</strong></li><li>有的生命线从顶部延伸至底部，所用的时间取决于交互持续的时间</li></ul></li><li><em><strong>消息</strong></em><ul><li><strong>对象之间某种形式的通信</strong></li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223223346222.png" alt="image-20211223223346222" style="zoom: 67%;"></li><li>如上图所示，消息的类型：调用call（对象之间或对象本身，格式”对象名.成员方法“）、返回return（被调用对象向调用者返回一个值）、发送send（向对象发送一个信号，调用是同步的机制，而信号是一种异步的机制）、创建create和注销destroy</li><li>消息的编号，顺序编号和嵌套编号<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223224217547.png" alt="image-20211223224217547" style="zoom:80%;"></li></ul></li></ul></li><li><em><strong>激活</strong></em><ul><li>激活（activation）表示对象被占用以完成某个任务</li><li>去激活（Deactivation）指对象处于空闲状态、等待消息</li><li><strong>矩形称为激活条或控制期，对象在激活条的顶部被激活，在完成自己的工作后被去激活</strong></li></ul></li></ul><h3 id="4-用例图、类图、序列图之间的关系"><a href="#4-用例图、类图、序列图之间的关系" class="headerlink" title="4. 用例图、类图、序列图之间的关系"></a>4. 用例图、类图、序列图之间的关系</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223224654959.png" alt="image-20211223224654959" style="zoom:67%;"><p><em><strong><u>三种UML图对比</u></strong></em></p><table><thead><tr><th align="center">用例图</th><th align="center">类图</th><th align="center">序列图</th></tr></thead><tbody><tr><td align="center"><strong>动态行为</strong>  <strong>（系统外在行为）</strong></td><td align="center"><strong>静态结构</strong>  <strong>（系统内在结构）</strong></td><td align="center"><strong>动态行为</strong>  <strong>（系统内在行为）</strong></td></tr><tr><td align="center"><strong>参与者、用例</strong></td><td align="center"><strong>类</strong></td><td align="center"><strong>对象</strong></td></tr><tr><td align="center"><strong>包含、扩展、泛化</strong></td><td align="center"><strong>依赖、关联、泛化</strong></td><td align="center"><strong>消息</strong></td></tr><tr><td align="center"><strong>用例描述</strong></td><td align="center"><strong>事务模式</strong></td><td align="center"><strong>BCE模式</strong></td></tr><tr><td align="center"><strong>业务流程</strong></td><td align="center"><strong>领域概念</strong></td><td align="center"><strong>概念与流程的关联</strong></td></tr></tbody></table><p>画图顺序：用例图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 类图 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 序列图</p><h3 id="5-BCE模式？？？？？"><a href="#5-BCE模式？？？？？" class="headerlink" title="5. BCE模式？？？？？"></a>5. BCE模式？？？？？</h3><p>BCE（Boundary、Control、Entity）</p><ul><li>边界类 Boundary：<strong>隔离系统内部和外部</strong><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223225152576.png" alt="image-20211223225152576" style="zoom:50%;"></li></ul></li><li>控制类 Control：<strong>在分析阶段，通常针对一个用例生成一个控制类</strong><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223225222108.png" alt="image-20211223225222108" style="zoom:67%;"></li></ul></li><li>实体类 Entity：<strong>对应于类图中领域概念中的类</strong>，封装数据结构和数据存储有关的类<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223225236236.png" alt="image-20211223225236236" style="zoom:67%;"></li></ul></li></ul><p><strong>新版序列图，一个序列图可以描述多个场景</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 组合片段？（不建议）</p><h3 id="6-实例：图书馆管理系统的序列图"><a href="#6-实例：图书馆管理系统的序列图" class="headerlink" title="6. 实例：图书馆管理系统的序列图"></a>6. 实例：图书馆管理系统的序列图</h3><h3 id="7-Frame"><a href="#7-Frame" class="headerlink" title="7. Frame"></a>7. Frame</h3><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211223233309370.png" alt="image-20211223233309370"></p><h3 id="8-组合片段"><a href="#8-组合片段" class="headerlink" title="8. 组合片段"></a>8. 组合片段</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224001943167.png" alt="image-20211224001943167" style="zoom:80%;"><ul><li>opt：可能发生或可能不发生的序列，可以在临界条件中指定序列发生的条件</li><li>alt：设置一个临界条件来指示该片段可以运行的条件</li><li>loop：片段重复一定次数，可以在临界条件中指示片段重复的条件</li><li>break：如果执行此片段，则放弃序列的其余部分</li><li>par：并行处理</li><li>critical：此片段中的消息不得与其他消息交错</li><li>ref：在一个交互图中，引用其他的交互图</li></ul><h3 id="9-协作图"><a href="#9-协作图" class="headerlink" title="9. 协作图"></a>9. 协作图</h3><p><em><strong>协作图</strong></em>：也称为通信图，它描述了系统中，对象间通过消息进行的交互，强调了<strong>对象在交互行为中承担的角色</strong></p><p>包含元素：对象、链、消息</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224104733984.png" alt="image-20211224104733984" style="zoom:80%;"><p>序列图与协作图都表示对象之间的交互作用，只是它们的侧重点有所不同</p><ul><li>序列图描述了交互过程中的<strong>时间顺序</strong>，但没有明确地表达对象之间的关系</li><li>协作图<strong>描述了对象之间的关系</strong>，但时间顺序必须从<strong>顺序号</strong>获得</li><li>两种图的语义是等价的，可以从一种形式的图转换成另一种形式的图，而不丢失任何信息（<em><strong>协作图是序列图去掉时序用序列号表示</strong></em>）</li></ul><h2 id="六-状态图"><a href="#六-状态图" class="headerlink" title="六. 状态图"></a>六. 状态图</h2><p><em><strong><u>状态图</u><em><strong>主要用于描述</strong></em>一个对象在其生存期间的动态行为</strong></em>，表现为一个对象所经历的<em><strong>状态序列</strong></em>，引起状态转移的<em><strong>事件</strong></em>（Event），以及因状态转移而<em><strong>伴随的动作</strong></em>（Action）</p><p><em><strong><u>状态图元素</u></strong></em></p><ul><li><p><em><strong>状态</strong></em></p><ul><li>在此期间，满足某些条件、执行某些活动或等待某些事件</li><li>状态图圆角矩形表示</li><li>初始状态、终止状态：<img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224105746874.png" alt="image-20211224105746874" style="zoom:50%;"></li></ul></li><li><p><strong>*<u>转移</u><em><strong>（两个状态之间的一种关系）：在</strong>源状态</em>*中执行一定的动作，并在某个</strong>特定事件发生<strong>而且某个特定的</strong>警界条件满足**时进入目标状态</p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224105844073.png" alt="image-20211224105844073" style="zoom:50%;"></li><li>触发事件（转移诱因）、警戒条件（条件满足才转移）、结果（对象转移后的结果）</li><li>自身转移</li></ul></li><li><p><em><strong>动作：</strong></em>可执行的原子操作，不可中断，执行时间可忽略（EntryActions、DoActions、ExitActions）</p></li><li><p><em><strong>组合状态：</strong></em>嵌套子状态</p><ul><li><table><thead><tr><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224111828624.png" alt="image-20211224111828624"></th><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224111836676.png" alt="image-20211224111836676"></th></tr></thead></table></li><li><p>进入节点：<strong>直接通过一个节点进入状态</strong>，<strong>此节点称之为进入节点或选择节点</strong></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224112608193.png" alt="image-20211224112608193" style="zoom:50%;"></li></ul></li><li><p>退出节点：状态内部子状态转移到外部状态，边界经过退出节点</p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224112659874.png" alt="image-20211224112659874" style="zoom:67%;"></li></ul></li><li><p>历史状态：记住退出时的子状态</p></li><li><p>并发：组合状态在某一时刻同时达到多个子状态</p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224112553688.png" alt="image-20211224112553688" style="zoom:67%;"></li></ul></li></ul></li></ul><p><em><strong><u>状态图实例</u></strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224112742700.png" alt="image-20211224112742700" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224112802114.png" alt="image-20211224112802114" style="zoom:67%;"><h2 id="七-组件图-部署图（略）"><a href="#七-组件图-部署图（略）" class="headerlink" title="七. 组件图+部署图（略）"></a>七. 组件图+部署图（略）</h2><h3 id="1-组件图"><a href="#1-组件图" class="headerlink" title="1. 组件图"></a>1. 组件图</h3><p><strong>组件图描述了软件的各种组件以及它们之间的依赖关系</strong></p><p><strong>组件图可以用来显示编译、链接或执行时组件之间的依赖关系，以及组件的接口和调用关系</strong></p><p>组件图包含元素：组件、接口、依赖关系</p><p>一般组件就是一个实际文件：<strong>deployment componen</strong>，如dll文件、exe文件、COM+对象、CORBA对象、EJB、动态Web页、数据库表等；<strong>work product component</strong>，如源代码文件，数据文件等，这些构件可以用来产生deployment component；<strong>execution component</strong>，系统执行后得到的构件</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224114411401.png" alt="image-20211224114411401" style="zoom:80%;"><p>组件和接口之间的关系：</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224114649615.png" alt="image-20211224114649615" style="zoom:67%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224114523592.png" alt="image-20211224114523592"><h3 id="2-部署图（实施图）"><a href="#2-部署图（实施图）" class="headerlink" title="2. 部署图（实施图）"></a>2. 部署图（实施图）</h3><p>部署模型通常与组件模型并行开发</p><p>用来描述系统<strong>硬件的物理拓扑结构</strong>以及在此结构上执行的<strong>软构件</strong></p><p>一个系统模型只有一个部署图，可以显示计算节点的拓扑结构和通信路径、节点上运行的软构件等，由体系结构设计师 / 网络工程师 / 系统工程师等描述</p><p>基本概念：node节点（处理器、设备），connection连接</p><ul><li>节点是存在于运行时并代表一项计算资源的物理元素，一般至少拥有一些内存，而且通常具有处理能力<ul><li>处理器具有处理能力的节点，即它可以执行构件<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224120600435.png" alt="image-20211224120600435" style="zoom:80%;"></li></ul></li><li>设备是无计算能力的外部设备，如Modem、终端<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224120620298.png" alt="image-20211224120620298" style="zoom:80%;"></li></ul></li></ul></li><li>连接是代表一种交流的机制（物理媒介和软件协议）</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224120806152.png" alt="image-20211224120806152" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211224120819802.png" alt="image-20211224120819802" style="zoom:80%;">]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件项目管理</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/05%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/05%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h1><h2 id="一-软件项目管理的案例"><a href="#一-软件项目管理的案例" class="headerlink" title="一. 软件项目管理的案例"></a>一. 软件项目管理的案例</h2><ul><li>软件项目管理的挑战<ul><li>在预定的范围、质量、时间和成本等约束条件下交付项目</li><li>通过优化资源（资金、人、原料、能源、空间等）的分配与集成来满足预先定义的目标</li></ul></li><li>软件项目的特征<ul><li>软件产品的不可见性 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件项目复杂和抽象</li><li>项目高度不确定性 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 预定计划和实际情况存在较大偏差</li><li>软件过程的多变化性 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 不确定、不稳定</li><li>软件人员的高技能及其高流动性 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 风险</li></ul></li></ul><p><em><strong><u>软件项目管理的“4P”</u></strong></em></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221101701218.png" alt="image-20211221101701218"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221101724398.png" alt="image-20211221101724398"></p><h2 id="二-人员-People"><a href="#二-人员-People" class="headerlink" title="二. 人员 People"></a>二. 人员 People</h2><ul><li><em><strong>软件项目的参与人员</strong></em><ul><li><strong>高级管理者</strong>：负责定义业务问题（<strong>产品经理</strong>）</li><li><strong>项目（技术）管理者</strong>：计划、激励、组织和控制软件开发人员（<strong>项目经理</strong>）</li><li><strong>开发人员</strong>：拥有开发软件所需技能的人员<ul><li><em>系统分析员、系统架构师、设计师、程序员、测试人员、质量保证人员、…</em></li></ul></li><li><strong>客户</strong>：甲方</li><li><strong>最终用户</strong>：直接使用软件的人</li></ul></li></ul><ul><li>软件开发团队的组织模式<ul><li>一窝蜂模式：没有明确分工</li><li>主治医师模式：首席程序员处理主要模块的设计和编码，其他成员从各种角度支持Ta的工作 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 明星模式<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221110149609.png" alt="image-20211221110149609"></li></ul></li><li>社区模式：志愿者参与，参与自己感兴趣的项目；众人拾柴火焰高，不拾柴火熄灭；社区不意味着随意，代码复审和签入的质量管理 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 开源项目</li><li>交响乐团模式：门类齐全，各司其职；演奏协调，遵循曲谱  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 类似工厂，严格遵循预定生产流程</li><li>爵士乐模式：主乐手吹主题，其余人员即兴发挥，主乐手最后再加入，回应主题 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 类似于一群天才构成的敏捷团队</li><li>功能团队模式：不同能力，平等协作（没有管理与被管理的关系），项目完成重新组织</li><li>官僚模式：除了技术上的合作和领导，还混进了组织上的领导和被领导关系</li></ul></li></ul><p><em><strong>大型项目的技术管理组织结构</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221155923728.png" alt="image-20211221155923728" style="zoom:80%;"><h2 id="三-产品-Product"><a href="#三-产品-Product" class="headerlink" title="三. 产品 Product"></a>三. 产品 Product</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221155949463.png" alt="image-20211221155949463" style="zoom:80%;"><ul><li>首先确定<strong>软件范围</strong><ul><li>功能和非功能（性能、可用性、安全、法律等）</li><li>软件范围应确定：包括管理层和技术层都必须无歧义</li></ul></li><li>确定范围后，对其进行<strong>分解</strong>——分而治之</li><li>*<u><strong>产品结构分解</strong></u>*（Product Breakdown Structure, <strong>PBS</strong>）产品分解工具<ul><li><strong>PBS</strong>：通过<strong>分层的树型结构</strong>来定义和组织项目范围内的所有<strong>产出物(产品)<strong>，</strong>自顶向下</strong>，<strong>逐级细分</strong></li><li>产出物：项目结束时需要提交的最终产品，在项目之初就可以准确预计</li></ul></li></ul><h2 id="四-过程-Process"><a href="#四-过程-Process" class="headerlink" title="四. 过程 Process"></a>四. 过程 Process</h2><ul><li>Step1：选择合适的<strong>软件过程模型</strong></li><li>Step2：根据选择的过程模型，对其进行<strong>适应性修改</strong></li><li>Step3：确定过程中应包含的<strong>工作任务列表</strong></li></ul><p>***<u>工作结构分解（Work Breakdown Structure, WBS）</u>***，过程分解工具</p><h2 id="五-项目-Project"><a href="#五-项目-Project" class="headerlink" title="五. 项目 Project"></a>五. 项目 Project</h2><ul><li>项目关注的四个方面：<strong>范围、时间、成本、质量</strong></li><li>项目管理的主要任务：<strong>项目可行性分析与估算</strong>、<strong>项目进度安排</strong>、<strong>项目风险管理</strong>、<strong>项目质量管理</strong>、<strong>项目跟踪与控制</strong></li><li>**<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="7.502ex" height="1.937ex" role="img" focusable="false" viewBox="0 -833.9 3315.8 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1136.2,363) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mi" transform="translate(1539.8,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(2427.8,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container>**原则：Why（为什么开发这个系统）、What（将要做什么）、When（什么时候做）、Who（某功能谁来做）、Where（他们的组织机构位于何处）、How（如何完成技术和管理工作）、How much（各种资源分别需要多少）</li></ul><h2 id="六-可行性分析与估算"><a href="#六-可行性分析与估算" class="headerlink" title="六. 可行性分析与估算"></a>六. 可行性分析与估算</h2><p><em><strong><u>可行性分析与估算</u></strong></em></p><ul><li>项目<strong>开始之前</strong>，<strong>预先估计</strong>三件事：需要多少<em><strong>工作量</strong></em>、需要多少<em><strong>时间</strong></em>、需要多少<em><strong>人员</strong></em></li><li>此外，预测所需要的<strong>资源（硬件和软件）</strong>以及蕴含的<strong>风险</strong></li><li>由上述得出项目是否可行的结论</li></ul><p><em><strong>确定范围</strong></em></p><ul><li><strong>范围</strong>：描述将要交付给最终用户的功能和特性、输入输出数据、用户界面、系统性能、约束条件、接口和可靠性等，以及期望的时间、成本目标（<strong>主要是业务范围，时间和成本只需要简述且从业务范围得出</strong>）</li><li>两种方法：项目成员交流之后，写出软件范围的叙述性描述（<strong>开发人员给出</strong>）；由<strong>最终用户</strong>给出一组用例</li><li>注意：并不是客户所有的需求都来者不拒，需要分别对待；用户签字确认</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211221190444925.png" alt="image-20211221190444925" style="zoom:80%;"><p><strong>可行性分析：技术、经济、时间、资源</strong></p><p><em><strong>软件项目估算（时间、成本、资源）</strong></em></p><p>变化多 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 估算不精确</p><p>估算越精确 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 项目成功可能性越高</p><p>估算方法：代码行、功能点、过程时间、其他（不同方法 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 考虑因素不同 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 复杂程度不同）都是实际经验总结</p><p><strong>COCOMO (COnstructive COst MOdel, 软件构造性成本模型)<strong>：回归分析，从项目历史和现状某些特性作参数进行计算，</strong>用于工作量估算与成本估算</strong>，广泛使用和全面估算。</p><h2 id="七-项目进度计划与监控"><a href="#七-项目进度计划与监控" class="headerlink" title="七. 项目进度计划与监控"></a>七. 项目进度计划与监控</h2><p><strong>项目管理里通常采用*<u>甘特图(Gantt Chart)</u>*来描述任务的进度安排</strong></p><ul><li>将<strong>资源分配给任务</strong>：资金、人员、设备、环境</li><li>明确<strong>产出结果</strong>：每一项产出结果是什么，对应PBS哪一部分</li><li>明确<strong>里程碑</strong>：项目关键产出物，标志某一阶段完成</li></ul><p>项目进度表只是提供了一张进度路线图，在实际执行过程中，需要定期对其进行跟踪和控制，以决定是否需要对进度计划进行调整</p><p>敏捷开发的项目管理工具：VersionOne，敏捷领域最流行的商业化项目管理工具之一</p><h2 id="八-项目风险管理"><a href="#八-项目风险管理" class="headerlink" title="八. 项目风险管理"></a>八. 项目风险管理</h2><h2 id="九-项目质量管理"><a href="#九-项目质量管理" class="headerlink" title="九. 项目质量管理"></a>九. 项目质量管理</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——敏捷方法与过程</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/04%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/04%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="敏捷方法与过程"><a href="#敏捷方法与过程" class="headerlink" title="敏捷方法与过程"></a>敏捷方法与过程</h1><h2 id="一-敏捷过程模型"><a href="#一-敏捷过程模型" class="headerlink" title="一. 敏捷过程模型"></a>一. 敏捷过程模型</h2><p><em><strong><u>变化无处不在，难以预测变化何时发生，要在每一项开发活动中贯穿变化的意识</u></strong></em></p><p><em><strong>《敏捷软件开发宣言》</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220210615264.png" alt="image-20211220210615264" style="zoom:67%;"><p><em><strong>总结：小步快跑，及时反馈</strong></em></p><p><em><strong><u>本质：以快速的增量和迭代的方式进行软件开发</u></strong></em></p><ul><li><strong>不强调文档</strong>而强调<strong>可运行软件</strong>片段</li><li>开发者与客户频繁<strong>沟通</strong></li><li><strong>快速开发，快速反馈，快速修改，增量交付</strong></li><li>持续不断的<strong>短周期迭代</strong></li><li>不看重形式和工具，看重人和内容，保持简洁</li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220211147830.png" alt="image-20211220211147830" style="zoom:67%;"><p>敏捷开发前期开发成本比传统开发过程高，而后期成本要比传统开发过程低</p><p><em><strong><u>敏捷过程中最重要的因素：人</u></strong></em></p><p>（这里的人应该指的是开发者和客户）</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220211654269.png" alt="image-20211220211654269" style="zoom:67%;"><p><em><strong>目前广泛使用敏捷开发方法论</strong></em></p><p>略，包括极限编程和Scrum，XP是Scrum的基础</p><h2 id="二-极限编程（XP）"><a href="#二-极限编程（XP）" class="headerlink" title="二. 极限编程（XP）"></a>二. 极限编程（XP）</h2><ul><li><em><strong>极限：把事情做到极致</strong></em><ul><li>了解客户需求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 客户时时刻刻都在身边，时时了解需求</li><li>测试/单元测试提高质量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> TDD（先写测试，测试驱动开发）</li><li>代码复审找到错误 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 一开始就处于“复审状态”，即结对编程</li><li>变化块 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 频繁增量开发，重构和频繁发布</li></ul></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220213551697.png" alt="image-20211220213551697" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220213556594.png" alt="image-20211220213556594" style="zoom:80%;"><h3 id="1-XP-Planning-计划阶段"><a href="#1-XP-Planning-计划阶段" class="headerlink" title="1. XP Planning 计划阶段"></a>1. XP Planning 计划阶段</h3><p><em><strong><u>用户故事、权值（价值和风险）、验收测试准则、迭代计划</u></strong></em></p><ul><li><strong>用户故事</strong>：描述输出、特性、功能等</li><li>客户指定<strong>用户故事优先级</strong>：按照<strong>价值或风险</strong>评估</li><li>XP团队指定用户故事<strong>成本（开发周数）</strong>：超过三周则拆分</li><li>指定<strong>下一次发布的增量</strong>的若干个用户故事</li><li>规划<strong>整体进度</strong></li><li>开发过程增删改拆用户故事</li></ul><h3 id="2-XP-Design-设计阶段"><a href="#2-XP-Design-设计阶段" class="headerlink" title="2. XP Design 设计阶段"></a>2. XP Design 设计阶段</h3><ul><li><strong>KIS原则（Keep It Simple）</strong></li><li><strong>CRC卡片（Class Responsibility Collaborator）</strong></li><li><strong>Spike Solutions 原型</strong>（刺探性的解决方案，问题拿不准做实验尝试）</li><li>设计方案不断<strong>重构</strong></li></ul><h3 id="3-XP-Coding-and-Testing-编码与测试阶段"><a href="#3-XP-Coding-and-Testing-编码与测试阶段" class="headerlink" title="3. XP Coding and Testing 编码与测试阶段"></a>3. XP Coding and Testing 编码与测试阶段</h3><h4 id="3-1-XP-Coding"><a href="#3-1-XP-Coding" class="headerlink" title="3.1 XP Coding"></a>3.1 XP Coding</h4><p>***<u>结对编程</u>***：两个人一起编程、实时讨论评审</p><p>***<u>TDD（测试驱动的开发）</u><em><strong>：先写测试用例（</strong>单元测试用例</em>*），再写代码；</p><h4 id="3-2-XP-Testing"><a href="#3-2-XP-Testing" class="headerlink" title="3.2 XP Testing"></a>3.2 XP Testing</h4><p>自动化单元测试、集成测试、持续进行回归测试、验收测试（见10章）</p><p>验收与用户故事是否相符</p><h3 id="4-Pair-Programming-结对编程"><a href="#4-Pair-Programming-结对编程" class="headerlink" title="4. Pair Programming 结对编程"></a>4. Pair Programming 结对编程</h3><p>驾驶员，领航员</p><p>双方只有水平上的差距，没有级别上的差异（平等的决策权）</p><p>质量取决于一对程序员中各方面水平较高的那一位</p><h2 id="三-Scrum"><a href="#三-Scrum" class="headerlink" title="三. Scrum"></a>三. Scrum</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220221838041.png" alt="image-20211220221838041" style="zoom:80%;"><p><em><strong><u>Scrum的六项活动</u></strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220222052966.png" alt="image-20211220222052966" style="zoom:80%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220222504943.png" alt="image-20211220222504943"></p><ul><li>Product Owner：确定产品功能，<strong>维护Product Backlog</strong>、deadline、priority、ROI（投资回报率），验收结果</li><li>Scrum Master（Strum Team Leader）：保证开发过程按计划进行；<strong>组织</strong>会议：<strong>每日站会、Sprint计划会议、完成工作后的Sprint评审会议和Sprint回顾会议</strong>；通过外在/内在协调，确保团队资源完全可被利用并且全部是高产出的</li><li>Team（Scrum团队）：在每个Sprint中将<strong>Product Backlog中的条目转化</strong>成为潜在可交付的功能增量（可以认为是<strong>Sprint Backlog</strong>）；规模在<strong>4-7</strong>人；具备交付产品增量所需要的各种技能</li></ul><p><em><strong><u>每日站会</u></strong></em></p><ul><li>团队成员站着开会——短时间（15分钟。每人不超过三分钟）内高效讨论问题，保持注意力集中</li><li>每个人向同伴报告进度：<strong>我昨天做了什么、我今天要做什么、我碰到了哪些问题</strong></li><li>简明图表展示项目进度</li></ul><p><strong>Sprint Burndown Chart 燃尽图</strong></p><p><strong>Task Board 任务墙</strong>（parking 表示任务堆积）</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220224416747.png" alt="image-20211220224416747" style="zoom:80%;"><h2 id="四-与传统开发过程模型对比"><a href="#四-与传统开发过程模型对比" class="headerlink" title="四. 与传统开发过程模型对比"></a>四. 与传统开发过程模型对比</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220224432368.png" alt="image-20211220224432368" style="zoom:80%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220224507774.png" alt="image-20211220224507774"></p><h2 id="五-敏捷案例分析"><a href="#五-敏捷案例分析" class="headerlink" title="五. 敏捷案例分析"></a>五. 敏捷案例分析</h2><p>客户对功能需求还不明确</p><p>需要快速推出抢占市场</p><p>适合敏捷过程的项目</p><p>敏捷方法希望快速交付可用的软件，实现软件的快速交付是通过<strong>迭代</strong>来完成</p><p><em>业务分析师？？？</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件过程模型</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/03%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/03%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h1><h2 id="一-软件过程"><a href="#一-软件过程" class="headerlink" title="一. 软件过程"></a>一. 软件过程</h2><ul><li>软件过程定义内容：人员与分工、所执行的活动、活动的细节和步骤</li><li>软件过程通过以下方式组织和管理软件生命周期：<strong>定义软件生产过程中的活动、定义这些活动的顺序及其关系</strong></li><li>软件过程的目的：标准化、可预见性、提高开发效率、高质量产品，提升制定时间和预算计划的能力</li></ul><p>***<u>黑盒测试与白盒测试</u>***（后面还会细讲，具体来说白盒测试知道代码怎么写的，可以根据代码来写测试）</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220154212173.png" alt="image-20211220154212173"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220154233917.png" alt="image-20211220154233917"></p><p><strong>软件过程的典型阶段：</strong>提出设想 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 深入调研 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 需求规格说明 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件设计 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件实现 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件部署 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件验证 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 软件演化</p><h2 id="二-典型软件过程模型"><a href="#二-典型软件过程模型" class="headerlink" title="二. 典型软件过程模型"></a>二. 典型软件过程模型</h2><h3 id="1-瀑布模型（鲑鱼模型）"><a href="#1-瀑布模型（鲑鱼模型）" class="headerlink" title="1. 瀑布模型（鲑鱼模型）"></a>1. 瀑布模型（鲑鱼模型）</h3><p><strong>一旦向前一阶段就很难回溯</strong></p><p>计划 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 需求分析 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 设计 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 编码 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 测试 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 运行维护</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220154716987.png" alt="image-20211220154716987"></p><ul><li>上一阶段结束下一阶段才开始，上一阶段的输出是下一阶段的输入</li><li>每个阶段都有里程碑和提交物，每个阶段均需要进行V&amp;V（verification and validation，验证和确认）</li><li><strong>侧重于文档和产出物（回溯难）</strong></li></ul><p><em><strong>优点——追求效率</strong></em></p><ul><li>按阶段划分检查点，项目易于管理</li><li>每个阶段必须提交文档，并且每个阶段产品必须进行正式、严格的技术审查</li></ul><p><em><strong>缺点——过于理想化</strong></em></p><ul><li>用户需求难以清楚确认，需求变更</li><li>开发人员与用户缺乏沟通，只依赖文档难以满足客户需求</li><li>项目接近尾声才得到可执行程序，如果存在缺陷，由于难以回溯，可能造成重大损失</li><li>也就是说瀑布模型太理想、太单纯，不适用于现代软件开发</li></ul><p><em><strong>适用场合（总体来说，就是要满足顺序开发、尽量不回溯、需求明确等特点）</strong></em></p><ul><li>项目小，各模块接口定义清晰</li><li>产品定义明确，开发中不能有太大的变动</li><li>开发技术成熟，团队成员都熟悉这些技术</li><li>各个步骤的子团队分属机构不同或地理位置不同，难以频繁交流</li><li>外部环境的不可控因素少</li></ul><h3 id="2-增量过程模型"><a href="#2-增量过程模型" class="headerlink" title="2. 增量过程模型"></a>2. 增量过程模型</h3><p><strong>解决的问题：</strong>初始需求不明确（只需要需求的核心部分），迫切为用户迅速提供功能有限的软件之后再进行扩充</p><h4 id="2-1-增量模型"><a href="#2-1-增量模型" class="headerlink" title="2.1 增量模型"></a>2.1 增量模型</h4><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220160704883.png" alt="image-20211220160704883"></p><p>软件被作为一系列的增量来设计、实现、集成和测试，每一个增量是由多个相互作用的模块所形成的<strong>特定功能</strong>的代码片段构成</p><p><em><strong><u>本质：以迭代的方式运行瀑布模型</u></strong></em></p><ul><li><strong>第一个增量往往是核心产品：满足基本需求</strong>，但缺少附加特性</li><li>客户使用上一个增量的提交物进行评价。指定下一个增量的计划（需要增加的特性和功能）</li><li>重复上述过程</li></ul><p><em><strong>优点</strong></em></p><ul><li><strong>时间</strong>要求高，短时间交付满足客户需求的一个子集的可运行产品（不要求完整产品）</li><li><strong>人员分配</strong>灵活，开发人员不够，可以采用增量模型</li><li>逐步增加产品功能，用户有充裕的时间来学习和适应新产品</li><li><strong>较高优先权的模块首先交付</strong>，增量不断集成，重要功能接受更多测试，<strong>项目总体失败的风险较低</strong></li></ul><p><em><strong>困难</strong></em></p><ul><li>加入增量，***<u>不破坏原来已经构造好的部分</u>***</li><li>加入新增量时应简单、方便</li><li><strong>无法处理需求发生变更</strong>（***<u>无法变更已经有的需求！！！！</u>***）</li><li><strong>管理人员</strong>必须有足够的技术能力来<strong>协调好各增量之间的关系</strong></li></ul><h4 id="2-2-快速应用程序开发（RAD）"><a href="#2-2-快速应用程序开发（RAD）" class="headerlink" title="2.2 快速应用程序开发（RAD）"></a>2.2 快速应用程序开发（RAD）</h4><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220165728205.png" alt="image-20211220165728205"></p><ul><li><p>快速开发应用RAD（Rapid Application Development）</p><ul><li><p>侧重于<strong>短开发周期</strong>，是<strong>瀑布模型的高速变体</strong>，通过基于构件的构建方法实现</p></li><li><p><strong>多个团队并行进行开发</strong>，先启动的团队的提交物作为后启动团队的输入</p></li></ul></li><li><p><strong>缺点</strong></p><ul><li><strong>大量人力资源</strong>来（多个RAD团队）</li><li>如果没有在短时间内为急速完成整个系统做好准备，RAD项目将会失败</li><li>如果系统不能被合理的模块化，RAD将会带来很多问题</li><li>技术风险很高的情况下（采用很多新技术、软件需与其他已有软件建立集成等等），不宜采用RAD</li></ul></li></ul><h3 id="3-演化过程模型"><a href="#3-演化过程模型" class="headerlink" title="3. 演化过程模型"></a>3. 演化过程模型</h3><p>需要解决的问题：开发过程需求经常变化、交付时间紧张（不可能圆满完成软件产品）、扩展的细节没有定义</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 演化过程模型，专门应对不<strong>断演变的</strong>软件过程模型</p><p><strong>*<u>演化过程模型的目的</u><em><strong>：需求的</strong>变更频繁</em>*，要求在非常短的期限内实现，以</strong>充分满足客户/用户要求**、及时投入市场</p><p><u><em><strong>本质：循环、反复、不断调整当前系统以适应需求变化</strong></em></u></p><p>演化过程的模型的问题：</p><ul><li>周期数不确定，项目管理困难</li><li>演化太快——项目混乱，演化太慢——影响生产率</li><li>为了质量牺牲开发速度、灵活性和可扩展性</li></ul><h4 id="3-1-螺旋模型（强调风险）"><a href="#3-1-螺旋模型（强调风险）" class="headerlink" title="3.1 螺旋模型（强调风险）"></a>3.1 螺旋模型（强调风险）</h4><p><em><strong><u>螺旋式过程模型与增量、AD等的最大区别在于重视风险评估</u></strong></em></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220201501149.png" alt="image-20211220201501149"></p><ul><li>螺旋模型沿着螺旋线在<strong>四个象限</strong>内表达四个方面的活动<ul><li><strong>制定计划</strong>：确定软件目标，弄清方案和限制</li><li><strong>风险分析</strong>：分析所选方案，考虑识别和消除风险</li><li><strong>实施工程</strong>：开发验证</li><li><strong>客户评估</strong>：评价开发、提出修正建议</li></ul></li></ul><p><em><strong><u>出发点：开发过程中及时识别和分析风险，并采取适当措施以消除或减少风险带来的危害</u></strong></em></p><p><em><strong>优点：</strong></em>结合了<strong>原型的迭代性质</strong>与<strong>瀑布模型的系统性和可控性</strong>，是一种<strong>风险驱动</strong>型的过程模型</p><ul><li>循环逐步加深系统定义和实现程度，更好理解、应对和降低风险</li><li>确定一系列里程碑</li><li>保持可操作性，直到软件生命周期结束</li><li>风险驱动，支持现有软件复用</li></ul><p><em><strong>缺陷：</strong></em></p><ul><li>适用于<strong>大规模、内部</strong>项目，周期长、成本高</li><li>寻找可能风险，否则带来的风险更大</li></ul><h4 id="3-2-原型模型（快速原型法）"><a href="#3-2-原型模型（快速原型法）" class="headerlink" title="3.2 原型模型（快速原型法）"></a>3.2 原型模型（快速原型法）</h4><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220194744391.png" alt="image-20211220194744391"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220193434684.png" alt="image-20211220193434684"></p><ul><li><p>Step 1：双方通过<strong>沟通，明确已知的需求</strong>，并大致勾画出以后再进一步定义的东西</p></li><li><p>Step 2：<strong>迅速策划</strong>一个原型开发迭代并进行建模，主要集中于那些<strong>最终用户所能够看到的内容</strong>，如人机接口布局或者输出显示格式等</p></li><li><p>Step 3：<strong>快速设计产生原型</strong>，对<strong>原型进行部署</strong>，由客户和用户进行评价</p></li><li><p>Step 4：根据<strong>反馈</strong>，进一步细化需求并<strong>调整原型</strong></p></li><li><p>Step 5：原型系统不断<strong>调整以逼近</strong>用户需求</p></li></ul><p>***<u>原型类型</u>***：</p><ul><li><strong>抛弃型原型</strong>：原型<strong>不可执行</strong>，得到认可之后不作为系统一部分而是被抛弃，目的只是<strong>收集和验证客户需求</strong></li><li><strong>演化式模型</strong>：原型<strong>可执行</strong>，是系统的一部分，最初构造的原型将具备较高的质量，<strong>包含了系统的核心功能</strong>，然后通过<strong>收集需求</strong>对其进行不断的改善和精化</li></ul><p><em><strong>优点</strong></em>：***<u>提高和改善客户/用户的参与程度，最大程度的响应用户需求的变化</u>***</p><p><em><strong>缺点</strong></em>：</p><ul><li>为了尽快完成原型，开发者<strong>没有考虑整体软件的质量和长期的可维护性</strong>，系统<strong>结构通常较差</strong></li><li>可能<strong>混淆原型系统与最终系统</strong>，原型系统在完全满足用户需求之后可能会被<strong>直接交付</strong>给客户使用（演化式模型）</li><li>额外的开发费用（一般是抛弃式模型）</li></ul><h3 id="4-其他过程模型"><a href="#4-其他过程模型" class="headerlink" title="4. 其他过程模型"></a>4. 其他过程模型</h3><h4 id="4-1-形式化过程"><a href="#4-1-形式化过程" class="headerlink" title="4.1 形式化过程"></a>4.1 形式化过程</h4><p>严格的数学形式刻画每一阶段（需求、设计、程序、测试）</p><p>形式化方法在各阶段产物间进行自动化/半自动的转换</p><p>优点：提供无缺陷的软件</p><p>缺陷：难以理解，可视性差，技术要求高；耗时、耗成本；有些方面难以形式化表达（太过理想化，实践很少用）</p><p>应用：可靠性和安全性要求较高的系统</p><h4 id="4-2-软件复用过程"><a href="#4-2-软件复用过程" class="headerlink" title="4.2 软件复用过程"></a>4.2 软件复用过程</h4><p>主要思想：复用</p><p>新软件系统，通过已有的软件单元（软构件）来构造系统</p><p>过程：需求分析 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 体系结构设计 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 构件获取（购买、重新开发） <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 构件修改与测试 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 构件组装 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 集成测试</p><h2 id="三-案例分析"><a href="#三-案例分析" class="headerlink" title="三. 案例分析"></a>三. 案例分析</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——概论</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/01%E6%A6%82%E8%AE%BA/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/01%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-概论"><a href="#第一章-概论" class="headerlink" title="第一章.概论"></a>第一章.概论</h1><h2 id="一-软件的基本概念"><a href="#一-软件的基本概念" class="headerlink" title="一. 软件的基本概念"></a>一. 软件的基本概念</h2><h3 id="1-什么是软件"><a href="#1-什么是软件" class="headerlink" title="1. 什么是软件"></a>1. 什么是软件</h3><p><strong>一个例子</strong>：简单计算的工具，自己孩子用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container>小程序、全校学生用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container>软件、放在网站上<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container>服务</p><p>规模越来越大，需求越来越复杂；难度越来越大，所需的时间越来越长；出错的概率也越来越大</p><h4 id="1-1-软件的定义"><a href="#1-1-软件的定义" class="headerlink" title="1.1 软件的定义"></a>1.1 软件的定义</h4><p><u><strong><em>软件(Software)：</em>一组对象或项目所形成的一个“配置”，由程序、文档和数据等部分构成。</strong></u></p><ul><li><strong>程序(program)<strong>：可被</strong>计算机硬件理解并执行</strong>的一组指令，提供期望的功能和性能</li><li><strong>数据(data structure)<strong>：程序能正常操纵信息的</strong>数据结构</strong></li><li><strong>文档(document)<strong>：与程序</strong>开发、维护和使用有关</strong>的图文材料</li></ul><p><em><strong>程序只是软件的一部分</strong></em></p><h4 id="1-2-软件的四大特征"><a href="#1-2-软件的四大特征" class="headerlink" title="1.2 软件的四大特征"></a>1.2 <em><strong>软件的四大特征</strong></em></h4><ul><li><strong>复杂性（complexity）</strong><ul><li>要解决的<strong>现实问题</strong>通常很复杂，数据、状态、逻辑关系的可能组合导致了软件本身的复杂性</li><li>软件无法以“制造”的方式被生产，只能采用手工开发方式，智力密集型，与人的水平密切相关</li></ul></li><li><strong>不可见性（invisibility）</strong><ul><li>尚未完成的软件是看不见的，无法像产品一样充分呈现其结构<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container>沟通困难，难以精确刻画度量</li></ul></li><li><strong>易变形（changeability）</strong><ul><li>软件所应用的环境由人群、法规、硬件设备、应用领域等因素汇集而成，而这些因素皆会频繁快速的变化</li></ul></li><li><strong>一致性（conformity）</strong><ul><li>各子系统的接口必须协同一致，但难以维持</li></ul></li></ul><p>（精确性与模糊性？）</p><p><img src="https://raw.githubusercontent.com/FuLucas/image/main/2022/202203251418882.png" alt="image-test"></p><h4 id="1-3-软件不断变化"><a href="#1-3-软件不断变化" class="headerlink" title="1.3 软件不断变化"></a>1.3 <em><strong>软件不断变化</strong></em></h4><ul><li>变化以适应新的计算环境或新技术的发展</li><li>功能增强以实现新的业务需求</li><li>扩展以与其他软件系统进行互操作</li><li>重构以延续生命周期</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219162059891.png" alt="image-20211219162059891"></p><p><em><strong>软件不会磨损，但是维护困难</strong></em></p><p><strong>遗留系统</strong>(Legacy system)：仍在<strong>使用中</strong>的软件系统，可满足客户需求，但很难以“优雅的”方式对其进行演变以适应新需求或新环境。</p><h4 id="1-4-软件的分类"><a href="#1-4-软件的分类" class="headerlink" title="1.4 软件的分类"></a>1.4 <em><strong>软件的分类</strong></em></h4><ul><li><strong>系统软件</strong>：操作系统、编译器、数据库/DBMS、集成开发环境（IDE）</li><li><strong>应用软件</strong>：商业软件（企业/政府）、个人软件、工程和科学计算软件</li><li><strong>开发方式</strong>：商业软件、开源软件</li><li><strong>存在形式</strong>：嵌入式/单机/分布式、移动终端、基于Web、服务形态的软件（SaaS）</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219163004301.png" alt="image-20211219163004301"></p><h3 id="2-软件的发展"><a href="#2-软件的发展" class="headerlink" title="2. 软件的发展"></a>2. 软件的发展</h3><h4 id="2-1-软件及其开发方式的发展"><a href="#2-1-软件及其开发方式的发展" class="headerlink" title="2.1 软件及其开发方式的发展"></a>2.1 软件及其开发方式的发展</h4><ul><li><strong>第一阶段（1950-1960年代）</strong><ul><li>主要用于数值计算</li><li>认为质量完全依赖程序员个人才能</li><li>简单<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container>复杂的发展，<strong>软件危机</strong></li></ul></li><li><strong>第二阶段（1970年代）</strong><ul><li>商务领域推广，数据库、结构化编程等技术</li><li><strong>“软件生命周期”</strong> 概念出现，软件不仅是程序，还包括开发、使用、维护等文档</li></ul></li><li><strong>第三阶段（1980年代）</strong><ul><li>规模复杂度扩大<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 关注软件开发过程管理及工程性开发</li><li><strong>CASE工具</strong></li><li>关注软件的<strong>质量度量和管理</strong></li><li><strong>面向对象</strong>思想出现</li></ul></li><li><strong>第四阶段（1990年代）</strong><ul><li>Internet和Web<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 分布式、异构环境下的软件</li><li><strong>软件复用</strong></li><li><strong>分布式计算</strong>、网络技术</li></ul></li><li><strong>第五阶段（2000年代至今）</strong><ul><li>软件服务化、系统互操作的需求</li><li>云计算平台的软件体系结构、模型驱动的开发方法MDA、<strong>敏捷软件开发方法</strong>、软件集成开发环境及工具</li><li>面向服务的体系结构SOA方法</li><li>基于互联网与云计算的软件开发方法</li><li>普适计算、移动计算</li></ul></li></ul><h4 id="2-2-软件及其开发方式"><a href="#2-2-软件及其开发方式" class="headerlink" title="2.2 软件及其开发方式"></a>2.2 软件及其开发方式</h4><h4 id="2-3-软件开发技术的发展过程"><a href="#2-3-软件开发技术的发展过程" class="headerlink" title="2.3 软件开发技术的发展过程"></a>2.3 软件开发技术的发展过程</h4><ul><li><strong>1950-1960年代</strong><ul><li>软件=程序</li><li>面向过程的软件=算法+数据结构</li></ul></li><li><strong>1970年代</strong><ul><li>软件=程序+文档</li><li>软件=程序+文档+数据</li></ul></li><li><strong>1980-1990年代</strong><ul><li><strong>面向对象的软件=对象+消息</strong></li></ul></li><li><strong>1990年代至今</strong><ul><li><strong>面向构件的软件=构件+框架</strong></li><li><strong>面向服务的软件=服务+消息+总线</strong></li></ul></li></ul><h2 id="二-软件工程的基本概念"><a href="#二-软件工程的基本概念" class="headerlink" title="二. 软件工程的基本概念"></a>二. 软件工程的基本概念</h2><h3 id="1-软件工程产生的历史根源"><a href="#1-软件工程产生的历史根源" class="headerlink" title="1. 软件工程产生的历史根源"></a>1. 软件工程产生的历史根源</h3><p>NO Sliver Bullet</p><p>软件危机</p><p>软件神话（《人月神话》）</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219174355287.png" alt="image-20211219174355287"></p><h3 id="2-软件工程的基本概念"><a href="#2-软件工程的基本概念" class="headerlink" title="2. 软件工程的基本概念"></a>2. 软件工程的基本概念</h3><ul><li>软件工程是为了经济地获得能够在实际机器上<strong>高效运行的可靠软件而建立和使用的一系列工程化原则</strong></li><li><strong>将系统性的、规范化的、可定量的方法应用于软件的开发、运行和维护，即将工程化应用到软件上</strong></li><li>应用计算机科学理论和技术以及工程管理原则和方法，<strong>按预算和进度实现满足用户要求的软件产品的定义、开发、发布和维护的工程</strong>，或以其为研究对象的学科</li></ul><p><u><strong>软件工程重要的不是技术而是<em>如何开发软件项目的思想</em></strong></u></p><p>软件工程是一种<strong>建模</strong>活动、<strong>解决问题</strong>的活动、<strong>知识获取</strong>的活动、<strong>受软件工程原理指导</strong>的活动</p><p><strong>软件工程的范围</strong></p><ul><li>软件<strong>开发过程(分析、设计、实现、测试、运行、维护)</strong></li><li>软件开发中应遵循的原则和管理技术</li><li>软件开发中所采用的技术和工具</li></ul><p><strong>软件工程的目标</strong></p><ul><li>高质量</li><li>按时交付</li><li>控制成本（商业行为）</li><li>满足用户需求</li></ul><h3 id="3-软件工程的知识体系"><a href="#3-软件工程的知识体系" class="headerlink" title="3. 软件工程的知识体系"></a>3. 软件工程的知识体系</h3><p>$$<br>\text { 软件工程学 } \begin{cases}\text { 软件开发技术 } &amp; \left{<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="72.312ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 31962 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">开</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">发</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">方</text><text data-variant="normal" transform="translate(4750,0) scale(1,-1)" font-size="884px" font-family="serif">法</text><text data-variant="normal" transform="translate(5650,0) scale(1,-1)" font-size="884px" font-family="serif">学</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(6550,0)"></path><text data-variant="normal" transform="translate(6939,0) scale(1,-1)" font-size="884px" font-family="serif">方</text><text data-variant="normal" transform="translate(7839,0) scale(1,-1)" font-size="884px" font-family="serif">法</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(8739,0)"></path><path data-c="A0" d="" transform="translate(9128,0)"></path></g><g data-mml-node="mtext" transform="translate(9378,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(9628,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">工</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">具</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(3850,0)"></path><text data-variant="normal" transform="translate(4239,0) scale(1,-1)" font-size="884px" font-family="serif">工</text><text data-variant="normal" transform="translate(5139,0) scale(1,-1)" font-size="884px" font-family="serif">具</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(6039,0)"></path><path data-c="A0" d="" transform="translate(6428,0)"></path></g><g data-mml-node="mtext" transform="translate(16306,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(16556,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">过</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(3850,0)"></path><text data-variant="normal" transform="translate(4239,0) scale(1,-1)" font-size="884px" font-family="serif">过</text><text data-variant="normal" transform="translate(5139,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(6039,0)"></path><path data-c="A0" d="" transform="translate(6428,0)"></path></g><g data-mml-node="mtext" transform="translate(23234,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(23484,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">工</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">环</text><text data-variant="normal" transform="translate(4750,0) scale(1,-1)" font-size="884px" font-family="serif">境</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(5650,0)"></path><text data-variant="normal" transform="translate(6039,0) scale(1,-1)" font-size="884px" font-family="serif">工</text><text data-variant="normal" transform="translate(6939,0) scale(1,-1)" font-size="884px" font-family="serif">具</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(7839,0)"></path><path data-c="A0" d="" transform="translate(8228,0)"></path></g></g></g></g></g></g></svg></mjx-container>\right. \<br>\text { 软件工程管理 } &amp; \left{<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="70.891ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 31334 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">管</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">理</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">学</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(4750,0)"></path><text data-variant="normal" transform="translate(5139,0) scale(1,-1)" font-size="884px" font-family="serif">过</text><text data-variant="normal" transform="translate(6039,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><text data-variant="normal" transform="translate(6939,0) scale(1,-1)" font-size="884px" font-family="serif">、</text><text data-variant="normal" transform="translate(7839,0) scale(1,-1)" font-size="884px" font-family="serif">质</text><text data-variant="normal" transform="translate(8739,0) scale(1,-1)" font-size="884px" font-family="serif">量</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(9639,0)"></path><path data-c="A0" d="" transform="translate(10028,0)"></path></g><g data-mml-node="mtext" transform="translate(10278,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(10528,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">经</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">济</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">学</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(4750,0)"></path><text data-variant="normal" transform="translate(5139,0) scale(1,-1)" font-size="884px" font-family="serif">过</text><text data-variant="normal" transform="translate(6039,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><text data-variant="normal" transform="translate(6939,0) scale(1,-1)" font-size="884px" font-family="serif">、</text><text data-variant="normal" transform="translate(7839,0) scale(1,-1)" font-size="884px" font-family="serif">质</text><text data-variant="normal" transform="translate(8739,0) scale(1,-1)" font-size="884px" font-family="serif">量</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(9639,0)"></path><path data-c="A0" d="" transform="translate(10028,0)"></path></g><g data-mml-node="mtext" transform="translate(20806,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(21056,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">软</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">件</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">度</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">量</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">学</text><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" transform="translate(4750,0)"></path><text data-variant="normal" transform="translate(5139,0) scale(1,-1)" font-size="884px" font-family="serif">过</text><text data-variant="normal" transform="translate(6039,0) scale(1,-1)" font-size="884px" font-family="serif">程</text><text data-variant="normal" transform="translate(6939,0) scale(1,-1)" font-size="884px" font-family="serif">、</text><text data-variant="normal" transform="translate(7839,0) scale(1,-1)" font-size="884px" font-family="serif">质</text><text data-variant="normal" transform="translate(8739,0) scale(1,-1)" font-size="884px" font-family="serif">量</text><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(9639,0)"></path><path data-c="A0" d="" transform="translate(10028,0)"></path></g></g></g></g></g></g></svg></mjx-container>\right.\end{cases}<br>$$</p><h4 id="3-1-软件开发方法学"><a href="#3-1-软件开发方法学" class="headerlink" title="3.1 软件开发方法学"></a>3.1 软件开发方法学</h4><p><em><strong>结构化开发方法SADT (Structured Analysis and Design Technique)、面向对象开发方法OOAD (Object Oriented Analysis and Design)、基于UML的OOAD</strong></em></p><table><thead><tr><th>传统软件工程：结构化方法</th><th>面向对象方法</th></tr></thead><tbody><tr><td><strong>程序=数据结构+算法</strong></td><td><strong>程序=对象+消息</strong></td></tr><tr><td>自顶向下：结构化需求分析<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 结构化设计(概要设计、详细设计)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 面向过程的编码<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 测试</td><td>软件分析与对象抽取 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 对象详细设计<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 面向对象的编码<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 面向对象的测试</td></tr><tr><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219194749609.png" alt="image-20211219194749609"></td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219194758148.png" alt="image-20211219194758148"></td></tr></tbody></table><h4 id="3-2-软件工具与软件工程环境"><a href="#3-2-软件工具与软件工程环境" class="headerlink" title="3.2 软件工具与软件工程环境"></a>3.2 软件工具与软件工程环境</h4><p><strong>工具：</strong>自动或半自动的软件支撑环境，辅助软件开发任务的完成，提高开发效率和软件质量、降低开发成本</p><ul><li><strong>项目管理</strong>工具、<strong>需求</strong>管理工具、<strong>设计</strong>建模工具、<strong>编程和测试</strong>工具、<strong>测试和维护</strong>工具</li><li>多个工具集成在一起<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 形成软件工程开发环境CASE（Computer Aided Software Engineering计算机辅助软件工程）</li></ul><h4 id="3-3-软件过程"><a href="#3-3-软件过程" class="headerlink" title="3.3 软件过程"></a>3.3 软件过程</h4><p>将人员、技术、组织与管理有机的结合在一起，实现在规定的时间和预算内开发高质量软件的目标</p><h4 id="3-4-软件工程管理"><a href="#3-4-软件工程管理" class="headerlink" title="3.4 软件工程管理"></a>3.4 软件工程管理</h4><ul><li>目的：为了按照进度和预算完成软件开发计划</li><li>内容：成本估算、进度安排、人员组织、质量保证</li></ul><h4 id="3-5-软件质量特性"><a href="#3-5-软件质量特性" class="headerlink" title="3.5 软件质量特性"></a>3.5 软件质量特性</h4><ul><li><strong>软件质量</strong><ul><li>定义：<strong>软件产品与需求相一致的程度</strong>，由一系列质量特性来描述</li><li>不完全取决于开发人员自身，通常与客户、用户、维护人员等<strong>提出的要求</strong>密切相关</li><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219215157682.png" alt="image-20211219215157682"></li></ul></li></ul><ul><li><strong>Bug</strong><ul><li>Bug的多少可以直接衡量一个软件的开发效率、用户满意度、可靠性、可维护性</li><li>Bug=软件的行为和用户的期望值不一样</li></ul></li></ul><h4 id="软件工程知识体系（Software-Engineering-Body-of-Knowledge-SWEBOK）"><a href="#软件工程知识体系（Software-Engineering-Body-of-Knowledge-SWEBOK）" class="headerlink" title="***软件工程知识体系（Software Engineering Body of Knowledge, SWEBOK）"></a>***软件工程知识体系（Software Engineering Body of Knowledge, SWEBOK）</h4><h2 id="三-软件工程工具"><a href="#三-软件工程工具" class="headerlink" title="三. 软件工程工具"></a>三. 软件工程工具</h2><h2 id="CASE工具"><a href="#CASE工具" class="headerlink" title="CASE工具"></a>CASE工具</h2><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219214308116.png" alt="image-20211219214308116"></p><ul><li><p>计算机辅助系统工程工具 - CASE</p></li><li><p>制图、建模工具：Rational Rose / Microsoft Visio / StarUML</p></li><li><p>原型制作工具：Balsamiq Mockups / ExtJS / jQuery / EasyUI /墨刀</p></li><li><p>集成开发环境：Visual Studio.NET / Eclipse</p></li><li><p>数据库设计工具：PowerDesigner / ERWin</p></li><li><p>代码生成工具：Rational Rose</p></li><li><p>项目管理工具：Microsoft Project</p></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219220220099.png" alt="image-20211219220220099" style="zoom:80%;"><p>SADT/OOP：结构化分析设计技术/面向对象编程</p><p>NFP：非功能属性</p><p>GUI：图形化用户界面</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件测试</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/10%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/10%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="一-软件测试基础"><a href="#一-软件测试基础" class="headerlink" title="一. 软件测试基础"></a>一. 软件测试基础</h2><p>传统：评估一个程序或系统的属性或能力，确定它是否符号其所需结果的活动</p><p><em><strong>软件测试目的：在程序中找错误，检验是否满足需求。</strong></em></p><p>程序交付测试之前，程序员可以找到和纠正超过99%的错误，软件测试的目的就是找到剩下的1%。</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228162545278.png" alt="image-20211228162545278" style="zoom: 67%;"><p><em><strong>软件测试的原则</strong></em></p><ul><li><strong>尽早的</strong>、不断的测试</li><li>程序员<strong>避免检查自己的程序</strong></li><li>从小规模开始，逐渐到大规模</li><li>设计测试用例时，应该包括<strong>合理的输入和不合理的输入</strong>，以及各种<strong>边界条件</strong></li><li>充分注意测试中的聚集现象：80%的错误由20%造成</li><li>对测试结果一定要有一个确认过程</li><li>严格的测试计划</li><li>注意<strong>回归测试的关联性</strong>（回归测试，小的改动一定要走一遍全部的测试）</li><li>妥善保存一切<strong>测试文档</strong></li></ul><p><em><strong>测试用例：</strong></em>为特定目的而设计的一组<strong>测试输入、执行条件和预期的结果</strong>，最小的测试实体</p><p>测试用例的设计原则：代表性、可判定性、可再现性</p><h2 id="二-测试过程"><a href="#二-测试过程" class="headerlink" title="二. 测试过程"></a>二. 测试过程</h2><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228163600032.png" alt="image-20211228163600032" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228163635797.png" alt="image-20211228163635797" style="zoom:80%;"><h2 id="三-测试方法分类"><a href="#三-测试方法分类" class="headerlink" title="三. 测试方法分类"></a>三. 测试方法分类</h2><h3 id="1-按实施步骤划分"><a href="#1-按实施步骤划分" class="headerlink" title="1. 按实施步骤划分"></a>1. 按实施步骤划分</h3><ul><li><p><em><strong><u>单元测试 Unit Testing</u></strong></em></p><ul><li>对软件<strong>基本组成单元</strong>进行测试，也称组件测试，以class为单位；一般是编写该单元的<em><strong>开发人员</strong></em>执行</li><li>测试环境：<strong>驱动模块（Driver）</strong>——被测模块的上一级模块，接收测试数据，把数据传送给所测模块，最后再输出实际测试结果，也就是被谁调用。<strong>桩模块（stub）</strong>——模拟被测单元所需要调用的其他函数接口，模拟实现子函数的某些功能，重要的是返回一个结果值。</li></ul></li><li><p>***<u>集成测试 Integration Testing</u><em><strong>——满足</strong>软件设计文档</em>*</p><ul><li>很多单元集成在一起 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 不能工作？</li><li>在单元测试的基础上，将所有模块按总体设计组装成子系统或系统，<strong>集成测试的对象是模块间的接口</strong></li><li><strong>集成测试的方法</strong>（具体案例见后）<ul><li><strong>整体集成（非增量集成）</strong>：所有模块一次全部组装，进行整体测试<ul><li>优点：效率高、工作量低、简单</li><li>缺点：错误<strong>难以定位和修改</strong>（修改时新旧错误混杂）、即使测试通过也会<strong>遗漏很多错误</strong></li></ul></li><li><strong>增量式集成测试</strong>：逐步将新模块加入测试<ul><li><em><strong>自顶向下的增量集成：</strong></em>从主控模块开始，按软件的控制层次结构，以深度优先或广度优先的策略，逐步把各个模块集成在一起（每次只替代一个桩模块，不断进行回归测试）<ul><li>优点：主要控制和决策机制较早测试；<strong>较少需要驱动模块</strong></li><li>缺点：<strong>桩模块数量巨大</strong>；测试高层模块，低层用桩模块替代没有反应真实情况，测试不充分</li></ul></li><li><em><strong>自底向上的增量集成：</strong></em>从软件结构最底层的模块开始组装测试<ul><li>优点：<strong>不用桩模块</strong></li><li>缺点：<strong>难以建立信心</strong></li></ul></li><li><em><strong>三明治集成：</strong></em>一种混合增量式集成策略，综合了自顶向下和自底向上两种方法的优点</li></ul></li></ul></li></ul></li><li><p><em><strong><u>确认测试 Validation Testing</u></strong></em></p><ul><li>检测软件能否按照合同要求进行工作，满足<strong>软件需求说明书</strong>的确认标准</li><li>确认测试一般是<strong>开发人员</strong>来做</li></ul></li><li><p><em><strong><u>系统测试 System Testing</u></strong></em></p><ul><li>系统测试是将<strong>已经集成好的软件系统</strong>作为一个元素，与计算机硬件、外设、某些支持软件、数据和人员等<strong>其他元素结合</strong>在一起，在<strong>实际运行环境</strong>下进行的一系列测试</li><li>功能测试（不管代码好坏）、压力测试（资源超负荷）、安全性测试、恢复测试（失败中恢复）、GUI测试、安装测试（目标环境中进行安装，用户亲自测试）</li></ul></li><li><p><em><strong><u>验收测试 Verification Testing</u></strong></em></p><ul><li><strong>以用户为主的测试</strong></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container> 测试<ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container> 是用户在<strong>开发环境</strong>下进行的测试</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container> 是用户在<strong>实际使用环境</strong>下进行的测试</li></ul></li></ul></li><li><p><em><strong><u>回归测试 Regression Testing</u></strong></em></p><ul><li>验证对系统的变更<strong>有没有影响以前的功能</strong>，并且保证当前功能的变更是正确的</li><li><strong>发生在软件测试的任何阶段</strong>，包括单元测试、集成测试和系统测试，频繁重复性劳动</li><li>范围：<strong>有选择性地</strong>执行以前地测试用例</li></ul></li></ul><h3 id="2-按使用的测试技术划分"><a href="#2-按使用的测试技术划分" class="headerlink" title="2. 按使用的测试技术划分"></a>2. 按使用的测试技术划分</h3><ul><li><p>静态测试：走查/评审</p></li><li><p>动态测试：白盒/黑盒</p></li></ul><h3 id="3-按软件组装策略划分"><a href="#3-按软件组装策略划分" class="headerlink" title="3. 按软件组装策略划分"></a>3. 按软件组装策略划分</h3><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228165259847.png" alt="image-20211228165259847" style="zoom:67%;"><ul><li><p><em><strong><u>非增量测试：整体集成</u></strong></em></p><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228165336183.png" alt="image-20211228165336183" style="zoom: 80%;"></li></ul></li><li><p><em><strong><u>增量测试：自顶向下、自底向上、三明治（双向）</u></strong></em></p><ul><li><em><strong>自顶向下</strong></em><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228165920464.png" alt="image-20211228165920464" style="zoom:80%;"></li></ul></li><li><em><strong>自底向上</strong></em><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228170004185.png" alt="image-20211228170004185" style="zoom:80%;"></li></ul></li><li><em><strong>三明治</strong></em><ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228170022985.png" alt="image-20211228170022985"></li></ul></li></ul></li></ul><h2 id="四-黑盒测试"><a href="#四-黑盒测试" class="headerlink" title="四. 黑盒测试"></a>四. 黑盒测试</h2><h3 id="1-黑盒测试概述"><a href="#1-黑盒测试概述" class="headerlink" title="1. 黑盒测试概述"></a>1. 黑盒测试概述</h3><p><strong>不考虑程序的内部逻辑结构和特性，只依据程序的需求规格说明书</strong></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228173120360.png" alt="image-20211228173120360" style="zoom:80%;"><p><strong>测试用例所覆盖的规格说明范围越大，就越优良</strong></p><p><strong>设计良好的测试用例，使之尽可能完全覆盖软件的规格说明</strong></p><h3 id="2-等价类划分方法"><a href="#2-等价类划分方法" class="headerlink" title="2. 等价类划分方法"></a>2. 等价类划分方法</h3><p><em><strong>等价类：</strong></em>输入数据的某个子集，<strong>子集内数据等价</strong>，假定”测试某等价类的代表值就等于对这一类的其他值的测试“</p><p>在每一个等价类中选取少量有代表性的数据作为测试的输入条件，就可以用少量代表性的测试数据，并取得较好的测试结果</p><p><em><strong>等价类划分基本原则：</strong></em>每个可能输入只属于一个等价类；用等价类某成员作为输入存在问题，用其他成员作为输入也能检测到同样的问题</p><ul><li><strong>有效等价类：</strong>对于程序的规格说明来说是 <strong>合理的、有意义的</strong>输入数据构成的集合（如，年龄0-100）</li><li><strong>无效等价类：</strong>对于程序的规格说明来说是 <strong>不合理的或无意义的</strong>输入数据构成的集合（如，年龄-1、200）<ul><li>无效等价类至少一个，也可能多个</li><li>无效等价类的作用：可以用于程序对无理输入的应对</li></ul></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228174333826.png" alt="image-20211228174333826" style="zoom:80%;"><p><em><strong>确定等价类的六大原则：</strong></em></p><ul><li>输入条件规定了<strong>取值范围或值</strong>的个数的情况下，则可以确立1个有效等价类和2个无效等价类<ul><li><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228174445098.png" alt="image-20211228174445098" style="zoom:67%;"></li></ul></li><li>输入条件规定了<strong>输入值的集合</strong>或者规定了<strong>“必须如何”的条件</strong>的情况下，可确立1个有效等价类和1个无效等价类</li><li>输入条件是一个<strong>布尔量</strong>的情况下，可确定1个有效等价类和1个无效等价类</li><li>规定了输入数据的<strong>一组值（假定n个）</strong>、并且程序要对每一个输入值<strong>分别处理</strong>的情况下，可确立n个有效等价类和1个无效等价类</li><li>规定了输入数据必须遵守的规则的情况下，可确立1个有效等价类（符合规则）和n个无效等价类（从不同角度违反规则）</li><li>在确知已划分的等价类中各元素在程序<strong>处理中的方式不同</strong>的情况下，则应再将该等价类进一步的划分为更小的等价类</li></ul><p><em><strong>测试用例={测试数据+期望结果}</strong></em></p><p><em><strong>测试结果={测试数据+期望结果+实际结果}</strong></em></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228175027502.png" alt="image-20211228175027502"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228175158430.png" alt="image-20211228175158430"></p><h3 id="3-边界值方法"><a href="#3-边界值方法" class="headerlink" title="3. 边界值方法"></a>3. 边界值方法</h3><p>边界值分析是<strong>等价类测试的特例</strong>，主要是考虑<strong>等价类的边界条件</strong>，在等价类的<strong>“边缘”选择元素</strong>。</p><p>大量的错误是发生在<strong>输入或输出范围的边界上</strong>，而不是发生在输入输出范围的内部</p><p>选取<em><strong>正好等于、刚刚大于、刚刚小于边界的值</strong></em>作为测试数据，而非选取等价类中的典型值作为测试数据</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228180213875.png" alt="image-20211228180213875"></p><p><em><strong><u>边界值分析的原则</u></strong></em></p><ul><li>如果输入条件<strong>规定了值的范围</strong>，则应取刚达到这个范围的边界的值，以及刚刚超越这个范围边界的值作为测试输入数据（10公斤至50公斤，应取10、50、10.01、49.99、9.99及50.01等）<em><strong>边界及边界±r</strong></em></li><li>输入条件规定了值的个数，则用<strong>最大个数、最小个数</strong>、比最小个数少1,比最大个数多1的数据作为测试数据</li><li>将原则1和原则2应用于输出条件，即<strong>设计测试用例使输出值达到边界值及其左右的值</strong></li><li>程序的规格说明给出的<strong>输入域或输出域是有序集合</strong>，则应选取集合的<strong>第一个元素和最后一个元素</strong>作为测试用例</li><li>如果程序中使用了一个<strong>内部数据结构</strong>，则应当选择这个<strong>内部数据结构的边界</strong>上的值作为测试用例（如，a[0..n]，应该选取a[0]与a[n]作测试用例，栈选栈空、栈满作测试用例）</li><li>分析规格说明，找出其它可能的边界条件</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228181004230.png" alt="image-20211228181004230"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228180947276.png" alt="image-20211228180947276"></p><h2 id="五-白盒测试"><a href="#五-白盒测试" class="headerlink" title="五. 白盒测试"></a>五. 白盒测试</h2><h3 id="1-白盒测试概述"><a href="#1-白盒测试概述" class="headerlink" title="1. 白盒测试概述"></a>1. 白盒测试概述</h3><p><em><strong>又称结构测试或逻辑驱动测试</strong></em></p><p>白盒测试更加充分，主要是程序员在使用</p><p><strong>白盒测试的目的：发现代码中的错误</strong></p><p><em><strong>白盒测试中的输入数据从程序结构导出，期望输出从需求规格中导出</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183013943.png" alt="image-20211228183013943" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183029678.png" alt="image-20211228183029678" style="zoom:80%;"><h3 id="2-白盒测试的覆盖标准"><a href="#2-白盒测试的覆盖标准" class="headerlink" title="2. 白盒测试的覆盖标准"></a>2. 白盒测试的覆盖标准</h3><p>最彻底的白盒测试是覆盖程序中的每一条路径，但是由于程序中一般含有循环，所以路径的数目极大，要执行每一条路径是不可能的，<strong>只能希望覆盖代码的程度尽可能高些</strong>。</p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183257672.png" alt="image-20211228183257672" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183334520.png" alt="image-20211228183334520" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183358054.png" alt="image-20211228183358054" style="zoom:88%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228183410769.png" alt="image-20211228183410769"></p><p>若每个分支都有语句，那么语句覆盖=判定覆盖</p><p>条件覆盖不保证覆盖全部分支，即条件覆盖不包含判定覆盖，反之也是</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228184015675.png" alt="image-20211228184015675"></p><h3 id="3-基本路径法"><a href="#3-基本路径法" class="headerlink" title="3. 基本路径法"></a>3. 基本路径法</h3><p><em><strong>路径测试：</strong></em>设计足够多的测试用例，覆盖被测试对象中的<strong>所有可能路径</strong></p><p>测试中覆盖所有路径的组合是不现实的，把覆盖的路径数压缩到一定限度内，例如，程序中的循环体只执行一次</p><p><em><strong>基本路径测试：</strong></em> 在<strong>程序控制图</strong>的基础上，通过分析控制构造的环行复杂性，导出基本可执行路径集合，从而设计测试用例，使得每一个 <strong>基本独立路径</strong> 至少执行一次。步骤如下：</p><ul><li><strong>程序的控制流图</strong></li><li><strong>程序圈复杂度：</strong>确定程序中每个可执行语句至少执行一次所必须的<strong>测试用例数目的上界</strong><ul><li>流图中<strong>区域的数量</strong></li><li>给定流图G的圈复杂度V(G)，定义为<strong>V(G)=E-N+2，E是流图中的边数量，N是流图中节点数量</strong></li><li>给定流图G的圈复杂度V(G)，定义为<strong>V(G)=P+1，P是流图G中判定结点的数量</strong></li></ul></li><li><strong>导出测试用例</strong></li><li><strong>准备测试用例：</strong>确保基本路径集中的每一条路径的执行<ul><li>测试用例 = {测试数据+期望结果}</li><li>测试数据是由路径和程序推论出来的；<strong>预期结果是从函数说明中导出</strong>，不能根据程序结构中导出</li></ul></li></ul><p><em><strong>控制流图</strong></em></p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228185448686.png" alt="image-20211228185448686" style="zoom:80%;"><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228185524323.png" alt="image-20211228185524323" style="zoom:67%;"><ul><li>判断中的条件表达式是由一个或多个逻辑运算符 (OR, AND, NAND, NOR) 连接的<strong>复合条件表达式</strong>，则需要<strong>改为一系列只有单条件的嵌套的判断</strong></li></ul><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228185728362.png" alt="image-20211228185728362" style="zoom:80%;"><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211228185810590.png" alt="image-20211228185810590"></p><p><em><strong>独立路径（基本路径）：</strong></em>一条程序执行的路径，<strong>至少包含一条在定义该路径之前的其他基本路径中所不曾用过的边</strong>(即：至少引入程序的一个新处理语句集合或一个新条件)</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程与工具——软件工程核心思想</title>
      <link href="/2022/01/01/Software%20Process%20and%20Tools/02%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/"/>
      <url>/2022/01/01/Software%20Process%20and%20Tools/02%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程核心思想"><a href="#软件工程核心思想" class="headerlink" title="软件工程核心思想"></a>软件工程核心思想</h1><h2 id="一-软件工程的本质：不同抽象层次之间的映射与转换"><a href="#一-软件工程的本质：不同抽象层次之间的映射与转换" class="headerlink" title="一. 软件工程的本质：不同抽象层次之间的映射与转换"></a>一. 软件工程的本质：不同抽象层次之间的映射与转换</h2><h3 id="1-映射与转换"><a href="#1-映射与转换" class="headerlink" title="1. 映射与转换"></a>1. 映射与转换</h3><p><em><strong><u>任何软件系统开发的共同本质在于：从现实空间的需求到计算机空间的软件代码之间的映射与转换</u></strong></em></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219221556475.png" alt="image-20211219221556475"></p><h3 id="2-单步映射与多步映射"><a href="#2-单步映射与多步映射" class="headerlink" title="2. 单步映射与多步映射"></a>2. 单步映射与多步映射</h3><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219221748916.png" alt="image-20211219221748916"></p><p><em><strong>软件工程本质</strong></em>：用严格的规范和管理手段来<strong>缩小偏差</strong>，通过<strong>牺牲“时间”来提高“质量”</strong></p><h3 id="3-软件工程的两个映射"><a href="#3-软件工程的两个映射" class="headerlink" title="3. 软件工程的两个映射"></a>3. 软件工程的两个映射</h3><ul><li><strong>概念映射</strong>：问题空间的概念与解空间的模型化概念之间的映射（概念映射，类似于数据结构）<ul><li>e.g. 学生成绩 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> Struct StudentScore (StudentNo, CourseNo, Score)</li></ul></li><li><strong>业务逻辑映射</strong>：问题空间的处理逻辑与解空间处理逻辑之间的映射（处理逻辑映射，类似于算法）<ul><li>e.g. 计算某班学生的平均分数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> double calculateAverageScore(Struct [] scores) {检索+平均算法;}</li></ul></li></ul><h3 id="4-软件工程：不同层次之间的映射过程"><a href="#4-软件工程：不同层次之间的映射过程" class="headerlink" title="4. 软件工程：不同层次之间的映射过程"></a>4. 软件工程：不同层次之间的映射过程</h3><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211219223706048.png" alt="image-20211219223706048"></p><p>需求分析 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 系统设计<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 程序设计<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 部署与维护</p><h4 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h4><p><strong>现实空间的需求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container>  需求规约</strong></p><h4 id="4-2-软件设计"><a href="#4-2-软件设计" class="headerlink" title="4.2 软件设计"></a>4.2 软件设计</h4><p><strong>需求规约  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 设计规约·</strong></p><p>定义实现需求规约所需的系统内部结构与行为，包括软件体系结构、数据结构、详细的处理算法、用户界面等，即所谓设计规约(Design Specification)，给出实现软件需求的软件解决方案</p><h4 id="4-3-实现"><a href="#4-3-实现" class="headerlink" title="4.3 实现"></a>4.3 实现</h4><p><strong>设计规约<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 代码</strong></p><p>对设计规约中的每一个软件功能进行编码</p><h4 id="4-4-验证-确认"><a href="#4-4-验证-确认" class="headerlink" title="4.4 验证/确认"></a>4.4 验证/确认</h4><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="109.641ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 48461.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">现</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">实</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">空</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">间</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><text data-variant="normal" transform="translate(4750,0) scale(1,-1)" font-size="884px" font-family="serif">需</text><text data-variant="normal" transform="translate(5650,0) scale(1,-1)" font-size="884px" font-family="serif">求</text><path data-c="A0" d="" transform="translate(6550,0)"></path></g></g><g data-mml-node="mtd" transform="translate(6800,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g><g data-mml-node="mtd" transform="translate(10077.8,0)"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">现</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">实</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">空</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">间</text><text data-variant="normal" transform="translate(3850,0) scale(1,-1)" font-size="884px" font-family="serif">的</text><text data-variant="normal" transform="translate(4750,0) scale(1,-1)" font-size="884px" font-family="serif">需</text><text data-variant="normal" transform="translate(5650,0) scale(1,-1)" font-size="884px" font-family="serif">求</text><path data-c="A0" d="" transform="translate(6550,0)"></path></g><g data-mml-node="mtext" transform="translate(6800,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(7050,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">需</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">求</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">规</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">约</text><path data-c="A0" d="" transform="translate(3850,0)"></path></g></g><g data-mml-node="mtd" transform="translate(21227.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g><g data-mml-node="mtd" transform="translate(24505.6,0)"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">需</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">求</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">规</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">约</text><path data-c="A0" d="" transform="translate(3850,0)"></path></g><g data-mml-node="mtext" transform="translate(4100,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(4350,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">设</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">计</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">规</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">约</text><path data-c="A0" d="" transform="translate(3850,0)"></path></g></g><g data-mml-node="mtd" transform="translate(32955.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g><g data-mml-node="mtd" transform="translate(36233.3,0)"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">设</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">计</text><text data-variant="normal" transform="translate(2050,0) scale(1,-1)" font-size="884px" font-family="serif">规</text><text data-variant="normal" transform="translate(2950,0) scale(1,-1)" font-size="884px" font-family="serif">约</text><path data-c="A0" d="" transform="translate(3850,0)"></path></g><g data-mml-node="mtext" transform="translate(4100,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(4350,0)"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">代</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">码</text><path data-c="A0" d="" transform="translate(2050,0)"></path></g></g><g data-mml-node="mtd" transform="translate(42883.3,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g><g data-mml-node="mtd" transform="translate(46161.1,0)"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250,0) scale(1,-1)" font-size="884px" font-family="serif">代</text><text data-variant="normal" transform="translate(1150,0) scale(1,-1)" font-size="884px" font-family="serif">码</text><path data-c="A0" d="" transform="translate(2050,0)"></path></g></g></g></g></g></g></svg></mjx-container></p><p>评估性活动，确定一个阶段的产品是否达到前阶段确立的需求，或者确认开发的软件与需求是否一致 </p><h2 id="二-软件工程所关注的目标"><a href="#二-软件工程所关注的目标" class="headerlink" title="二. 软件工程所关注的目标"></a>二. 软件工程所关注的目标</h2><h3 id="1-软件工程所关注的对象"><a href="#1-软件工程所关注的对象" class="headerlink" title="1 软件工程所关注的对象"></a>1 软件工程所关注的对象</h3><p>软件工程具有“<strong>产品与过程二相性</strong>”的特点，必须把二者结合起来去考虑，而不能忽略其中任何一方</p><ul><li><p>产品：各个抽象层次的产出物</p></li><li><p>过程：在各个抽象层次之间进行映射与转换</p></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220121339295.png" alt="image-20211220121339295"></p><h3 id="2-软件工程所关注的目标"><a href="#2-软件工程所关注的目标" class="headerlink" title="2 软件工程所关注的目标"></a>2 软件工程所关注的目标</h3><ul><li><p>**功能性需求(Functional Requirements)**：软件所实现的功能达到它的设计规范和满足用户需求的程度</p><ul><li>完备性：支持用户所需的全部功能</li><li>正确性：按照正确需求正确执行任务的能力（软件在需求范围之内的行为）</li><li>健壮性：容错能力和恢复能力（软件在需求范围之内的行为）</li><li>可靠性：正确维持而不发生故障</li></ul></li><li><p>**非功能性需求(Non-Functional Requirements)**：系统能够完成所期望的工作的性能与质量</p><ul><li>效率</li><li>可用性：使用和学习的容易程度</li><li>可维护性</li><li>可移植性：运行于不同软硬件</li><li>清晰性：易读、易理解，可以提高团队开发效率，降低维护代价</li><li>安全性</li><li>兼容性：不同产品相互交换信息的能力</li><li>经济性：开发成本、时间和适应市场能力</li><li>商业质量</li></ul></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220124633605.png" alt="image-20211220124633605"></p><p>错误检测、错误恢复、错误预防</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220124815285.png" alt="image-20211220124815285"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220125046062.png" alt="image-20211220125046062"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220125100115.png" alt="image-20211220125100115"></p><h3 id="3-不同目标之间的关系——折中（tradeoff）"><a href="#3-不同目标之间的关系——折中（tradeoff）" class="headerlink" title="3. 不同目标之间的关系——折中（tradeoff）"></a>3. 不同目标之间的关系——折中（tradeoff）</h3><p>多个目标同时达到最优是不现实的，因为可能存在<strong>目标之间的相互冲突</strong></p><p>而不同类型的软件对质量目标的要求各有<strong>侧重</strong>，例如实时系统侧重于可靠性和效率，而生存周期长的软件侧重于可移植性和可维护性。</p><h2 id="三-软件开发中的多角色"><a href="#三-软件开发中的多角色" class="headerlink" title="三. 软件开发中的多角色"></a>三. 软件开发中的多角色</h2><p><strong>在软件开发过程中同样需要多种角色之间紧密协作，才能高质量、高效率的完成任务.</strong></p><ul><li><p>客户单位(Client，甲方)：</p><ul><li>决策者(CXO)、终端用户(End User)、系统管理员(Administrator)</li></ul></li><li><p>软件开发公司(Supplier，乙方)：</p><ul><li>决策者(CXO)，软件销售与市场人员，咨询师、需求分析师，软件架构师、软件设计师，开发人员：开发经理/项目经理、程序员，维护人员</li></ul></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220125921870.png" alt="image-20211220125921870"></p><h2 id="四-软件工程-最佳实践"><a href="#四-软件工程-最佳实践" class="headerlink" title="四. 软件工程=最佳实践"></a>四. 软件工程=最佳实践</h2><p>实践 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 错误<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 经验</p><p>软件理论无用</p><h2 id="五-软件工程的四个核心理论概念"><a href="#五-软件工程的四个核心理论概念" class="headerlink" title="五. 软件工程的四个核心理论概念"></a>五. 软件工程的四个核心理论概念</h2><h3 id="1-分而治之（Divide-and-Conquer）"><a href="#1-分而治之（Divide-and-Conquer）" class="headerlink" title="1. 分而治之（Divide and Conquer）"></a>1. 分而治之（Divide and Conquer）</h3><ul><li><p>将复杂问题分解为若干可独立解决的简单子问题，并分别独立求解，以降低复杂性</p></li><li><p>然后再将各子问题的解综合起来，形成最初复杂问题的解</p></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220130559818.png" alt="image-20211220130559818"></p><p><strong>核心问题：如何的分解策略可以使得软件更容易理解、开发和维护？</strong></p><h3 id="2-复用（Reuse）"><a href="#2-复用（Reuse）" class="headerlink" title="2. 复用（Reuse）"></a>2. 复用（Reuse）</h3><p>新系统，大部分内容成熟 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container> 复用<strong>框架、架构</strong>、同类经验的<strong>团队</strong>；直接使用已有的<strong>软构件</strong>；复用已有的<strong>功能模块</strong> </p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2022/image-20211220130921602.png" alt="image-20211220130921602"></p><h3 id="3-折中（Trade-off）"><a href="#3-折中（Trade-off）" class="headerlink" title="3. 折中（Trade-off）"></a>3. 折中（Trade-off）</h3><p>不同的需求之间往往存在矛盾与冲突，需要通过折中来作出的合理的取舍，找到使双方均满意的点</p><ul><li>例如：算法时间空间折中、低成本和可靠性折中、安全性和速度折中</li></ul><p><strong>核心问题：调和矛盾（需求之间、人与人之间、供需双方之间、…）</strong> </p><h3 id="4-演化（Evolution）"><a href="#4-演化（Evolution）" class="headerlink" title="4. 演化（Evolution）"></a>4. 演化（Evolution）</h3><p>软件系统在其生命周期中面临各种变化：新需求、故障/错误、性能缺陷</p><p>核心问题：在设计软件的初期，就要<strong>充分考虑到未来可能的变化</strong>，并采用恰当的设计决策，使软件具有适应变化的能力</p><p>即：可修改性、可维护性、可扩展性</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Process-and-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记六——ADT抽象数据类型</title>
      <link href="/2021/07/04/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E5%85%AD/"/>
      <url>/2021/07/04/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red"> <strong>抽象数据类型</strong> </font></p><p><font color="red"> <strong>表示泄露</strong> </font></p><p><font color="red"> <strong>AF</strong> </font></p><p><font color="red"> <strong>RI</strong> </font></p></blockquote><h1 id="Abstraction-and-User-Defined-Types-抽象和用户定义的类型"><a href="#Abstraction-and-User-Defined-Types-抽象和用户定义的类型" class="headerlink" title="Abstraction and User-Defined Types 抽象和用户定义的类型"></a>Abstraction and User-Defined Types 抽象和用户定义的类型</h1><p>抽象类型：强调“作用于数据上的操作”，程序员和client<strong>无需关心数据如何具体存储</strong>的，只需设计/使用<strong>操作</strong>即可。</p><p>ADT是由操作定义的，与其内部如何实现无关！</p><h1 id="2-Classifying-Types-and-Operations-分类类型和操作"><a href="#2-Classifying-Types-and-Operations-分类类型和操作" class="headerlink" title="2 Classifying Types and Operations 分类类型和操作"></a>2 Classifying Types and Operations 分类类型和操作</h1><p>可变类型的对象：提供了可改变其内部数据的值的操作。不变数据类型： 其操作不改变内部值，而是<strong>构造新的对象</strong></p><ul><li><font color="red"> Creator 构造器 </font> 可以将对象作为参数，但是不能把对象类型作为构造对象。(t* -&gt; T)</li><li><font color="red"> Producer 生产器 </font> 例如 String 的 contact 方法，将两个两个字符串连接为一个新的字符串。(T+, t* -&gt; T)</li><li><font color="red"> Observer 观察器 </font> 参看数据，例如 size() 方法。(T+, t* -&gt; t)</li><li><font color="red"> Mutator 变值器 </font> 改变对象属性的方法，例如 List 的 add() 方法。(T+, t* -&gt; void | t | T)</li></ul><p>其中T代表抽象类型，t代表其他类型。</p><h2 id="creator-构造器"><a href="#creator-构造器" class="headerlink" title="creator 构造器"></a>creator 构造器</h2><p>A creator is either implemented as a <strong>constructor</strong> , like new ArrayList(), or simply <strong>a static method</strong> instead, like Arrays.asList(), List.of(). 构造器：可能实现为构造函数或静态函数。</p><p>factory method 工厂方法：a creator implemented as a static method.</p><h2 id="mutator-变值器"><a href="#mutator-变值器" class="headerlink" title="mutator 变值器"></a>mutator 变值器</h2><p>变值器通常返回 void，变值器也可能返回非空类型。</p><h1 id="3-Abstract-Data-Type-Examples"><a href="#3-Abstract-Data-Type-Examples" class="headerlink" title="3 Abstract Data Type Examples"></a>3 Abstract Data Type Examples</h1><p><strong>只有 mutable 数据类型才有 mutator（这改变具体的对象）</strong></p><table><thead><tr><th>数据类型</th><th>Operations</th></tr></thead><tbody><tr><td>int(immutable)</td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144710.jpg" alt="int"></td></tr><tr><td>String(immutable)</td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144754.jpg" alt="String"></td></tr><tr><td>List(mutable)</td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144741.jpeg" alt="List"></td></tr></tbody></table><h1 id="4-Designing-an-Abstract-Type-设计抽象类型"><a href="#4-Designing-an-Abstract-Type-设计抽象类型" class="headerlink" title="4 Designing an Abstract Type 设计抽象类型"></a>4 Designing an Abstract Type 设计抽象类型</h1><p>设计好的ADT，靠“经验法则”，提供一组操作，设计其行为规约 spec.</p><ol><li>Rules of thumb 1 设计简洁、一致的操作</li><li>Rules of thumb 2 要足以支持client对数据所做的所有操作需要，且用操作满足client需要的难度要低</li></ol><h1 id="5-Representation-Independence-表示独立性"><a href="#5-Representation-Independence-表示独立性" class="headerlink" title="5  Representation Independence 表示独立性 "></a>5 <font color="red"> Representation Independence 表示独立性 </font></h1><p><strong>表示独立性</strong>：client使用ADT时无需考虑其内部如何实现，ADT内部表示的变化不应影响外部spec和客户端。</p><p>抽象类型的使用与其表示（用于实现它的实际数据结构或数据字段）无关，因此表示的更改不会影响抽象类型本身之外的代码。</p><p>除非ADT的操作指明了具体的pre-和post-condition，否则不能改变ADT的内部表示——spec规定了client和implementer之间的契约。</p><h1 id="6-Testing-an-Abstract-Data-Type"><a href="#6-Testing-an-Abstract-Data-Type" class="headerlink" title="6 Testing an Abstract Data Type"></a>6 Testing an Abstract Data Type</h1><ul><li>测试creators, producers, and mutators：调用observers来观察这些operations的结果是否满足spec；</li><li>测试observers：调用creators, producers, and mutators等方法产生或改变对象，来看结果是否正确。</li></ul><h1 id="7-Invariants-不变性"><a href="#7-Invariants-不变性" class="headerlink" title="7 Invariants 不变性"></a>7 Invariants 不变性</h1><p>不变量 Invariant：在任何时候总是true，immutability 就是一个典型的“不变量”（一旦被创建始终表示相同的值），不变量由ADT来负责。</p><p>Invariants：(1) <strong>private</strong>（限制只能在<strong>类中</strong>访问的 fields 和方法）; (2) immutable type; (3) 对于 mutable 外部引用可以直接改变属性的值，所以考虑 copy; (4) final（保证在构造对象后不会重新分配此不可变类型的字段）。当代价很高时，将不变性交给用户（写到规约），但由此引发的bug会很多。</p><p>representation exposure 表示泄露：类以外的代码也能直接地修改表示。不仅影响不变性，也影响了表示独立性：无法在不影响客户端的情况下改变其内部表示。</p><p>除非迫不得已，否则不要把希望寄托于客户端上，ADT有责任保证自己的invariants，并避免“表示泄露”。最好的办法就是使用 immutable 的类型，彻底避免表示泄露（例如用 java.time.ZonedDateTime 而不是 mutable java.util.Date）</p><ul><li>Don’t incorporate mutable parameters into object; make defensive copies</li><li>Return defensive copies of mutable fields…</li><li>Or return unmodifiable view of mutable fields</li><li>Real lesson – use immutable components, to eliminate the need for defensive copying</li></ul><h1 id="8-Rep-Invariant-and-Abstraction-Function-RI-AF"><a href="#8-Rep-Invariant-and-Abstraction-Function-RI-AF" class="headerlink" title="8  Rep Invariant and Abstraction Function (RI AF) "></a>8 <font color="red"> Rep Invariant and Abstraction Function (RI AF) </font></h1>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记五——设计规约</title>
      <link href="/2021/07/04/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
      <url>/2021/07/04/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red"> <strong>规约的强度及其比较</strong> </font></p><p><font color="red"> <strong>如何写出好的规约</strong> </font></p></blockquote><h1 id="Functions-amp-methods-in-programming-languages"><a href="#Functions-amp-methods-in-programming-languages" class="headerlink" title="Functions &amp; methods in programming languages"></a>Functions &amp; methods in programming languages</h1><p>返回值类型是否匹配、参数类型是否匹配，在静态类型检查阶段完成</p><p>使用“方法”的客户端，无需了解方法内部（方法体信息隐藏）具体如何工作—“抽象”。</p><h1 id="2-Specification-Programming-for-communication"><a href="#2-Specification-Programming-for-communication" class="headerlink" title="2 Specification: Programming for communication"></a>2 Specification: Programming for communication</h1><p>API：应用程序编程接口</p><h2 id="Documenting-in-programming"><a href="#Documenting-in-programming" class="headerlink" title="Documenting in programming"></a>Documenting in programming</h2><p>“假设”写什么？变量的数据类型定义、final关键字定义了设计决策-“不可改变”、方法假设策略</p><p>为什么写？：自己记不住、别人不懂</p><p>编程时注意两点目标：代码中蕴含的“设计决策”–给编译器读；注释形式的“设计决策”–给自己和别人读。就是依据假设来进行编程，编程过程需要考虑编译器和读者两部分人。</p><h2 id="Specification-and-Contract-of-a-method"><a href="#Specification-and-Contract-of-a-method" class="headerlink" title="Specification and Contract (of a method)"></a>Specification and Contract (of a method)</h2><p>Spec给“供需双方”都确定了责任，在调用的时候双方都要遵守：输入输出的数据类型、功能和正确性、性能（只讲能做什么，不讲怎么实现）</p><h2 id="Behavioral-equivalence-行为等价性"><a href="#Behavioral-equivalence-行为等价性" class="headerlink" title=" Behavioral equivalence 行为等价性 "></a><font color="red"> Behavioral equivalence 行为等价性 </font></h2><p>怎么判断是否行为等价性：是否可以用一种实现替代另一种实现（站在客户端视角，前置条件和后置条件）</p><p>根据规约判断行为等价性</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144614.jpg" alt="BehaviorEquivalence"></p><h2 id="Specification-structure-pre-condition-and-post-condition"><a href="#Specification-structure-pre-condition-and-post-condition" class="headerlink" title="Specification structure: pre-condition and post-condition"></a>Specification structure: pre-condition and post-condition</h2><p>方法规约包含几个条文：</p><ol><li>Precondition 前置条件：对<strong>客户</strong>端的约束，在使用方法时必须满足的条件（参数），indicated by the keyword <code>requires</code></li><li>Postcondition 后置条件：对<strong>开发者</strong>的约束，方法结束时必须满足的条件（返回值），indicated by the keyword <code>effects</code></li><li>Exceptional behavior 异常行为：如果违反先决条件它会做什么。契约–如果前置条件满足了，后置条件必须满足（可以通过抛出异常、修改或不修改对象等来遵循后置条件）；如果前置条件不满足，则方法可以做任何事。</li></ol><p>Java 的静态类型声明是一种规约，可据此进行静态类型检查static checking。方法前的注释也是一种规约，但需人工判定其是否满足。前置条件前置条件写进参数 <code>@param</code>，后置条件结果<code>@return, @throws</code></p><p>方法的规约不应该谈论方法的局部变量或方法类的私有字段。</p><p>除非在后置条件里声明过，否则方法内部<strong>不应该改变输入参数</strong>，应尽量不改变输入参数，尽量不设计mutating的spec，<strong>应该尽量避免使用mutable的对象</strong>，否则就容易引发bugs、降低可变性、复杂化规约。（多个引用指向同一个对象，任意一个引用修改其他的也会引起变化）。</p><h2 id="Testing-and-verifying-specifications"><a href="#Testing-and-verifying-specifications" class="headerlink" title="Testing and verifying specifications"></a>Testing and verifying specifications</h2><p>依据规约进行黑盒测试（不依赖具体实现，但测试必须遵守契约）。</p><h1 id="Designing-specifications"><a href="#Designing-specifications" class="headerlink" title=" Designing specifications "></a><font color="red"> Designing specifications </font></h1><h2 id="Classifying-specifications"><a href="#Classifying-specifications" class="headerlink" title="Classifying specifications"></a>Classifying specifications</h2><p>规约的确定性（输出）、规约的陈述性（输出什么或怎么得到输出）、规约的强度（合法实现的多少）</p><p><font color="red"> <strong>规约强度越高 (Stronger)，则可以用规约强度高的来代替强度弱的，那么如何比较强度？</strong> </font></p><p>更放松的前置条件+更严格的后置条件</p><p>越强的规约，意味着implementor的自由度和责任越重，而client的责任越轻（输入内容约束更少）。</p><p><em>下面是两个可以比较、不能比较规约强弱的实例</em></p><table><thead><tr><th>无法比较</th><th>后者更强</th></tr></thead><tbody><tr><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144631.jpeg"></td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144637.jpg" alt="StrongerVSWeakerSpecs2"></td></tr></tbody></table><h2 id="Diagramming-specifications-制图规约"><a href="#Diagramming-specifications-制图规约" class="headerlink" title="Diagramming specifications 制图规约"></a>Diagramming specifications 制图规约</h2><p>某个具体实现，若满足规约，则落在其范围内；否则，在其之外。程序员可以在规约的范围内自由选择实现方式，客户端无需了解具体实现。<strong>更强的规约，表达为更小的区域</strong></p><ul><li>更强的后置条件意味着实现的自由度更低了-&gt;在图中的面积更小</li><li>更弱的前置条件意味着实现时要处理更多的可能输入，实现的自由度低了-&gt;面积更小</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144645.jpg" alt="DiagrammingSpecifications"></p><h2 id="Designing-good-specifications"><a href="#Designing-good-specifications" class="headerlink" title="Designing good specifications"></a>Designing good specifications</h2><ol><li><strong>内聚coherent</strong>：Spec描述的功能应单一、简单、易理解</li><li><strong>strong enough</strong>：太弱的spec，client不放心、不敢用 (因为没有给出足够的承诺)。开发者应尽可能考虑各种特殊情况，在post-condition给出处理措施。</li><li><strong>weak enough</strong>：太强的spec，在很多特殊情况下难以达到，给开发者增加了实现的难度。</li><li><strong>use abstract types</strong>：在规约里使用<strong>抽象类型</strong>，可以给方法的实现体与客户端更大的自由度。在Java中这意味着使用接口类型，像 Map、Reader 而不是具体实现类型像 HashMap、FileReader。</li><li><strong>Precondition or postcondition</strong>：是否使用前置条件取决于(1) check的代价；(2) 方法的使用范围。如果只在类的内部使用该方法(private)，那么可以不使用前置条件，在使用该方法的各个位置进行check——责任交给内部client；如果在其他地方使用该方法(public)，那么必须要使用前置条件，若client端不满足则方法抛出异常。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记四——数据类型与类型检验</title>
      <link href="/2021/07/03/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
      <url>/2021/07/03/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red"> <strong>数据数据类型及定义，检测方式</strong> </font></p><p><font color="red"> <strong>Mutable, Immutable</strong> </font></p><p><font color="red"> <strong>snapshot图解析数据类型</strong> </font></p></blockquote><h1 id="1-Data-type-in-programming-languages-数据类型"><a href="#1-Data-type-in-programming-languages-数据类型" class="headerlink" title="1 Data type in programming languages 数据类型"></a>1 Data type in programming languages 数据类型</h1><p>A type is a <strong>set of values</strong>, along with <strong>operations</strong> that can be performed on those values. 数据类型 = <strong>一组</strong>值 + 可执行操作</p><ul><li>primitive types 基本数据类型：int, long, boolean, double, char</li><li>object types 对象数据类型：String, BigInteger</li><li>Java 约定：基本数据类型是小写字母开头，对象数据类型是大写字母开头</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144329.jpg" alt="PrimitiveObject"></p><p>对象类型层次结构：root is Object, all non-primitives are objects 继承关系</p><h1 id="2-Static-vs-dynamic-data-type-checking"><a href="#2-Static-vs-dynamic-data-type-checking" class="headerlink" title="2 Static vs. dynamic data type checking"></a>2 Static vs. dynamic data type checking</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型转换向下兼容</span></span><br><span class="line"><span class="keyword">double</span> a = <span class="number">2</span>; <span class="comment">// a = 2.0(Implicit)</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">18.7</span>; <span class="comment">// ERROR</span></span><br></pre></td></tr></tbody></table></figure><p>Java 是静态类型语言</p><p>变量的类型在编译时（在程序运行之前）已知，因此编译器也可以推断出所有表达式的类型（编译阶段进行类型检查）。</p><p>动态类型语言像 Python，这种检测将推迟到程序运行阶段。</p><h2 id="Static-Checking-and-Dynamic-Checking"><a href="#Static-Checking-and-Dynamic-Checking" class="headerlink" title="Static Checking and Dynamic Checking"></a>Static Checking and Dynamic Checking</h2><ul><li><strong>静态类型检查</strong>：在程序运行前自动发现错误。往往是关于类型的检测，不考虑值。</li><li><strong>动态类型检查</strong>：必须运行程序，通过某种约束条件，对变量的值检测。往往是关于值的检测。</li><li><strong>无检查</strong> </li><li><strong>动态类型检查 &gt;&gt; 静态 &gt;&gt; 无检查</strong>，静态检测能检测就没必要用动态。</li></ul><p>静态类型检查：可在<strong>编译阶段（编译器的工作）</strong>发现错误，避免了将错误带入到运行阶段，可提高程序正确性/健壮性。静态类型可以防止一大类错误，例如应用于<strong>错误类型的参数</strong>所导致的错误， “5” * “6” 字符串类型乘法这个错误在编程时被捕获。</p><h3 id="静态类型检测能检测什么？"><a href="#静态类型检测能检测什么？" class="headerlink" title="静态类型检测能检测什么？"></a>静态类型检测能检测什么？</h3><p><strong>考虑编程过程会报哪些错误</strong></p><ul><li>Syntax errors 语法错误</li><li>Wrong names 类名/函数名错误</li><li>Wrong number of arguments 参数数目错误</li><li>Wrong argument types 参数类型错误：例如Type mismatch: cannot convert from int to boolean</li><li>Wrong return types 返回值类型错误</li><li>final变量，不被编译器相信只赋值了一次</li></ul><h3 id="动态类型检测能检测什么？"><a href="#动态类型检测能检测什么？" class="headerlink" title="动态类型检测能检测什么？"></a>动态类型检测能检测什么？</h3><ul><li>Illegal argument values 非法的参数值：例如divide-by-zero</li><li>Unrepresentable return values 非法的返回值，即特定的返回值不能用类型表示</li><li>Out-of-range indexes 越界</li><li>Calling a method on a null object reference. 空指针</li></ul><h1 id="3-Mutability-and-Immutability"><a href="#3-Mutability-and-Immutability" class="headerlink" title=" 3 Mutability and Immutability  "></a><font color="red"> 3 Mutability and Immutability  </font></h1><p>这是一个对”类“的概念，基本数据类型无效</p><ul><li>改变一个变量：将该变量指向另一个值的<strong>存储空间</strong>。</li><li>改变一个变量的值：将该变量当前指向的值的存储空间中写入一个新的<strong>值</strong>。</li></ul><p>Immutable types: 一旦被创建，其<strong>值</strong>不能改变。</p><p>Java中基本数据类型一定是Immutable的。如果是引用类型，也可以是不变的：一旦确定其指向的对象，不能再被改变。</p><p><strong>final</strong>保证了引用不变性，<strong>immutable</strong>是限制存储空间内容的不变性。</p><p>如果 Java 编译器不相信 final 变量在运行时只会被赋值一次，那么它就会产生一个<strong>编译器</strong>错误。 所以 final 提供了对不可变引用的静态检查。</p><p>尽可能多的用 final 来声明方法输入参数和作为局部变量</p><ul><li>A final <strong>class</strong> declaration cannot be inherited. final class 不能被继承/无法派生</li><li>A final <strong>variable</strong> always contains the same value/reference but cannot be changed. final变量无法改变值/引用</li><li>A final method cannot be overridden by subclasses. final方法无法被子类重写，只能继承</li></ul><p>String 类型是 immutable 类型，StringBuilder 是 mutable 类型</p><table><thead><tr><th>String</th><th>StringBuilder</th></tr></thead><tbody><tr><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144347.jpg" alt="String"></td><td><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144357.jpg" alt="StringBuilder"></td></tr><tr><td>String s = “a”;</td><td>StringBuilder sb = new StringBuilder(“a”);</td></tr><tr><td>s = s.contact(“b”);</td><td>sb.append(“b”);</td></tr></tbody></table><p>当只有一个引用指向该值其实没什么区别，但是多个引用时就体现了区别。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144418.jpg" alt="MulitReferences"></p><p>Immutable 类型，频繁修改会产生大量的临时拷贝(需要垃圾回收)。</p><p>Mutable 类型最少化拷贝以<strong>提高效率性能</strong>。</p><p>Immutable 类型更“<strong>安全</strong>”。</p><p>避免由mutable类型带来的错误：</p><ol><li>defensive copy：防御式拷贝，给客户端返回一个全新对象，可能造成大量的内存浪费</li><li>使用不可变类型，则节省了频繁复制的代价</li></ol><p>安全的使用可变类型：局部变量，不会涉及共享；只有一个引用</p><p>对同一个可变对象如果有多个引用（别名），就非常不安全</p><h1 id="4-Snapshot-diagram-as-a-code-level-run-time-and-moment-view"><a href="#4-Snapshot-diagram-as-a-code-level-run-time-and-moment-view" class="headerlink" title=" 4 Snapshot diagram as a code-level, run-time, and moment view "></a><font color="red"> 4 Snapshot diagram as a code-level, run-time, and moment view </font></h1><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144443.jpg" alt="SnapshotRule1"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144449.jpg" alt="SnapshotRule2"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144455.jpg" alt="SnapshotRule3"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144505.jpg" alt="SnapshotRule4"></p><p>An immutable/unreassignable reference to a mutable value：引用是不可变的，但指向的值却可以是可变的，例如：final StringBuilder sb</p><p>A mutable/reassignable reference to an immutable value：可变的引用，也可指向不可变的值，例如：String s</p><h1 id="5-Complex-data-types-Arrays-and-Collections"><a href="#5-Complex-data-types-Arrays-and-Collections" class="headerlink" title="5 Complex data types: Arrays and Collections"></a>5 Complex data types: Arrays and Collections</h1><p>List, Set, Map 都是接口</p><p>Iterator as a <strong>mutable</strong> type 迭代器：next()，hasNext()</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144432.jpg" alt="Iterator"></p><p>List和迭代器都属于mutable，上图中用迭代器来循环删除某个对象，后面的对象会向前对齐。</p><p><a href="https://fhdfhd.cn/software-construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%80%BB%E7%BB%93/">关于迭代和循环</a></p><h1 id="6-Useful-immutable-types"><a href="#6-Useful-immutable-types" class="headerlink" title="6 Useful immutable types"></a>6 Useful immutable types</h1><ul><li>基本类型及其封装对象类型都是不可变的</li><li>Don’t use mutable Date, </li><li>Collections types – List, Set, Map are all mutable.</li><li>包装器来获得 unmodifiable 不可变 collections：例如，<code>List S = Collections.unmodifiableList(t);</code>。这种不可变是在运行阶段获得的，编译阶段无法静态检查，并且只是增加了一个新的相同引用，对<code>t</code>修改也会报错。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet</title>
      <link href="/2021/06/29/Software%20Construction/HashSet/"/>
      <url>/2021/06/29/Software%20Construction/HashSet/</url>
      
        <content type="html"><![CDATA[<h1 id="HashSet添加元素时如何保证不重复"><a href="#HashSet添加元素时如何保证不重复" class="headerlink" title="HashSet添加元素时如何保证不重复"></a>HashSet添加元素时如何保证不重复</h1><p>调用 <code>add（Object</code> 方法时，首先会调用 Object 的 <code>hashCode</code> 方法判 hashCode 是否已经存在 HashCode 相同的元素，如不存在则直接插入元素；如果已存在，则调用 Object 对象的 equals 方法判断是否返回true， 如果为 true 则说明元素已经存在，如为false则插入元素。</p><p><strong>可以认为HashMap的key是不能重复的，而这里HashSet的元素是作为了map的key，所以也不能重复。</strong></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104050.png" alt="image-20210718104050829"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210914180928.png" alt="image-20210914180921174"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java静态实例方法</title>
      <link href="/2021/06/29/Software%20Construction/Java%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2021/06/29/Software%20Construction/Java%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h1><p>类可以有两种类型的方法：<strong>实例方法（非静态方法）和类（静态方法）方法</strong>。实例方法用于实现类的实例的行为，只能在类的实例的上下文中调用。类方法用于实现类本身的行为，类方法总是在类的上下文中执行，但也能在类的实例的上下文中调用。</p><p>用静态修饰符(static)定义类方法，若缺少则为实例方法。</p><h1 id="静态方法和实例方法的调用"><a href="#静态方法和实例方法的调用" class="headerlink" title="静态方法和实例方法的调用"></a>静态方法和实例方法的调用</h1><ol><li>外部调用静态方法时：<em>类名.方法名/对象名.方法名</em>；调用实例方法：<em>对象名.方法名</em>，即<strong>调用静态方法不需要创建对象</strong>。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticMethod</span> </span>{</span><br><span class="line">    <span class="comment">// a static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callStatic</span><span class="params">()</span> </span>{</span><br><span class="line">   　　 System.out.println(<span class="string">"static method."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">invokeStaticMethod</span> </span>{</span><br><span class="line">   　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{</span><br><span class="line">      　　staticMethod.callStatic(); <span class="comment">// no object</span></span><br><span class="line">      　　staticMethod s = <span class="keyword">new</span> staticMethod();  <span class="comment">// create an object</span></span><br><span class="line">      　　s.callStatic(); <span class="comment">// call the static method through the object</span></span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制,可以直接访问所属类的静态变量、静态方法、实例变量和实例方法。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记九——面向复用的软件构造技术</title>
      <link href="/2021/06/29/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/"/>
      <url>/2021/06/29/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="Software-Reuse"><a href="#Software-Reuse" class="headerlink" title="Software Reuse"></a>Software Reuse</h1><p>优点：降低成本和开发时间；经过充分测试，可靠、稳定；标准化，在不同应用中保持一致。</p><p>缺点：开发可复用的软件（性能差，缺少针对性）和使用已有软件进行开发（需要适配）都需要代价。</p><p><strong>measure “reusability”</strong>：复用的机会有多频繁；复用的代价有多大（搜索、获取，适配、扩展，实例化，与软件其他部分的互连的难度）</p><p>最主要的复用是在代码层面，但软件构造过程中的任何实体都可能被复用（包括需求、规约spec、数据、测试用例、文档等）</p><ul><li><p>Source code level: methods, statements, etc (lowest level)</p></li><li><p>Module level: class and interface</p></li><li><p>Library level: API (Java Library, .jar)</p></li><li><p>Architecture level: framework 框架</p></li><li><p>白盒复用：源代码可见，可修改和扩展（继承）。复制已有代码到正在开发的系统，进行修改；Pro：可定制化程度高；Con：对其修改增加了软件的复杂度，且需要对其内部充分的了解。</p></li><li><p>黑盒复用：源代码不可见，不能修改（委托）。 只能通过API接口来使用，无法修改代码；Pro：简单清晰；Con：适应性差。</p></li></ul><p>框架：一组具体类、抽象类、及其之间的连接关系。开发者根据framework的规约，填充自己的代码进去，形成完整系统。</p><p>Whitebox frameworks 白盒框架，通过代码层面的继承和动态绑定进行框架扩展。</p><p>Blackbox frameworks 黑盒框架，通过实现特定接口/delegation进行框架扩展。</p><h1 id="Designing-reusable-classes"><a href="#Designing-reusable-classes" class="headerlink" title=" Designing reusable classes "></a><font color="red"> Designing reusable classes </font></h1><blockquote><p><font color="red"> <strong>Behavioral subtyping 行为子类型与 Liskov 可替换原则 (LSP)</strong> </font></p><p><font color="red"> <strong>委托与组合</strong> </font></p></blockquote><h2 id="Behavioral-subtyping-and-Liskov-Substitution-Principle-LSP"><a href="#Behavioral-subtyping-and-Liskov-Substitution-Principle-LSP" class="headerlink" title="Behavioral subtyping and Liskov Substitution Principle (LSP)"></a>Behavioral subtyping and Liskov Substitution Principle (LSP)</h2><h3 id="行为子类型"><a href="#行为子类型" class="headerlink" title="行为子类型"></a>行为子类型</h3><p><strong>Compiler-enforced rules in Java (static type checking)</strong></p><ul><li>子类型可以增加方法，但不可删</li><li>子类型需要实现抽象类型中的所有未实现方法</li><li>子类型中重写的方法必须有相同或子类型的返回值或者符合co-variance（协方差）的参数</li><li>子类型中重写的方法必须使用同样类型的参数或者符合contra-variance（反方差）的参数</li><li>子类型中重写的方法不能抛出额外的异常</li></ul><p>指定行为（方法）</p><ul><li>更强的不变量</li><li>更弱的前置条件</li><li>更强的后置条件</li></ul><h3 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h3><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144822.jpg" alt="LSP"></p><p>Covariance 协变：父类型-&gt;子类型：越来越具体specific或者不变（返回值类型、异常的类型）。<code>@override</code> </p><p>Contravariance 反协变、逆变：父类型-&gt;子类型：越来越抽象或者不变（参数类型）。目前Java中遇到这种情况，当作<strong>overload</strong>看待。</p><p>Arrays are covariant 协变的：an array of type T[] may contain elements of type T or any subtype of T</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP FinalHomeWork</title>
      <link href="/2021/06/24/CSAPP/CSAPP-FinalHomeWork/"/>
      <url>/2021/06/24/CSAPP/CSAPP-FinalHomeWork/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105653.jpg" alt="image002"></p><h1 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a><strong>计算机系统</strong></h1><h2 id="大作业"><a href="#大作业" class="headerlink" title="大作业"></a><strong>大作业</strong></h2><table><thead><tr><th>题 目</th><th>程序人生-Hello's P2P</th></tr></thead><tbody><tr><td>专 业</td><td>计算机</td></tr><tr><td>学 号</td><td>1190202105</td></tr><tr><td>班 级</td><td>1903002</td></tr><tr><td>学 生</td><td>傅浩东</td></tr><tr><td>指导教师</td><td>郑贵滨</td></tr></tbody></table><h2 id="计算机科学与技术学院"><a href="#计算机科学与技术学院" class="headerlink" title="计算机科学与技术学院"></a><strong>计算机科学与技术学院</strong></h2><p><strong>2021年6月</strong></p><p><strong>摘 要</strong></p><p>摘要是论文内容的高度概括，应具有独立性和自含性，即不阅读论文的全文，就能获得必要的信息。摘要应包括本论文的目的、主要内容、方法、成果及其理论与实际意义。摘要中不宜使用公式、结构式、图表和非公知公用的符号与术语，不标注引用文献编号，同时避免将摘要写成目录式的内容介绍。</p><p><strong>关键词：</strong> hello；程序的一生；预处理；编译；汇编；链接；进程管理；存储管理；I/O管理</p><p>本文在Ubuntu系统下，通过介绍hello程序从编写到最终运行结束的过程来深入了解计算机系统，利用 linux 中的工具进行查看和解析，理解计算机内部机制，加深对计算机系统的理解。hello的一生主要经过预处理，编译，汇编，链接，再结合进程管理，存储管理，I/O管理完成程序的一生。</p><p><strong>目 录</strong></p><p><strong><a href="#_Toc75464192">第 1 章 概述 - 4 -</a></strong></p><p><a href="#_Toc75464193">1.1 Hello简介 - 4 -</a></p><p><a href="#_Toc75464194">1.2 环境与工具 - 4 -</a></p><p><a href="#_Toc75464195">1.3 中间结果 - 4 -</a></p><p><a href="#_Toc75464196">1.4 本章小结 - 5 -</a></p><p><strong><a href="#_Toc75464197">第 2 章 预处理 - 6 -</a></strong></p><p><a href="#_Toc75464198">2.1 预处理的概念与作用 - 6 -</a></p><p><a href="#_Toc75464199">2.2在Ubuntu下预处理的命令 - 6 -</a></p><p><a href="#_Toc75464200">2.3 Hello的预处理结果解析 - 7 -</a></p><p><a href="#_Toc75464201">2.4 本章小结 - 8 -</a></p><p><strong><a href="#_Toc75464202">第 3 章 编译 - 9 -</a></strong></p><p><a href="#_Toc75464203">3.1 编译的概念与作用 - 9 -</a></p><p><a href="#_Toc75464204">3.2 在Ubuntu下编译的命令 - 9 -</a></p><p><a href="#_Toc75464205">3.3 Hello的编译结果解析 - 10 -</a></p><p><em><a href="#_Toc75464206">3.3.1 数据 - 10 -</a></em></p><p><em><a href="#_Toc75464207">3.3.2 赋值 =，逗号操作符，赋初值/不赋初值 - 11 -</a></em></p><p><em><a href="#_Toc75464208">3.3.3 类型转换（隐式或显式） - 11 -</a></em></p><p><em><a href="#_Toc75464209">3.3.4 算术操作 - 11 -</a></em></p><p><em><a href="#_Toc75464210">3.3.5 关系操作 - 11 -</a></em></p><p><em><a href="#_Toc75464211">3.3.6 数组/指针/结构操作- 12 -</a></em></p><p><em><a href="#_Toc75464212">3.3.7 控制转移 - 12 -</a></em></p><p><em><a href="#_Toc75464213">3.3.8 函数操作 - 12 -</a></em></p><p><a href="#_Toc75464214">3.4 本章小结 - 14 -</a></p><p><strong><a href="#_Toc75464215">第 4 章 汇编 - 15 -</a></strong></p><p><a href="#_Toc75464216">4.1 汇编的概念与作用 - 15 -</a></p><p><a href="#_Toc75464217">4.2 在Ubuntu下汇编的命令 - 15 -</a></p><p><a href="#_Toc75464218">4.3 可重定位目标elf格式 - 15 -</a></p><p><a href="#_Toc75464219">4.4 Hello.o的结果解析 - 18 -</a></p><p><a href="#_Toc75464220">4.5 本章小结 - 19 -</a></p><p><strong><a href="#_Toc75464221">第 5 章 链接 - 20 -</a></strong></p><p><a href="#_Toc75464222">5.1 链接的概念与作用 - 20 -</a></p><p><a href="#_Toc75464223">5.2 在Ubuntu下链接的命令 - 20 -</a></p><p><a href="#_Toc75464224">5.3 可执行目标文件hello的格式 - 20 -</a></p><p><a href="#_Toc75464225">5.4 hello的虚拟地址空间 - 23 -</a></p><p><a href="#_Toc75464226">5.5 链接的重定位过程分析 - 24 -</a></p><p><a href="#_Toc75464227">5.6 hello的执行流程 - 25 -</a></p><p><a href="#_Toc75464228">5.7 Hello的动态链接分析 - 26 -</a></p><p><a href="#_Toc75464229">5.8 本章小结 - 27 -</a></p><p><strong><a href="#_Toc75464230">第 6 章 hello进程管理 - 28 -</a></strong></p><p><a href="#_Toc75464231">6.1 进程的概念与作用 - 28 -</a></p><p><a href="#_Toc75464232">6.2 简述壳Shell-bash的作用与处理流程 - 28 -</a></p><p><a href="#_Toc75464233">6.3 Hello的fork进程创建过程 - 29 -</a></p><p><a href="#_Toc75464234">6.4 Hello的execve过程 - 29 -</a></p><p><a href="#_Toc75464235">6.5 Hello的进程执行 - 30 -</a></p><p><a href="#_Toc75464236">6.6 hello的异常与信号处理 - 32 -</a></p><p><a href="#_Toc75464237">6.7本章小结 - 35 -</a></p><p><strong><a href="#_Toc75464238">第 7 章 hello的存储管理 - 36 -</a></strong></p><p><a href="#_Toc75464239">7.1 hello的存储器地址空间 - 36 -</a></p><p><a href="#_Toc75464240">7.2 Intel逻辑地址到线性地址的变换-段式管理 - 36 -</a></p><p><a href="#_Toc75464241">7.3 Hello的线性地址到物理地址的变换-页式管理 - 36 -</a></p><p><a href="#_Toc75464242">7.4 TLB与四级页表支持下的VA到PA的变换 - 37 -</a></p><p><a href="#_Toc75464243">7.5 三级Cache支持下的物理内存访问 - 37 -</a></p><p><a href="#_Toc75464244">7.6 hello进程fork时的内存映射 - 38 -</a></p><p><a href="#_Toc75464245">7.7 hello进程execve时的内存映射 - 38 -</a></p><p><a href="#_Toc75464246">7.8 缺页故障与缺页中断处理 - 39 -</a></p><p><a href="#_Toc75464247">7.9动态存储分配管理 - 40 -</a></p><p><a href="#_Toc75464248">7.10本章小结 - 41 -</a></p><p><strong><a href="#_Toc75464249">第 8 章 hello的IO管理 - 42 -</a></strong></p><p><a href="#_Toc75464250">8.1 Linux的IO设备管理方法 - 42 -</a></p><p><a href="#_Toc75464251">8.2 简述Unix IO接口及其函数 - 42 -</a></p><p><a href="#_Toc75464252">8.3 printf的实现分析 - 43 -</a></p><p><a href="#_Toc75464253">8.4 getchar的实现分析 - 44 -</a></p><p><a href="#_Toc75464254">8.5本章小结 - 44 -</a></p><p><strong><a href="#_Toc75464255">结论 - 45 -</a></strong></p><p><strong><a href="#_Toc75464256">附件 - 46 -</a></strong></p><p><strong><a href="#_Toc75464257">参考文献 - 47 -</a></strong></p><h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h1><h2 id="1-1-Hello简介"><a href="#1-1-Hello简介" class="headerlink" title="1.1 Hello简介"></a>1.1 Hello简介</h2><p>P2P(Program to Process)：首先是编写高级语言程序文件hello.c，文本文件在Linux系统下经过预处理器cpp，编译器ccl，汇编器as，链接器ld的处理转最终形成一个可执行二进制目标文件hello。shell 通过fork子进程，分配内存资源，然后通过exevce函数去加载运行这个进程。</p><p>O2O(0 to 0)：执行该目标文件，首先shell中使用execve加载并执行该程序时，操作系统为程序分配一部分虚拟空间，将程序加载到虚拟空间所映射的物理内存空间中。然后执行目标程序。在程序运行结束后，shell回收创建的进程，释放进程的虚拟空间、删除相关数据结构。</p><h2 id="1-2-环境与工具"><a href="#1-2-环境与工具" class="headerlink" title="1.2 环境与工具"></a>1.2 环境与工具</h2><p>硬件环境：处理器Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz；16GB RAM；1 TB SSD</p><p>软件环境：Windows 10 21H1；VirtualBox；Ubuntu 20.04 LTS</p><p>开发工具：EDB；GDB；CodeBlocks；vi/vim/gpedit；gcc；Vscode</p><h2 id="1-3-中间结果"><a href="#1-3-中间结果" class="headerlink" title="1.3 中间结果"></a>1.3 中间结果</h2><p>列出你为编写本论文，生成的中间结果文件的名字，文件的作用等。</p><table><thead><tr><th><strong>中间结果文件的名字</strong></th><th><strong>文件的作用</strong></th></tr></thead><tbody><tr><td>hello.i</td><td>修改了的源程序（文本）</td></tr><tr><td>hello.s</td><td>汇编程序（文本）</td></tr><tr><td>hello.o</td><td>可重定位目标程序（二进制）</td></tr><tr><td>hello</td><td>可执行目标程序（二进制）</td></tr><tr><td>elf.txt</td><td>可重定位目标ELF格式</td></tr><tr><td>linked_elf.txt</td><td>可执行目标ELF格式</td></tr><tr><td>objdump.txt</td><td>hello.o的反汇编代码</td></tr><tr><td>objdump2.txt</td><td>hello的反汇编代码</td></tr></tbody></table><h2 id="1-4-本章小结"><a href="#1-4-本章小结" class="headerlink" title="1.4 本章小结"></a>1.4 本章小结</h2><p>第一章主要对论文讨论的主要内容，首先对hello过程进行了总体概况，包括P2P、020的整个过程，然后介绍个人使用电脑的硬件环境、软件环境和开发工具，最后介绍了过程中产生的文件及其作用等。</p><h1 id="第2章-预处理"><a href="#第2章-预处理" class="headerlink" title="第2章 预处理"></a>第2章 预处理</h1><h2 id="2-1-预处理的概念与作用"><a href="#2-1-预处理的概念与作用" class="headerlink" title="2.1 预处理的概念与作用"></a>2.1 预处理的概念与作用</h2><p>预处理概念：预处理一般是指程序在编译系统处理过程中，预处理器(cpp)根据以符号"#"开头的命令，修改原始的C程序代码文本，主要是进行代码文本的替换工作，得到的结果再由编译器(ccl)进一步编译。用于在编译器处理程序之前预扫描代码，完成头文件包含、宏扩展、条件编译、行控制等操作。</p><p>预处理作用：这个过程并不对程序的源代码进行解析,但它把源代码分割或处理成为特定的单位，将预处理指令（以#开头）转化为实际代码中的内容，但只是单纯的替换和展开。例如，读取命令#include中包含的系统头文件并把它插入系统文本中，扩展所有用#define声明指定的宏。预处理过程还会删除程序中的注释和多余的空白字符。</p><h2 id="2-2在Ubuntu下预处理的命令"><a href="#2-2在Ubuntu下预处理的命令" class="headerlink" title="2.2在Ubuntu下预处理的命令"></a>2.2在Ubuntu下预处理的命令</h2><p>命令行：Linux&amp;gt; cpp hello.c &amp;gt;hello.i</p><p>预处理命令及结果：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105714.png" alt="image003"></p><p>图1：预处理命令</p><p>预处理后源代码部分，注意到此时行数已经到了三千多行：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105725.png" alt="image005"></p><p>图2：预处理结果</p><p>预处理从头文件中插入的文本等：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105733.png" alt="image007"></p><p>图3：预处理插入内容</p><h2 id="2-3-Hello的预处理结果解析"><a href="#2-3-Hello的预处理结果解析" class="headerlink" title="2.3 Hello的预处理结果解析"></a>2.3 Hello的预处理结果解析</h2><p>发现预处理之后，程序已经从原来的几十行变为了大约三千六十六行，并且源代码出现在最后，并且#include命令和注释等全都消失不见，推测之前的代码应该就是用头文件stdio.h\unistd.h\stdlib.h中的实际内容代替的对于命令行。其中包括了大量的相对路径、typedef类型创建名、extern关键字函数等。</p><h2 id="2-4-本章小结"><a href="#2-4-本章小结" class="headerlink" title="2.4 本章小结"></a>2.4 本章小结</h2><p>本章主要介绍了C语言的预处理过程，包括预处理的概念和作用，在Linux系统下预处理的命令，以及预处理的结果及生成文件hello.i，还有解析预处理。</p><h1 id="第3章-编译"><a href="#第3章-编译" class="headerlink" title="第3章 编译"></a>第3章 编译</h1><h2 id="3-1-编译的概念与作用"><a href="#3-1-编译的概念与作用" class="headerlink" title="3.1 编译的概念与作用"></a>3.1 编译的概念与作用</h2><p>编译的概念：编译是编译器（一种计算机程序）运行过程，会将某种编程语言写成的源代码（原始语言）通过词法语法分析之后转换成另一种编程语言（目标语言）。</p><p>编译的作用：编译主要做词法分析、语法分析、语义分析、优化后生成相应的汇编代码。在C语言的编译中，编译器将高级语言C转化为了机器码汇编语言，在这里将文本文件hello.i翻译成文本文件hello.s，它包含一个汇编语言程序。</p><p>注意：这儿的编译是指从 .i 到 .s 即预处理后的文件到生成汇编语言程序</p><h2 id="3-2-在Ubuntu下编译的命令"><a href="#3-2-在Ubuntu下编译的命令" class="headerlink" title="3.2 在Ubuntu下编译的命令"></a>3.2 在Ubuntu下编译的命令</h2><p>命令行：Linux&amp;gt; gcc -S hello.i -o hello.s</p><p>编译过程截图：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105802.png" alt="image009"></p><p>图4：编译命令</p><p>编译结果部分截图：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105807.png" alt="image011"></p><p>图5：编译结果</p><h2 id="3-3-Hello的编译结果解析"><a href="#3-3-Hello的编译结果解析" class="headerlink" title="3.3 Hello的编译结果解析"></a>3.3 Hello的编译结果解析</h2><p>此部分是重点，说明编译器是怎么处理C语言的各个数据类型以及各类操作的。应分3.3.1~ 3.3.x等按照类型和操作进行分析， <strong>只要</strong>** hello.s <strong><strong>中出现的属于大作业</strong></strong> PPT <strong><strong>中</strong></strong> P4 <strong><strong>给出的参考</strong></strong> C **<strong>数据与操作，都应解析</strong> 。</p><h3 id="3-3-1-数据"><a href="#3-3-1-数据" class="headerlink" title="3.3.1 数据"></a>3.3.1 数据</h3><ol><li><strong>常量</strong></li></ol><p>首先对于代码 if(argc!=3) printf("Hello %s %s\n",argv[1],argv[2]);中存在常量3、1、2，类似于它们这些常数，被存放在代码段，所以保存在.text中。例如，对于第一句中的3，存放在 cmpl   $3, -20(%rbp) 其他也同理可得。</p><p>对于函数printf("Usage: Hello 1190202105 傅浩东！\n");中的字符串常量存放在.rodata节的.LC0中，printf("Hello %s %s\n",argv[1],argv[2]);中的字符串存放在.rodata节的.LC1中。如下所示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">   .string &amp;quot;Usage: Hello 1190202105\345\202\205\346\265\251\344\270\234\357\274\201&amp;quot;</span><br><span class="line">.LC1:</span><br><span class="line">    .string &amp;quot;Hello %s %s\n&amp;quot;</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>变量</strong></li></ol><p><strong>全局变量：</strong> 已初始化的全局和静态变量在.data节。在本节中，全局变量sleepsecs最开始赋值为2.5，但被隐式地转为int数据类型，所以会变为2 int sleepsecs=2.5; 所以在汇编代码中可以看到：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    .data</span><br><span class="line">    .align 4</span><br><span class="line">    .type   sleepsecs, @object</span><br><span class="line">    .size   sleepsecs, 4</span><br><span class="line">sleepsecs:</span><br><span class="line">    .long   2</span><br></pre></td></tr></tbody></table></figure><p><strong>局部变量：</strong> 原始代码中定义了局部变量 int I 储存在寄存器或者栈中，所以汇编代码有如下，循环前值为0的i被保存在 %rsp-4 的位置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.L2:</span><br><span class="line">    movl    $0, -4(%rbp)</span><br><span class="line">    jmp .L3</span><br></pre></td></tr></tbody></table></figure><p><strong>函数参数：</strong> 主函数main的两个参数int argc,char *argv[]分别都存放在栈中，由寄存器的偏移来分别表示。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subq    $32, %rsp</span><br><span class="line">movl    %edi, -20(%rbp)</span><br><span class="line">movq    %rsi, -32(%rbp)</span><br></pre></td></tr></tbody></table></figure><h3 id="赋值-，逗号操作符，赋初值-不赋初值"><a href="#赋值-，逗号操作符，赋初值-不赋初值" class="headerlink" title="赋值=，逗号操作符，赋初值/不赋初值"></a>赋值=，逗号操作符，赋初值/不赋初值</h3><p>在循环最开始有给循环条件变量i赋初值的操作：for(i=0;i&amp;lt;10;i++)</p><p>通过汇编语句 movl   $0, -4(%rbp) 给局部变量 i 赋初值0。</p><h3 id="类型转换（隐式或显式）"><a href="#类型转换（隐式或显式）" class="headerlink" title="类型转换（隐式或显式）"></a>类型转换（隐式或显式）</h3><p>int 类型全局变量 sleepsecs 赋值为 2.5 时进行了隐式类型转换（将浮点数类型转为整型），变量值变为 2：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sleepsecs=2.5;</span><br></pre></td></tr></tbody></table></figure><h3 id="算术操作"><a href="#算术操作" class="headerlink" title="算术操作"></a>算术操作</h3><p>在循环操作中，实现了i++操作 for(i=0;i&amp;lt;10;i++)</p><p>每次循环结束之后，对i进行一次自加，栈上对应的存储变量i的值加1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addl    $1, -4(%rbp)</span><br></pre></td></tr></tbody></table></figure><p>addl    $1, -4(%rbp)实现为栈开辟空间；</p><h3 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h3><p>判断 argc 是否是3和循环终止条件用到了关系操作，如下所示，在源代码中有argc!=3和i&amp;lt;10 判断不等和小于。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(argc!=3)</span><br><span class="line">{</span><br><span class="line">    printf(&amp;quot;Usage: Hello 1190202105 傅浩东！\n&amp;quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">}</span><br><span class="line">for(i=0;i\&amp;lt;10;i++)</span><br><span class="line">{</span><br><span class="line">    printf(&amp;quot;Hello %s %s\n&amp;quot;,argv[1],argv[2]);</span><br><span class="line">    sleep(sleepsecs);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>它们对映的汇编指令有：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmpl    $3, -20(%rbp)</span><br><span class="line">je  .L2</span><br></pre></td></tr></tbody></table></figure><p>比较3与%rbp-20位置的数值是否相等，不相等则跳转到.L2处。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmpl    $9, -4(%rbp)</span><br><span class="line">jle .L4</span><br></pre></td></tr></tbody></table></figure><p>比较9与%rbp-4的操作数大小，若后者小于前者即9，则跳转到.L4处。</p><h3 id="数组-指针-结构操作"><a href="#数组-指针-结构操作" class="headerlink" title="数组/指针/结构操作"></a>数组/指针/结构操作</h3><p>最开始可以知道，主函数main的参数中有指针数组char *argv[]，源代码中对数组的引用是输出 argv[1]和 argv[2]，利用在栈帧中位置，通过%rbp-16和%rbp-24，分别得到 argv[1]和 argc[2]两个字符串。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    movl    %edi, -20(%rbp)//argc</span><br><span class="line">    movq    %rsi, -32(%rbp)//argv</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">### 控制转移</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>if(argc!=3)<br>for(i=0;i&amp;lt;10;i++)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">上述原函数中两个部分使用了控制转移，这部分内容在关系操作部分已经提及，就不再赘述。</span><br><span class="line"></span><br><span class="line">### 函数操作</span><br><span class="line"></span><br><span class="line">主要从函数传递（地址/值）、函数调用（）、函数返回return三个方面来对以下函数进行编译结果解析。</span><br><span class="line"></span><br><span class="line">**Main 函数：**</span><br><span class="line"></span><br><span class="line">参数传递：int argc,char \*argv[] 分别储存在寄存器%rdi和%rsi中</span><br><span class="line"></span><br><span class="line">函数调用：被系统函数调用</span><br><span class="line"></span><br><span class="line">函数返回：函数return 0，返回值储存在寄存器%eax中</span><br><span class="line"></span><br><span class="line">**Printf  函数：**</span><br><span class="line"></span><br><span class="line">参数传递：首先对于puts，将.LC0作为参数传递，即只传入了字符串首地址；对于printf，将栈中的两个数据传给printf，即argv[1]和argv[2]的地址，另外还传入了.LC0参数，即字符串首地址。</span><br><span class="line"></span><br><span class="line">函数调用：判断argc!=3，若该不等式成立，则调用printf；在for循环中，即i在范围0到9之间都调用函数printf。但是它们对应汇编指令分别有puts和printf。</span><br><span class="line"></span><br><span class="line">函数返回：暂时未知</span><br><span class="line"></span><br><span class="line">汇编指令：call puts@PLT以及call printf@PLT</span><br><span class="line"></span><br><span class="line">对于第一条 printf(&amp;quot;Usage: Hello 1190202105 傅浩东！\n&amp;quot;);有如下汇编：</span><br></pre></td></tr></tbody></table></figure><pre><code>cmpl    $3, -20(%rbp)je  .L2leaq    .LC0(%rip), %rdicall    puts@PLT</code></pre><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于printf(&amp;quot;Hello %s %s\n&amp;quot;,argv[1],argv[2]);有：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>.L4:<br>    movq    -32(%rbp), %rax<br>    addq    <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="25.091ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11090.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1444.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2322.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2807.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(3292.7,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(3752.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4141.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5019.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5504.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(5989.7,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6671.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7672.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(8672.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9061.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(9590.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(10110.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(10630.1,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>8, %rax<br>    movq    (%rax), %rax<br>    movq    %rax, %rsi<br>    leaq    .LC1(%rip), %rdi<br>    movl    $0, %eax<br>    call    printf@PLT</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**Exit 函数：**</span><br><span class="line"></span><br><span class="line">参数传递：源代码exit(1);传递的参数为1，从下面的汇编代码可知该参数储存在寄存器%edi之中。</span><br></pre></td></tr></tbody></table></figure><pre><code>movl    $1, %edicall    exit@PLT</code></pre><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数调用：判断argc!=3，若该不等式成立，则在调用printf之后调用函数exit。</span><br><span class="line"></span><br><span class="line">函数返回：暂时不知</span><br><span class="line"></span><br><span class="line">**Sleep 函数：**</span><br><span class="line"></span><br><span class="line">参数传递：根据源代码易知，将全局变量sleepsecs作为参数传递给了sleep函数，从汇编指令可知应该是将sleepsecs储存在%edi中来传递。</span><br></pre></td></tr></tbody></table></figure><pre><code>movl    sleepsecs(%rip), %eaxmovl    %eax, %edicall    sleep@PLT</code></pre><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数调用：循环条件成立时，即i在0到9之间，每一次循环都在调用printf之后调用函数sleep。</span><br><span class="line"></span><br><span class="line">函数返回：暂时不知。</span><br><span class="line"></span><br><span class="line">**Getchar 函数：**</span><br><span class="line"></span><br><span class="line">参数传递：无</span><br><span class="line"></span><br><span class="line">函数调用：main函数return 0之前调用。</span><br><span class="line"></span><br><span class="line">函数返回：暂时不知</span><br></pre></td></tr></tbody></table></figure><pre><code>call    getchar@PLT</code></pre><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.4 本章小结</span><br><span class="line"></span><br><span class="line">本章首先介绍了编译的概念与作用，接着是编译命令和结果，重点在对hello编译结果解析。分别对数据、赋值、隐式类型转换、算术操作、关系操作、数组/指针操作、控制转移、函数操作等多个方面来对编译结果进行了详细的解释，也对 hello.s 其中的语句进行分析，找出指令与源代码的对应情况等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第4章 汇编</span><br><span class="line"></span><br><span class="line">## 4.1 汇编的概念与作用</span><br><span class="line"></span><br><span class="line">**汇编的概念：** 汇编器(as)将 hello.s 翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标代码(relocatable object program)的格式，并将结果保存在目标文件 hello.o 中。hello.o 文件是一个二进制文件，包含所有指令的二进制表示，但是还没有填入全局值的地址，如果在文本编辑器中打开 hello.o文件，将看到一堆乱码。</span><br><span class="line"></span><br><span class="line">**汇编的作用：** 汇编就是将.s程序翻译成机器语言指令，并将这些指令打包为可重定位程序格式，保存在二进制文件.o中。便于机器在此后的链接与运行。</span><br><span class="line"></span><br><span class="line">注意：这儿的汇编是指从 .s 到 .o 即编译后的文件到生成机器语言二进制程序的过程。</span><br><span class="line"></span><br><span class="line">## 4.2 在Ubuntu下汇编的命令</span><br><span class="line"></span><br><span class="line">命令行：Linux\&amp;gt; gcc -c hello.s -o hello.o</span><br><span class="line"></span><br><span class="line">汇编过程截图：</span><br><span class="line"></span><br><span class="line">![image013](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105834.png)</span><br><span class="line"></span><br><span class="line">图6：汇编命令</span><br><span class="line"></span><br><span class="line">## 4.3 可重定位目标elf格式</span><br><span class="line"></span><br><span class="line">分析hello.o的ELF格式，用readelf等列出其各节的基本信息，特别是重定位项目分析。</span><br><span class="line"></span><br><span class="line">![image015](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105841.png)</span><br><span class="line"></span><br><span class="line">图7：可重定位目标ELF格式</span><br><span class="line"></span><br><span class="line">命令行：Linux\&amp;gt; readelf -a hello.o \&amp;gt;elf.txt</span><br><span class="line"></span><br><span class="line">![image017](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105850.png)</span><br><span class="line"></span><br><span class="line">图8：ELF命令</span><br><span class="line"></span><br><span class="line">**ELF header**** ：**以一个16字节的序列开始，这个序列描述了生成该文件的系统的字的大小和字节顺序。ELF头剩下的部分包含帮助链接器语法分析和解释目标文件的信息。其中包括ELF头的大小、目标文件的类型（这里是可重定位）、机器类型（X86-64）、节头部表（section header table）的文件偏移，以及节头部表中条目的大小和数量。不同节的位置和大小是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目。如下所示：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>  Class:                             ELF64<br>  Data:                              2's complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              REL (Relocatable file)<br>  Machine:                           Advanced Micro Devices X86-64<br>  Version:                           0x1<br>  Entry point address:               0x0<br>  Start of program headers:          0 (bytes into file)<br>  Start of section headers:          1240 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           0 (bytes)<br>  Number of program headers:         0<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         14<br>  Section header string table index: 13</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**节：** 夹在ELF头和节头部表之间的都是节。典型的ELF可重定位目标文件包含如下几个节：.text: 已编译程序的机器代码。.rodata: 只读数据。.data: 已初始化的全局和静态C变量。.bss: 未初始化的全局和静态C变量，以及所有被初始化为0的全局或静态变量。.symtab：符号表，存放程序中定义和引用的函数和全局变量的信息。.rel.text: —个.text 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。.rel.data: 被模块引用或定义的所有全局变量的重定位信息。.debug: 个调试符号表，只有以-g选项调用编译器驱动程序时才会得到这张表。.line: 原始C源程序中的行号和.text 节中机器指令之间的映射，以-g选项调用编译器驱动程序时才会得到。.strtab:字符串表，内容包括 .symtab和 .debug节中的符号表，以及节头部中的令名字。如下是节头部表：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Section Headers:<br>  [Nr] Name              Type             Address           Offset<br>       Size              EntSize          Flags  Link  Info  Align<br>  [ 0]                   NULL             0000000000000000  00000000<br>       0000000000000000  0000000000000000           0     0     0<br>  [ 1] .text             PROGBITS         0000000000000000  00000040<br>       0000000000000085  0000000000000000  AX       0     0     1<br>  [ 2] .rela.text        RELA             0000000000000000  00000388<br>       00000000000000c0  0000000000000018   I      11     1     8<br>  [ 3] .data             PROGBITS         0000000000000000  000000c8<br>       0000000000000004  0000000000000000  WA       0     0     4<br>  [ 4] .bss              NOBITS           0000000000000000  000000cc<br>       0000000000000000  0000000000000000  WA       0     0     1<br>  [ 5] .rodata           PROGBITS         0000000000000000  000000d0<br>       0000000000000032  0000000000000000   A       0     0     8<br>  [ 6] .comment          PROGBITS         0000000000000000  00000102<br>       000000000000002b  0000000000000001  MS       0     0     1<br>  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  0000012d<br>       0000000000000000  0000000000000000           0     0     1<br>  [ 8] .note.gnu.propert NOTE             0000000000000000  00000130<br>       0000000000000020  0000000000000000   A       0     0     8<br>  [ 9] .eh_frame         PROGBITS         0000000000000000  00000150<br>       0000000000000038  0000000000000000   A       0     0     8<br>  [10] .rela.eh_frame    RELA             0000000000000000  00000448<br>       0000000000000018  0000000000000018   I      11     9     8<br>  [11] .symtab           SYMTAB           0000000000000000  00000188<br>       00000000000001b0  0000000000000018          12    10     8<br>  [12] .strtab           STRTAB           0000000000000000  00000338<br>       000000000000004d  0000000000000000           0     0     1<br>  [13] .shstrtab         STRTAB           0000000000000000  00000460<br>       0000000000000074  0000000000000000           0     0     1</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">除此以外，在本例中主要还有如下两个部分：首先是重定位节.rela.text和.rela.eh\_frame，其次就是符号表.symtab。对于重定位节，在链接时需要对其进行修改，通过偏移量等信息计算出正确的地址。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Relocation section '.rela.text' at offset 0x388 contains 8 entries:<br>  Offset          Info           Type           Sym. Value    Sym. Name + Addend<br>00000000001c  000500000002 R_X86_64_PC32     0000000000000000 .rodata - 4<br>000000000021  000d00000004 R_X86_64_PLT32    0000000000000000 puts - 4<br>00000000002b  000e00000004 R_X86_64_PLT32    0000000000000000 exit - 4<br>000000000054  000500000002 R_X86_64_PC32     0000000000000000 .rodata + 21<br>00000000005e  000f00000004 R_X86_64_PLT32    0000000000000000 printf - 4<br>000000000064  000a00000002 R_X86_64_PC32     0000000000000000 sleepsecs - 4<br>00000000006b  001000000004 R_X86_64_PLT32    0000000000000000 sleep - 4<br>00000000007a  001100000004 R_X86_64_PLT32    0000000000000000 getchar - 4<br>Relocation section '.rela.eh_frame' at offset 0x448 contains 1 entry:<br>  Offset          Info           Type           Sym. Value    Sym. Name + Addend<br>000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0<br>Symbol table '.symtab' contains 18 entries:<br>   Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND<br>     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c<br>     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1<br>     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3<br>     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4<br>     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5<br>     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7<br>     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8<br>     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    9<br>     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6<br>    10: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 sleepsecs<br>    11: 0000000000000000   133 FUNC    GLOBAL DEFAULT    1 main<br>    12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_<br>    13: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND puts<br>    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND exit<br>    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf<br>    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND sleep<br>    17: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND getchar</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.4 Hello.o的结果解析</span><br><span class="line"></span><br><span class="line">命令行：Linux\&amp;gt; objdump -d -r hello.o \&amp;gt;objdump.s</span><br><span class="line"></span><br><span class="line">分析hello.o的反汇编，与第3章的 hello.s进行对照分析，发现有如下区别：</span><br><span class="line"></span><br><span class="line">1. 分支转移：在.s文件中依靠.L+字段来确定位置的，而反汇编代码中通过间接寻址来跳转到相对偏移地址。</span><br><span class="line">2. 函数调用：hello.s中用 call+函数名来实现对该函数的调用，而反汇编代码中callq使用的是相对偏移地址。但是现在该地址全部为0，将其写在重定位节，链接器后续进行重定位确定真正的地址。</span><br><span class="line">3. 全局变量使用：同样待重定位。</span><br><span class="line">4. 指令表示：在反汇编代码中，省略了许多与字节大小相关的后缀，例如&amp;quot;q&amp;quot;、&amp;quot;l&amp;quot;等；但是call指令又变为了callq（强调这是x86-64版本）。</span><br><span class="line">5. 数据表示：在hello.s文件中数据一般用十进制来表示，而在反汇编代码中是用十六进制来表示的。</span><br><span class="line"></span><br><span class="line">说明机器语言的构成，与汇编语言的映射关系。特别是机器语言中的操作数与汇编语言不一致，特别是分支转移函数调用等。</span><br><span class="line"></span><br><span class="line">## 4.5 本章小结</span><br><span class="line"></span><br><span class="line">本章主要介绍了汇编过程及其结果、可重定位目标ELF格式、以及hello1.o反汇编。经过汇编器汇编语言转化为机器语言指令，打包为二进制可重定位目标文件hello.o。对ELF分析，以及对比hello.s和hello.o反汇编结果，发现汇编过程为链接做了不小的准备，接下来自然要分析链接，进一步了解P2P过程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第5章 链接</span><br><span class="line"></span><br><span class="line">## 5.1 链接的概念与作用</span><br><span class="line"></span><br><span class="line">**链接的概念：** 链接（linking）是将各种代码和数据片段收集并组合成为一个单一文件的过程，这个文件可被加载（复制）到内存并执行。链接可以执行于编，译时（compile time），也就是在源代码被翻译成机器代码时；也可以执行于加栽时（load time），也就是在程序被加载器（loader）加载到内存并执行时；甚至执行于运行时（runtime），也就是由应用程序来执行。在早期的计算机系统中，链接是手动执行的。在现代系统中，链接是由叫做链接器（linker）的 程序自动执行的。</span><br><span class="line"></span><br><span class="line">**链接的作用：** 链接在软件开发中扮演着一个关键的角色，因为它们使得分离编译（separate compilation）成为可能。我们不用将一个大型的应用程序组织为一个巨大的源文件，而是可以把它分解为更小、更好管理的模块，可以独立地修改和编译这些模块。当我们改变这些模块中的一个时，只需简单地重新编译它，并重新链接应用，而不必重新编译其他文件。</span><br><span class="line"></span><br><span class="line">注意：这儿的链接是指从 hello.o 到hello生成过程。</span><br><span class="line"></span><br><span class="line">## 5.2 在Ubuntu下链接的命令</span><br><span class="line"></span><br><span class="line">Ld链接命令行：ld -o hello -dynamic-linker /lib64/ld-linux-x86-64.so.2 /usr/lib /x86\_64-linux-gnu/crt1.o /usr/lib/x86\_64-linux-gnu/crti.o hello.o /usr/lib/x86\_64-linux -gnu/libc.so /usr/lib/x86\_64-linux-gnu/crtn.o</span><br><span class="line"></span><br><span class="line">过程截图展示：</span><br><span class="line"></span><br><span class="line">![image019](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105907.png)</span><br><span class="line"></span><br><span class="line">图9：ld链接命令</span><br><span class="line"></span><br><span class="line">## 5.3 可执行目标文件hello的格式</span><br><span class="line"></span><br><span class="line">Hello（可执行目标文件）的ELF格式：</span><br><span class="line"></span><br><span class="line">![image021](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105916.png)</span><br><span class="line"></span><br><span class="line">图10：可执行目标文件ELF格式</span><br><span class="line"></span><br><span class="line">命令行：Linux\&amp;gt; readelf -a hello \&amp;gt;linked\_elf.txt</span><br><span class="line"></span><br><span class="line">![image023](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105925.png)</span><br><span class="line"></span><br><span class="line">图11：ELF获取命令</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>ELF header：<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>  Class:                             ELF64<br>  Data:                              2's complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              EXEC (Executable file)<br>  Machine:                           Advanced Micro Devices X86-64<br>  Version:                           0x1<br>  Entry point address:               0x4010d0<br>  Start of program headers:          64 (bytes into file)<br>  Start of section headers:          14200 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           56 (bytes)<br>  Number of program headers:         12<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         27<br>  Section header string table index: 26</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">节头部表（包括各段的起始地址，大小等信息）：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>  [Nr] Name              Type             Address           Offset<br>       Size              EntSize          Flags  Link  Info  Align<br>  [ 0]                   NULL             0000000000000000  00000000<br>       0000000000000000  0000000000000000           0     0     0<br>  [ 1] .interp           PROGBITS         00000000004002e0  000002e0<br>       000000000000001c  0000000000000000   A       0     0     1<br>  [ 2] .note.gnu.propert NOTE             0000000000400300  00000300<br>       0000000000000020  0000000000000000   A       0     0     8<br>  [ 3] .note.ABI-tag     NOTE             0000000000400320  00000320<br>       0000000000000020  0000000000000000   A       0     0     4<br>  [ 4] .hash             HASH             0000000000400340  00000340<br>       0000000000000034  0000000000000004   A       6     0     8<br>  [ 5] .gnu.hash         GNU_HASH         0000000000400378  00000378<br>       000000000000001c  0000000000000000   A       6     0     8<br>  [ 6] .dynsym           DYNSYM           0000000000400398  00000398<br>       00000000000000c0  0000000000000018   A       7     1     8<br>  [ 7] .dynstr           STRTAB           0000000000400458  00000458<br>       0000000000000057  0000000000000000   A       0     0     1<br>  [ 8] .gnu.version      VERSYM           00000000004004b0  000004b0<br>       0000000000000010  0000000000000002   A       6     0     2<br>  [ 9] .gnu.version_r    VERNEED          00000000004004c0  000004c0<br>       0000000000000020  0000000000000000   A       7     1     8<br>  [10] .rela.dyn         RELA             00000000004004e0  000004e0<br>       0000000000000030  0000000000000018   A       6     0     8<br>  [11] .rela.plt         RELA             0000000000400510  00000510<br>       0000000000000078  0000000000000018  AI       6    21     8<br>  [12] .init             PROGBITS         0000000000401000  00001000<br>       000000000000001b  0000000000000000  AX       0     0     4<br>  [13] .plt              PROGBITS         0000000000401020  00001020<br>       0000000000000060  0000000000000010  AX       0     0     16<br>  [14] .plt.sec          PROGBITS         0000000000401080  00001080<br>       0000000000000050  0000000000000010  AX       0     0     16<br>  [15] .text             PROGBITS         00000000004010d0  000010d0<br>       0000000000000135  0000000000000000  AX       0     0     16<br>  [16] .fini             PROGBITS         0000000000401208  00001208<br>       000000000000000d  0000000000000000  AX       0     0     4<br>  [17] .rodata           PROGBITS         0000000000402000  00002000<br>       000000000000003a  0000000000000000   A       0     0     8<br>  [18] .eh_frame         PROGBITS         0000000000402040  00002040<br>       00000000000000fc  0000000000000000   A       0     0     8<br>  [19] .dynamic          DYNAMIC          0000000000403e50  00002e50<br>       00000000000001a0  0000000000000010  WA       7     0     8<br>  [20] .got              PROGBITS         0000000000403ff0  00002ff0<br>       0000000000000010  0000000000000008  WA       0     0     8<br>  [21] .got.plt          PROGBITS         0000000000404000  00003000<br>       0000000000000040  0000000000000008  WA       0     0     8<br>  [22] .data             PROGBITS         0000000000404040  00003040<br>       0000000000000008  0000000000000000  WA       0     0     4<br>  [23] .comment          PROGBITS         0000000000000000  00003048<br>       000000000000002a  0000000000000001  MS       0     0     1<br>  [24] .symtab           SYMTAB           0000000000000000  00003078<br>       00000000000004c8  0000000000000018          25    30     8<br>  [25] .strtab           STRTAB           0000000000000000  00003540<br>       0000000000000150  0000000000000000           0     0     1<br>  [26] .shstrtab         STRTAB           0000000000000000  00003690<br>       00000000000000e1  0000000000000000           0     0     1</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其余部分基本就是上述表的具体内容，就不再一一列举。</span><br><span class="line"></span><br><span class="line">## 5.4 hello的虚拟地址空间</span><br><span class="line"></span><br><span class="line">![image025](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105936.png)</span><br><span class="line"></span><br><span class="line">图12：hello虚拟地址空间基本结构</span><br><span class="line"></span><br><span class="line">使用edb加载hello，查看本进程的虚拟地址空间各段信息。</span><br><span class="line"></span><br><span class="line">![image027](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105942.png)</span><br><span class="line"></span><br><span class="line">图13：Memory Regions查看结果</span><br><span class="line"></span><br><span class="line">通过edb中工具Memory Regions查看虚拟空间各段的储存信息，可以知道从0x400000到0x401000只能读，对映节有.interp/.note.gnu.propert/……/.rela.plt；相应的0x401000到0x402000能读和执行，对应节有.init/.plt/.plt.scc/.text/.fini；从0x402000到0x403000只能读，对应节有.rodata/.eh\_frame；从0x403000到0x405000能读写，对应节有.dynamic/.got/.got.plt/.data。如下是0x401000到0x402000部分的对照：</span><br><span class="line"></span><br><span class="line">![image029](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105951.png)</span><br><span class="line"></span><br><span class="line">![image031](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105958.png)</span><br><span class="line"></span><br><span class="line">图14、15：对映节查看</span><br><span class="line"></span><br><span class="line">## 5.5 链接的重定位过程分析</span><br><span class="line"></span><br><span class="line">**命令行** ：Linux\&amp;gt; objdump -d -r hello \&amp;gt;objdump2.s</span><br><span class="line"></span><br><span class="line">**分析比较**** hello ****与**** hello.o ****反汇编结果的不同：**</span><br><span class="line"></span><br><span class="line">1. 函数增加：相较于objdump.s只有main函数，objdump2.s还包含了函数puts ，printf ，getchar，exit，sleep 等等。</span><br><span class="line">2. 节增加：在hello中增加了例如.plt，.plt.sec，.fini等节。</span><br><span class="line">3. 重定位：在hello中发现有lea和call指令的操作数被填充了地址，进行了重定位，其中包括函数的虚拟地址以及储存的字符串的地址（.rodata节的地址与偏移量所决定）和全局变量sleepsecs的虚拟地址。</span><br><span class="line"></span><br><span class="line">**链接的过程** （主要是静态链接）：</span><br><span class="line"></span><br><span class="line">1. 符号解析(symbol resolution)：目标文件定义和引用符号，每个符号对应于一个函数、一个全局变量或一个静态变量（即C语言中任何以static属性声明的变量）。符号解析的目的是将每个符号引用正好和一个符号定义关联起来。</span><br><span class="line">2. 重定位（relocation)：编译器和汇编器生成从地址0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，从而重定位这些节，然后修改所有对这些符号的引用，使得它们指向这个内存位置。链接器使用汇编器产生的重定位条目（relocation entry）的详细指令，不加甄别地执行这样的重定位。</span><br><span class="line"></span><br><span class="line">**分析hello中对重定位项目的重定位方式：**</span><br><span class="line"></span><br><span class="line">一旦链接器完成了符号解析这一步，就把代码中的每个符号引用和正好一个符号定义关联起来。此时，链接器就知道它的输人目标模块中的代码节和数据节的确切大小。</span><br><span class="line"></span><br><span class="line">1. 重定位节和符号定义。链接器将所有相同类型的节合并为同一类型的新的聚合节。然后，链接器将运行时内存地址赋给新的聚合节，赋给输人模块定义的每个节，以及赋给输人模块定义的每个符号。这样，程序中的每条指令和全局变量都有唯一的运行时内存地址了。</span><br><span class="line">2. 重定位节中的符号引用。链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。要执行这一步，链接器依赖于可重定位目标模块中称为重定位条目的数据结构。</span><br><span class="line"></span><br><span class="line">## 5.6 hello的执行流程</span><br><span class="line"></span><br><span class="line">使用edb执行hello截图：</span><br><span class="line"></span><br><span class="line">![image033](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110012.png)</span><br><span class="line"></span><br><span class="line">图16：edb执行hello结果</span><br><span class="line"></span><br><span class="line">说明从加载hello到\_start，到call main,以及程序终止的所有过程其调用与跳转的各个子程序名或程序地址，如下所示：</span><br><span class="line"></span><br><span class="line">| **程序地址** | **程序名** |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 0x00000000004010d0 | \_start |</span><br><span class="line">| 0x00007efda717bfc0 | \_\_libc\_start\_main |</span><br><span class="line">| 0x0000000000401190 | \_\_libc\_csu\_init |</span><br><span class="line">| 0x0000000000401000 | \_init |</span><br><span class="line">| 0x0000000000401105 | Main |</span><br><span class="line">| 0x0000000000401080 | puts@plt |</span><br><span class="line">| 0x00000000004010b0 | Exit@plt |</span><br><span class="line">| 0x0000000000401090 | printf@plt |</span><br><span class="line">| 0x00000000004010c0 | sleep@plt |</span><br><span class="line">| 0x00000000004010a0 | getchar@plt |</span><br><span class="line">| 0x0000000000401200 | \_\_libc\_csu\_fini |</span><br><span class="line">| 0x0000000000401208 | \_fini |</span><br><span class="line"></span><br><span class="line">## 5.7 Hello的动态链接分析</span><br><span class="line"></span><br><span class="line">首先可以找到.got和.got.plt两个节起始地址偏移量等。</span><br><span class="line"></span><br><span class="line">![image035](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110020.png)</span><br><span class="line"></span><br><span class="line">通过edb调试，在dl\_init前后，有如下变化：</span><br><span class="line"></span><br><span class="line">![image037](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110036.png)</span><br><span class="line"></span><br><span class="line">图17：dl\_init前</span><br><span class="line"></span><br><span class="line">![image039](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110045.png)</span><br><span class="line"></span><br><span class="line">图18：dl\_init后</span><br><span class="line"></span><br><span class="line">在形成可执行程序时，发现引用了一个外部的函数，检查动态链接库，发现这个函数名是一个动态链接符号，此时可执行程序就不对这个符号进行重定位，而把这个过程留到装载时再进行。</span><br><span class="line"></span><br><span class="line">初始时每个got条目都指向对应plt条目的第二条指令。当库函数被调用后，链接器修改got。下一次调用plt时，指向的就是正确的内存地址。plt就能跳转到正确的区域。</span><br><span class="line"></span><br><span class="line">## 5.8 本章小结</span><br><span class="line"></span><br><span class="line">本章介绍了hello.o到hello的链接过程。主要包括链接的概念和作用；链接过程（虚拟地址空间、链接具体流程、还介绍了动态链接过程）；以及链接结果（可执行目标文件hello的ELF格式以及与hello.o的区别、了解了和hello的执行流程等）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第6章 hello进程管理</span><br><span class="line"></span><br><span class="line">## 6.1 进程的概念与作用</span><br><span class="line"></span><br><span class="line">**进程概念：** 程序是指令、数据及其组织形式的描述，进程是程序的实体。进程的经典定义就是一个执行中程序的实例。</span><br><span class="line"></span><br><span class="line">**进程作用：** 在现代系统上运行一个程序时，我们会得到一个假象，就好像我们的程序是系统中 当前运行的唯一的程序一样。我们的程序好像是独占地使用处理器和内存。处理器就好像是无间断地一条接一条地执行我们程序中的指令。最后，我们程序中的代码和数据好像是系统内存中唯一的对象。这些假象都是通过进程的概念提供给我们的。</span><br><span class="line"></span><br><span class="line">## 6.2 简述壳Shell-bash的作用与处理流程</span><br><span class="line"></span><br><span class="line">**壳的作用：** Shell 是系统的用户界面，提供了用户与内核进行交互操作的一种接口，Shell 是一种命令行解释器，其读取用户输入的字符串命令，解释并把它们送到内核。它是一种特殊的应用程序，介于系统调用/库和应用程序之间，提供了运行其他程序的接口。</span><br><span class="line"></span><br><span class="line">**壳的处理流程：**</span><br><span class="line"></span><br><span class="line">shell 先分词，判断命令是否为内部命令，如果不是，则寻找可执行文件进行执行，重复这个流程：</span><br><span class="line"></span><br><span class="line">1. Shell 首先从命令行中找出特殊字符（元字符），在将元字符翻译成间隔符 号。元字符将命令行划分成小块 tokens。Shell 中的元字符如下所示：SPACE , TAB , NEWLINE , &amp;amp; , ; , ( , ) ,\&amp;lt; , \&amp;gt; , |</span><br><span class="line">2. 程序块 tokens 被处理，检查看他们是否是 shell 中所引用到的关键字。</span><br><span class="line">3. 当程序块 tokens 被确定以后，shell 根据 aliases 文件中的列表来检查命令的第一个单词。如果这个单词出现在 aliases 表中，执行替换操作并且处理过程回到第一步重新分割程序块 tokens。</span><br><span class="line">4. Shell 对~符号进行替换。</span><br><span class="line">5. Shell 对所有前面带有$符号的变量进行替换。</span><br><span class="line">6. Shell 将命令行中的内嵌命令表达式替换成命令；他们一般都采用 $(command)标记法。</span><br><span class="line">7. Shell 计算采用$(expression)标记的算术表达式。</span><br><span class="line">8. Shell 将命令字符串重新划分为新的块 tokens。这次划分的依据是栏位分割符号，称为 IFS。缺省的 IFS 变量包含有：SPACE , TAB 和换行符号。</span><br><span class="line">9. Shell 执行通配符\* ? []的替换。</span><br><span class="line">10. Shell 把所有处理的结果中用到的注释删除，並且按照下面的顺序实 行命令的检查：</span><br><span class="line"></span><br><span class="line">I. 内建的命令</span><br><span class="line"></span><br><span class="line">II. shell 函数（由用户自己定义的）</span><br><span class="line"></span><br><span class="line">III. 可执行的脚本文件（需要寻找文件和 PATH 路径）</span><br><span class="line"></span><br><span class="line">1. 在执行前的最后一步是初始化所有的输入输出重定向。</span><br><span class="line">2. 最后，执行命令。</span><br><span class="line"></span><br><span class="line">## 6.3 Hello的fork进程创建过程</span><br><span class="line"></span><br><span class="line">父进程通过调用 fork 函数创建一个新的运行的子进程。新创建的子进程几乎但不完全与父进程相同。子进程得到与父进程用户级虚拟地址空间相同的(但是独立的)一份副本，包括代码和数据段、堆、共享库以及用户栈。子进程还获得与父进程任何打开文件描述符相同的副本，这就意味着当父进程调用 fork 时，子进程可以读写父进程中打开的任何文件。父进程和新创建的子进程之间最大的区别在于它们有不同的 PID。具体过程如下：</span><br><span class="line"></span><br><span class="line">1. 给新进程分配一个标识符</span><br><span class="line">2. 在内核中分配一个PCB,将其挂在PCB表上</span><br><span class="line">3. 复制它的父进程的环境（PCB中大部分的内容）</span><br><span class="line">4. 为其分配资源（程序、数据、栈等）</span><br><span class="line">5. 复制父进程地址空间里的内容（代码共享，数据写时拷贝）</span><br><span class="line">6. 将进程置成就绪状态，并将其放入就绪队列，等待CPU调度。</span><br><span class="line"></span><br><span class="line">## 6.4 Hello的execve过程</span><br><span class="line"></span><br><span class="line">execve函数在当前进程的上下文中加载并运行一个新程序。</span><br><span class="line"></span><br><span class="line">execve函数加载并运行可执行目标文件hello，且带参数列表argv和环境变量 列表envp。只有当出现错误时，例如找不到hello，才会返回到调用程序。所以，与fork一次调用返回两次不同，execve调用一次并从不返回。</span><br><span class="line"></span><br><span class="line">在execve加载了hello之后调用启动代码，启动代码设置栈，并=将控制传递给新程序的主函数，该主函数如下原型：int main(int argc, char \*\*argv, char \* \*\*envp)或是等价的int main(int argc, char \*argv[], char \*\*envp[])。</span><br><span class="line"></span><br><span class="line">当main开始执行时，用户栈的组织结构如图所示。让我们从栈底（高地址）往栈顶（低地址）依次看一看。首先是参数和环境字符串。栈往上紧随其后的是以null结尾的指针数组，其中每个指针都指向找中的一个环境变量字符串。全局变量environ指向这些指针中的第一个envp[0]。紧随环境变量数组之后的是以null 结尾的 argv[]数组，其中每个元素都指向钱中的一个参数字符串。在找的顶部是系统启动函数libc\_start\_main的栈帧。</span><br><span class="line"></span><br><span class="line">![image041](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110059.png)</span><br><span class="line"></span><br><span class="line">图19：用户栈的组织结构</span><br><span class="line"></span><br><span class="line">## 6.5 Hello的进程执行</span><br><span class="line"></span><br><span class="line">结合进程上下文信息、进程时间片，阐述进程调度的过程，用户态与核心态转换等等。</span><br><span class="line"></span><br><span class="line">**进程上下文信息：** 内核为每个进程维持一个上下文（context）。上下文就是内核重新启动一个被抢占的进程所需的状态。它由一些对象的值组成，这些对象包括通用目的寄存器、浮点寄存器、程序计数器、用户栈、状态寄存器、内核栈和各种内核数据结构，比如描述地址空间的页表、包含有关当前进程信息的进程表，以及包含进程已打开文件的信息的文件表。</span><br><span class="line"></span><br><span class="line">**进程时间片：** 时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</span><br><span class="line"></span><br><span class="line">**进程调度的过程：** 在进程执行的某些时刻，内核可以决定抢占当前进程，并重新开始一个先前被抢占了的进程。这种决策就叫做调度( scheduling)，是由内核中称为调度器(scheduler)的代码处理的。当内核选择一个新的进程运行时，我们说内核调度了这个进程。在内核调度了一个新的进程运行后，它就抢占当前进程，并使用一种称为上下文切换的机制来将控制转移到新的进程，上下文切换1)保存当前进程的上下文，2)恢复某个先前被抢占的进程被保存的上下文，3)将控制传递给这个新恢复的进程。</span><br><span class="line"></span><br><span class="line">当内核代表用户执行系统调用时，可能会发生上下文切换。如果系统调用因为等待某个事件发生而阻塞，那么内核可以让当前进程休眠，切换到另一个进程。比如，如果一个read系统调用需要访问磁盘，内核可以选择执行上下文切换，运行另外一个进程，而不是等待数据从磁盘到达。另一个示例是sleep系统调用，它显式地请求让调用进程休眠。一般而言，即使系统调用没有阻塞，内核也可以决定执行上下文切换，而不是将控制返回给调用进程。</span><br><span class="line"></span><br><span class="line">中断也可能引发上下文切换。比如，所有的系统都有某种产生周期性定时器中断的机制，通常为每1毫秒或每10毫秒。每次发生定时器中断时，内核就能判定当前进程已经运行了足够长的时间，并切换到一个新的进程。</span><br><span class="line"></span><br><span class="line">![image043](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110107.png)</span><br><span class="line"></span><br><span class="line">图20：进程切换</span><br><span class="line"></span><br><span class="line">**用户态与核心态转换：** 从一个进程到另一个进程的转换是由操作系统内核（kernel）管理的。内核是操作系统代码常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条特殊的系统调用（system call）指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。注意，内核不是一个独立的进程。相反，它是系统管理全部进程所用代码和数据结构的集合。</span><br><span class="line"></span><br><span class="line">## 6.6 hello的异常与信号处理</span><br><span class="line"></span><br><span class="line">hello执行过程中会出现中断、陷进、故障、终止四类异常。</span><br><span class="line"></span><br><span class="line">![image045](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110115.png)</span><br><span class="line"></span><br><span class="line">图21：异常类型</span><br><span class="line"></span><br><span class="line">处理方式：</span><br><span class="line"></span><br><span class="line">![image047](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110124.png)</span><br><span class="line"></span><br><span class="line">![image049](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110133.png)</span><br><span class="line"></span><br><span class="line">![image051](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110141.png)</span><br><span class="line"></span><br><span class="line">![image053](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110150.png)</span><br><span class="line"></span><br><span class="line">图22-24：四种异常处理过程</span><br><span class="line"></span><br><span class="line">程序运行过程中不停乱按，包括回车：</span><br><span class="line"></span><br><span class="line">![image055](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110159.png)</span><br><span class="line"></span><br><span class="line">图25：运行过程乱按</span><br><span class="line"></span><br><span class="line">按Ctrl-C截图</span><br><span class="line"></span><br><span class="line">![image057](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110205.png)</span><br><span class="line"></span><br><span class="line">图26：按Ctrl+C</span><br><span class="line"></span><br><span class="line">按Ctrl-Z之后，运行ps jobs pstree fg kill 等命令，运行截屏如下：</span><br><span class="line"></span><br><span class="line">![image059](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110212.png)</span><br><span class="line"></span><br><span class="line">![image061](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110221.png)</span><br><span class="line"></span><br><span class="line">![image063](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110228.png)</span><br><span class="line"></span><br><span class="line">图27、28：Ctrl+Z之后各种指令结果</span><br><span class="line"></span><br><span class="line">说明异常与信号的处理：</span><br><span class="line"></span><br><span class="line">运行过程中乱按，输入被写入缓存区，不会对运行造成太大影响（除开某些特殊按键）。按Ctrl+C进程收到SIGINT信号，结束。按Ctrl+Z进程收到SIGSTP信号，进程被挂起，通过ps、jobs查看状态，使用fg命令将其调回前台，pstree命令以树状图显示进程间的关系。</span><br><span class="line"></span><br><span class="line">## 6.7本章小结</span><br><span class="line"></span><br><span class="line">本章主要介绍了进程的执行过程。具体包括概念与作用、Shell的作用与处理流程， fork和exccvc的执行过程，也从进程时间片、上下文切换用户模式和内核模式等方面介结了hello程序执行时的调度问题，异常与信号处理等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第7章 hello的存储管理</span><br><span class="line"></span><br><span class="line">## 7.1 hello的存储器地址空间</span><br><span class="line"></span><br><span class="line">**逻辑地址：** 一个项目（[存储单元](https://en.wikipedia.org/wiki/Computer_data_storage)、存储元件、网络主机）从正在执行的[应用程序](https://en.wikipedia.org/wiki/Application_program)的角度看来驻留的地址。是指由程序hello 产生的与段相关的偏移地址部分。</span><br><span class="line"></span><br><span class="line">**线性地址：** 是逻辑地址到物理地址变换之间的中间层。程序代码会产生逻辑地址，或者说是段中的偏移地址，加上相应段的基地址就生成了一个线性地址。</span><br><span class="line"></span><br><span class="line">**虚拟地址：** 在支持[虚拟内存](https://en.wikipedia.org/wiki/Virtual_memory)的系统中，在尝试访问之前，实际上可能没有任何物理内存映射到逻辑地址。访问触发操作系统的特殊功能，该功能重新编程 MMU 以将地址映射到某个物理内存，可能将该内存的旧内容写入磁盘并从磁盘读回内存应在新逻辑地址处包含的内容。在这种情况下，逻辑地址可以称为[虚拟地址](https://en.wikipedia.org/wiki/Virtual_address)。</span><br><span class="line"></span><br><span class="line">**物理地址：** 出现在CPU外部地址总线上的寻址物理内存的地址信号，是地址变换的最终结果地址。CPU通过地址总线的寻址，找到真实的物理内存对应地址。</span><br><span class="line"></span><br><span class="line">## 7.2 Intel逻辑地址到线性地址的变换-段式管理</span><br><span class="line"></span><br><span class="line">在Intel平台下，逻辑地址（logical address）是selector:offset这种形式，selector 是CS寄存器的值，offset是EIP寄存器的值。如果用selector去GDT（全局描述符表）里拿到segment base address（段基址）然后加上offset（段内偏移），这就得到了linear address。我们把这个过程称作 **段式内存管理** 。</span><br><span class="line"></span><br><span class="line">一个逻辑地址由两部分组成：段标识符和段内偏移量。段标识符是多位长的字段组成，称为段选择符，其中前面部分是一个索引号，后面部分可以从段描述符表中选择一个具体的段。程序过来一个逻辑地址，使用其段选择符的Index字段去索引段描述符表。将段描述符中的索引号对应的描述符字段和逻辑地址中的offset合并即得到了线性地址。</span><br><span class="line"></span><br><span class="line">## 7.3 Hello的线性地址到物理地址的变换-页式管理</span><br><span class="line"></span><br><span class="line">如果再把 linear address 切成四段，用前三段分别作为索引去PGD、PMD、Page Table里查表，最终就会得到一个页表项（Page Table Entry），那里面的值就是一页物理内存的起始地址，把它加上 linear address 切分之后第四段的内容（又叫页内偏移）就得到了最终的 physical address。我们把这个过程称作 **页式内存管理** 。</span><br><span class="line"></span><br><span class="line">先将线性地址分为 VPN+VPO 的形式， 然后再将VPN拆分成TLBT+TLBI 索引然后去TLB缓存里找所对应的PPN（物理页号），如果发生缺页情况则直接查找对应的PPN，找到PPN之后，将其与VPO组合变为PPN+VPO就是生成的物理地址了。</span><br><span class="line"></span><br><span class="line">## 7.4 TLB与四级页表支持下的VA到PA的变换</span><br><span class="line"></span><br><span class="line">一级页表中的每个PTE负责映射虚拟地址空间中一个片（chunk），这里每一 片都是由连续的页面组成的。如果片i中的每个页面都未被分配，那么一级 PTEi 就为空。依次类推，对二级到三级，三级到四级页表基本上也是如此。四级页表中的每个PTE都负责映射一个虚拟内存页面。具体步骤如下所示：</span><br><span class="line"></span><br><span class="line">开始时，MMU从虚拟地址中抽取出VPN，并且检查TLB，看它是否因为前面的某个内存引用缓存了PTE的一个副本。TLB从VPN中抽取出TLB索引和TLB 标记，查看组中是否有条目可以有效匹配，若有则命中，然后将缓存的PPN返回给MMU。如果TLB不命中，那么MMU就需要从主存中取出相应的PTE。现在，MMU有了形成物理地址所需要的所有东西，通过将来自PTE的PPN和来自虚拟地址的VPO连接起来，就形成了物理地址。</span><br><span class="line"></span><br><span class="line">如果TLB不命中，那么MMU必须从页表中的PTE中取出PPN，如果得到的 PTE是无效的，那么就产生一个缺页，内核必须调入合适的页面，重新运行这条加载指令。还有其他情况就不一一赘述了。</span><br><span class="line"></span><br><span class="line">![image065](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110241.png)</span><br><span class="line"></span><br><span class="line">图29：地址翻译过程</span><br><span class="line"></span><br><span class="line">## 7.5 三级Cache支持下的物理内存访问</span><br><span class="line"></span><br><span class="line">MMU发送物理地址给缓存，缓存从物理地址中抽取出缓存偏移CO、缓存组索引CI以及缓存标记CT。若CI组中存在标记与CT相匹配，则表示缓存命中，读出在偏移量CO处的数据字节，并将它返回给MMU。随后 MMU 将它传递回 CPU。如果不命中就依次去第二三级高级缓存去取相关数据或代码所在的块。</span><br><span class="line"></span><br><span class="line">## 7.6 hello进程fork时的内存映射</span><br><span class="line"></span><br><span class="line">当fork函数被当前进程调用时，内核为新进程创建各种数据结构，并分配给它一个唯一的 PID。为了给这个新进程创建虚拟内存，它创建了当前进程的mm\_struct、区域结构和页表的原样副本。它将两个进程中的每个页面都标记为只读，并将两个进程中的每个区域结构都标记为私有的写时复制。</span><br><span class="line"></span><br><span class="line">当fork在新进程中返回时，新进程现在的虚拟内存刚好和调用fork时存在的虚拟内存相同。当这两个进程中的任一个后来进行写操作时，写时复制机制就会创建新页面，因此，也就为每个进程保持了私有地址空间的抽象概念。</span><br><span class="line"></span><br><span class="line">## 7.7 hello进程execve时的内存映射</span><br><span class="line"></span><br><span class="line">execve函数在当前进程中加载并运行包含在可执行目标文件filename中的程序，用filename程序有效地替代了当前程序。加载并运行filename需要以下几个步骤:</span><br><span class="line"></span><br><span class="line">1. 删除已存在的用户区域。删除当前进程虚拟地址的用户部分中的已存在的区域结构。</span><br><span class="line">2. 映射私有区域。为新程序的代码、数据、bss和栈区域创建新的区域结构。所有这些新的区域都是私有的、写时复制的。代码和数据区域被映射为filename文件中的.text和.data区。bss区域是请求二进制零的，映射到匿名文件，其大小包含在filename中。栈和堆区域也是请求二进制零的，初始长度为零。</span><br><span class="line">3. 映射共享区域。如果filename程序与共享对象（或目标）链接，比如标准 C库libc.so那么这些对象都是动态链接到这个程序的，然后再映射到用户虚拟地址空间中的共享区域内。</span><br><span class="line">4. 设置程序计数器（PC)。execve做的最后一件事情就是设置当前进程上下文中的程序计数器，使之指向代码区域的人口点。</span><br><span class="line"></span><br><span class="line">下一次调度这个进程时，它将从这个入口点开始执行。Linux 将根据需要换入代码和数据页面。</span><br><span class="line"></span><br><span class="line">![image067](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110249.png)</span><br><span class="line"></span><br><span class="line">图30：内存映射结果</span><br><span class="line"></span><br><span class="line">## 7.8 缺页故障与缺页中断处理</span><br><span class="line"></span><br><span class="line">![image069](https://gitee.com/ifu18/blog-image/raw/master/2021/20210718110258.png)</span><br><span class="line"></span><br><span class="line">图31：缺页故障处理</span><br><span class="line"></span><br><span class="line">处理缺页要求硬件和操作系统内核协作完成：</span><br><span class="line"></span><br><span class="line">1. 处理器生成一个虚拟地址，并把它传送给MMU。</span><br><span class="line">2. MMU生成PTE地址，并从高速缓存/主存请求得到它。</span><br><span class="line">3. 高速缓存/主存向MMU返回PTE。</span><br><span class="line">4. PTE中的有效位是零，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。</span><br><span class="line">5. 缺页处理程序确定出物理内存中的牺牲页，如果这个页面已经被修改了，则把它换出到磁盘。</span><br><span class="line">6. 缺页处理程序页面调人新的页面，并更新内存中的PTE。</span><br><span class="line">7. 缺页处理程序返回到原来的进程，再次执行导致缺页的指令。CPU将引起缺页的虚拟地址重新发送给MMU。因为虚拟页面现在缓存在物理内存中，所以就会命中。</span><br><span class="line"></span><br><span class="line">## 7.9动态存储分配管理</span><br><span class="line"></span><br><span class="line">动态内存分配器维护着一个进程的虚拟内存区域，称为堆。分配器将堆视为一组不同大小的块的集合来维护。每个块就是一个连续的虚拟内存片，要么是已分配的，要么是空闲的。已分配的块显式地保留位供应用程序使用。空闲块可用来分配。空闲块保持空闲，直到它显式地被应用所分配。一个已分配的块保持已分配状态，直到它被释放，这种释放要么是应用程序显式执行的，要么是内存分配器自身隐式执行的。</span><br><span class="line"></span><br><span class="line">**隐式空闲链表：**</span><br><span class="line"></span><br><span class="line">任何实际的分配器都需要一些数据结构，允许它来区别块边界，以及区别已分配块和空闲块。大多数分配器将这些信息嵌入块本身。</span><br><span class="line"></span><br><span class="line">一个块是由一个字的头部、有效载荷，以及可能的一些额外的填充组成的。头部编码了这个块的大小（包括头部和所有的填充），以及这个块是已分配的还是空闲的。如果我们强加一个双字的对齐约束条件，那么块大小就总是 8 的倍数，且块大小的最低3位总是零。因此，我们只需要内存大小的高位，释放剩余的3位来编码其他信息。在这种情况中，我们用其中的最低位（已分配位）来指明这个块是已分配的还是空闲的。头部后面就是应用调用malloc时请求的有效载荷。有效载荷后面是一片不使用的填充块，其大小可以是任意的。</span><br><span class="line"></span><br><span class="line">**显式空闲链表：**</span><br><span class="line"></span><br><span class="line">把堆组织成一个双向空闲链表，在每个空闲块中，都包含一个pred（前驱）和succ（后继）指针。</span><br><span class="line"></span><br><span class="line">使用双向链表而不是隐式空闲链表，使首次适配的分配时间从块总数的线性 时间减少到了空闲块数量的线性时间。不过，释放一个块的时间可以是线性的， 也可能是个常数，这取决于我们所选择的空闲链表中块的排序策略，后进先出（LIFO）的顺序、地址顺序等。</span><br><span class="line"></span><br><span class="line">**分离的空闲链表：**</span><br><span class="line"></span><br><span class="line">分离存储，即维护多个空闲链表，其中每个链表中的块有大致相等的大小。一般的思路是将所有可能的块大小分成一些等价类，分配器维护着一个空闲链表数组，每个大小类一个空闲链表，按照大小的升序排列。当分配器需要一个大小为n的块时，它就搜索相应的空闲链表。如果不能找到合适的块与之匹配，它就搜索下一个链表，以此类推。两种基本的分离存储方法：简单分离存储和分离适配。</span><br><span class="line"></span><br><span class="line">## 7.10本章小结</span><br><span class="line"></span><br><span class="line">本章是关于储存管理的一章内容。主要从以下几个方面介绍储存形式以及读写过程等：hello的存储器地址空间、intel的段式管理、hello的页式管理，VA到PA的变换、物理内存访问、hello进程fork时的内存映射、execve时的内存映射、缺页故障与缺页中断处理、动态存储分配管理。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第8章 hello的IO管理</span><br><span class="line"></span><br><span class="line">## 8.1 Linux的IO设备管理方法</span><br><span class="line"></span><br><span class="line">**设备的模型化：文件**</span><br><span class="line"></span><br><span class="line">所有的 I/O 设备(例如网络、磁盘和终端)都被模型化为文件，而所有的输入和输出都被当 作对相应文件的读和写来执行。</span><br><span class="line"></span><br><span class="line">**设备管理：unix io 接口**</span><br><span class="line"></span><br><span class="line">这种将设备优雅地映射为文件的方式，允许 Linux 内核引 出一个简单、低级的应用接口，称为 Unix I/O, 这使得所有的输人和输出都能以一种统 一且一致的方式来执行：打开文件；Linux shell创建的每个进程开始时都有三个打开的文件：标准输入、标准输出和标准错误；改变当前的文件位置；读写文件；关闭文件。</span><br><span class="line"></span><br><span class="line">## 8.2 简述Unix IO接口及其函数</span><br><span class="line"></span><br><span class="line">**Unix IO 接口：**</span><br><span class="line"></span><br><span class="line">打开文件。一个应用程序通过要求内核打开相应的文件，来宣告它想要访问一个 I/O 设备。内核返回一个小的非负整数，叫做描述符，它在后续对此文件的所有操作中标识这个文件。内核记录有关这个打开文件的所有信息。应用程序只需记住这个描述符。</span><br><span class="line"></span><br><span class="line">Linux shell创建的每个进程开始时都有三个打开的文件：标准输入、标准输出和标准错误。头文件\&amp;lt; unistd.h\&amp;gt; 定义了常量 STDIN\_ FILENO、STDOUT\_FILENO 和 STDERR\_FILENO，它们可用来代替显式的描述符值。</span><br><span class="line"></span><br><span class="line">改变当前的文件位置。对于每个打开的文件，内核保持着一个文件位置k，初始为0。这个文件位置是从文件开头起始的字节偏移量。应用程序能够通过执行 seek操作，显式地设置文件的当前位置为是。</span><br><span class="line"></span><br><span class="line">读写文件。一个读操作就是从文件复制n\&amp;gt;0个字节到内存，从当前文件位置是开始，然后将k增加到k+n。给定一个大小为m字节的文件，当k≥m时执行读操作会触发一个称为 end-of-file(EOF)的条件，应用程序能检测到这个条件。在文件结尾处并没有明确的 &amp;quot;EOF符号&amp;quot;。</span><br><span class="line"></span><br><span class="line">关闭文件。当应用完成了对文件的访问之后，它就通知内核关闭这个文件。作为响应，内核释放文件打开时创建的数据结构，并将这个描述符恢复到可用的描述符池中。无论一个进程因为何种原因终止时，内核都会关闭所有打开的文件并释放它们的内存资源。</span><br><span class="line"></span><br><span class="line">**函数：**</span><br><span class="line"></span><br><span class="line">1. 打开和关闭文件</span><br><span class="line"></span><br><span class="line">进程是通过调用open函数来打开一个已存在的文件或者创建一个新文件，进程通过调用close函数关闭一个打开的文件。</span><br><span class="line"></span><br><span class="line">1. 读和写文件</span><br><span class="line"></span><br><span class="line">应用程序是通过分别调用read和write函数来执行输入和输出的。read函数从描述符为fd的当前文件位置复制最多n个字节到内存位置 buf。返回值-1表示一个错误，而返回值0表示EOF。否则，返回值表示的是实际传送的字节数量。write 函数从内存位置buf复制至多n个字节到描述符fd的当前文件位置。</span><br><span class="line"></span><br><span class="line">1. 用RIO包健壮地读写</span><br><span class="line"></span><br><span class="line">通过调用rio\_readn和rio\_writen函数，应用程序可以在内存和文件之间直接传送数据。</span><br><span class="line"></span><br><span class="line">1. 读取文件元数据</span><br><span class="line"></span><br><span class="line">应用程序能够通过调用stat和fstat函数，检索到关于文件的信息（有时也称为文件的元数据（metadata））。</span><br><span class="line"></span><br><span class="line">1. 读取目录内容</span><br><span class="line"></span><br><span class="line">应用程序可以用readdir系列函数来读取目录的内容。函数opendir以路径名为参数，返回指向目录流（directory stream）的指针。流是对条目有序列表的抽象，在这里是指目录项的列表。函数closedir关闭流并释放其所有的资源。</span><br><span class="line"></span><br><span class="line">## 8.3 printf的实现分析</span><br><span class="line"></span><br><span class="line">[https://www.cnblogs.com/pianist/p/3315801.html](https://www.cnblogs.com/pianist/p/3315801.html)</span><br><span class="line"></span><br><span class="line">首先，printf函数的函数体如下表示：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>int printf(const char *fmt, …) {<br>    int i;<br>    char buf[256];<br>    va_list arg = (va_list)((char*)(&amp;fmt) + 4);<br>    i = vsprintf(buf, fmt, arg);<br>    write(buf, i);<br>    return i;<br>}</p><pre><code>从vsprintf生成显示信息，到write系统函数，到陷阱-系统调用 int 0x80或syscall.字符显示驱动子程序：从ASCII到字模库到显示vram（存储每一个点的RGB颜色信息）。显示芯片按照刷新频率逐行读取vram，并通过信号线向液晶显示器传输每一个点（RGB分量）。该函数接受一个格式字符串是fmt，之后是一个变参列表。后面每一个参数都对应这格式字符串中的一个格式符。调用了两个函数：vsprintf和write。vsprintf程序按照格式fmt结合参数args生成格式化之后的字符串，并返回字串的长度。在printf中调用系统函数write(buf,i)将长度为i的buf输出。所以printf的实现就是：用参数匹配格式字符串，然后用vsprintf将结果字符串整理，最后用write函数输出。## 8.4 getchar的实现分析getchar()是最简单的一次读一个字符的函数，每次调用时从文本流中读入下一个字符，并将其作为结果值返回，返回值是int型。在没有输入或者输入字符有错的时候，getchar()函数将返回一个特殊值EOF。异步异常-键盘中断的处理：键盘中断处理子程序。接受按键扫描码转成ascii码，保存到系统的键盘缓冲区。getchar等调用read系统函数，通过系统调用读取按键ascii码，直到接受到回车键才返回。## 8.5本章小结本章介绍了Linux的IO设备管理方法，UNIX的IO接口及其函数，还介绍了printf和getchar两个函数的实现方法。Linux提供了少量的基于Unix I/O模型的系统级函数，它们允许应用程序打开、关闭、读和写文件，提取文件的元数据，以及执行I/O重定向。# 结论Hello的一生独白：1. 预处理：将hello.c变为文本文档hello.i文件2. 编译：将hello.i编译成为汇编文件hello.s3. 汇编：将hello.s会变成为可重定位目标文件 hello.o4. 链接：将hello.o与可重定位目标文件和动态链接库链接成为可执行目标程序 hello5. 创建子进程：shell进程调用fork为其创建子进程6. 运行程序：shell调用execve函数，加载运行当前进程的上下文中，execve调用启动加载器，映射虚拟内存，然后进入main函数。7. 结束：shell父进程回收子进程，内核删除为这个进程创建的所有数据结构。对计算机系统的设计与实现的深切感悟，你的创新理念，如新的设计与实现方法。用一种不同的方式向学生介绍计算机。排除了诸如硬件加法器和总线设计这样的主题。虽然谈及了机器语言，但是重点并不在于如何手工编写汇编语言，而是关注C语言编译器是如何将C语言的结构翻译成机器代码的，包括编译器是如何翻译指针、循环、过程调用以及开关（switch) 语句的。更进一步地，我们将更广泛和全盘地看待系统，包括硬件和系统软件，涵盖了包括链接、加载、进程、信号、性能优化、虚拟内存、I/O 以及网络与并发编程等在内的主题。# 附件所有的中间产物的文件名，及其作用。| **中间结果文件的名字** | **文件的作用** || --- | --- || hello.i | 修改了的源程序（文本） || hello.s | 汇编程序（文本） || hello.o | 可重定位目标程序（二进制） || hello | 可执行目标程序（二进制） || elf.txt | 可重定位目标ELF格式 || linked\_elf.txt | 可执行目标ELF格式 || objdump.txt | hello.o的反汇编代码 || objdump2.txt | hello的反汇编代码 |# 参考文献[1] https://bbs.pediy.com/thread-249833.htm[2] https://zh.wikipedia.org/wiki/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8[3] Randal E. Bryant, David R. O&amp;#39;Hallaron. 深入理解计算机系统[M]. 北京：机械工业出版社，2016.[4] https://www.cnblogs.com/losing-1216/p/4884483.html[5] [https://www.cnblogs.com/pianist/p/3315801.html](https://www.cnblogs.com/pianist/p/3315801.html)[6] [https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80](https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80)[7] [https://www.jianshu.com/p/8b37d10bc504](https://www.jianshu.com/p/8b37d10bc504)[8] https://www.zhihu.com/question/29918252/answer/163114415</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Chapter09</title>
      <link href="/2021/06/13/CSAPP/CSAPP-Chapter09/"/>
      <url>/2021/06/13/CSAPP/CSAPP-Chapter09/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>虚拟内存</strong>是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，它为每个进程提供了一个大的、一致的和私有的地址空间。</p><p>本章的前一部分描述<strong>虚拟内存工作原理</strong>，后一部分描述<strong>应用程序如何使用和管理虚拟内存</strong>。</p></blockquote><h1 id="9-1-物理和虚拟寻址"><a href="#9-1-物理和虚拟寻址" class="headerlink" title="9.1 物理和虚拟寻址"></a>9.1 物理和虚拟寻址</h1><p>**物理寻址 (physical addressing)**：计算机系统的主存被组织成一个由M个连续的字节大小的单元组成的数组。每字节都有一个唯一的物理地址（Physical Address, PA).</p><p><strong>物理地址应用</strong>：早期的PC，而诸如数字信号处理器、嵌入式微控制器（汽车、电梯、数字图像帧等）以及Cray超级计算机仍然继续使用这种寻址方式。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104257.jpg" alt="PhysicalAddressing"></p><p>**虚拟寻址 (virtual addressing)**：CPU 通过生成一个虚拟地址 (Virtual Address, VA)来访问主存，这<br>个虚拟地址在被送到内存之前先转换成适当的物理地址。</p><p>**地址翻译 (address translation)**：个虚拟地址转换为物理地址</p><p>**内存管理单元 (Memory Management Unit, MMU)**：利用存放在主存中的查询表来动态翻译虚拟地址，该表的内容由操作系统管理。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104330.jpg" alt="VirtualAddressing"></p><h1 id="9-2-地址空间"><a href="#9-2-地址空间" class="headerlink" title="9.2 地址空间"></a>9.2 地址空间</h1><ul><li>**地址空间 (address space)**：非负整数地址的有序集合 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="9.063ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 4006 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g></g></svg></mjx-container></li><li>**线性地址空间 (linear address space)**：地址空间中的整数是连续的</li><li>**虚拟地址空间 (virtual address space)**：<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="7.305ex" height="1.827ex" role="img" focusable="false" viewBox="0 -725.5 3228.8 807.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2221.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 个虚拟地址的集合，现代系统通常支持32位或者64位虚拟地址空间<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="16.352ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 7227.8 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4172.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4617.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(5727.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6727.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></li><li>**物理地址空间 (physical address space)**：<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="8.119ex" height="1.827ex" role="img" focusable="false" viewBox="0 -725.5 3588.4 807.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1328.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2384.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 个（不要求，但假设）物理地址的集合<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="16.721ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 7390.8 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4172.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4617.3,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(5890.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6890.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></li></ul><p><strong>虚拟地址思想</strong>：允许每个数据对象有多个独立的地址，每个地址都选自一个不同的地址空间。</p><hr><h1 id="9-3-虚拟内存作为缓存工具"><a href="#9-3-虚拟内存作为缓存工具" class="headerlink" title="9.3 虚拟内存作为缓存工具"></a>9.3 虚拟内存作为缓存工具</h1><p>虚拟内存被组织为一个由存放在<strong>磁盘</strong>上的 N 个连续的字节大小的单元组成的<strong>数组</strong>。每字节都有一个唯一的虚拟地址，作为到数组的索引。磁盘上数组的内容被<strong>缓存在主存</strong>中。</p><p>VM 系统通过将虚拟内存分割为称为<strong>虚拟页</strong> (Virtual Page, VP)的大小固定的块来作为磁盘（低层）和主存（高层）之间的<strong>传输单元</strong>，页面大小 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="10.912ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 4823.2 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(1028.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2084.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mi" transform="translate(3023.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">字</text></g><g data-mml-node="mi" transform="translate(3923.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">节</text></g></g></g></svg></mjx-container><br>相似地，物理内存也分为<strong>物理页</strong> (Physical Page, PP)，大小也为 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="5.771ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 2551 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(751,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">字</text></g><g data-mml-node="mi" transform="translate(1651,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">节</text></g></g></g></svg></mjx-container> 物理页也被称为<strong>页帧</strong>。</p><table>  <tbody><tr>    <td colspan="2">虚拟页面三种状态</td>  </tr>  <tr>    <td>未分配</td>     <td>VM 系统还未分配(或者创建）的页。未分配的块没有任何数据和它们相关联，因此也就不占用任何磁盘空间（虚拟页也是根据需要创建的）。</td>  </tr>  <tr>    <td>已缓存</td>     <td>当前已缓存在物理内存中的已分配页。</td>  </tr>  <tr>    <td>未缓存</td>     <td>当未缓存在物理内存中的已分配页。</td>  </tr></tbody></table><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104426.jpg" alt="example1"></p><p><strong>使用虚拟内存优点</strong></p><ul><li>有效使用主存：使用DRAM作为作为部分虚拟地址空间的缓存</li><li>简化内存管理：每个进程都使用统一的线性地址空间</li><li>独立空间地址：一个进程不能影响其他进程内存，用户程序无法获得特权内核信息和代码</li></ul><h2 id="9-3-1-DRAM-缓存的组织结构"><a href="#9-3-1-DRAM-缓存的组织结构" class="headerlink" title="9.3.1 DRAM 缓存的组织结构"></a>9.3.1 DRAM 缓存的组织结构</h2><p>DRAM 缓存的组织结构完全是由巨大的不命中开销驱动的。DRAM比SRAM要慢大约10倍，而磁盘要比DRAM慢大约100000多倍。</p><p>由于大的不命中处罚和访问第一个字节开销：<strong>虚拟页尺寸</strong>通常是4KB~4MB</p><p>由于大的不命中处罚，<strong>DRAM 缓存全相联</strong><br>任何虚拟页都可以放置在任何的物理页中。？？？？？？？？？？？？？<br>需要一个更大的映射函数，不同于硬件对SRAM缓存</p><p>硬件对 SRAM 缓存相比，操作系统对 DRAM 缓存使用了更复杂精密的替换算法。</p><p>DRAM 缓存总是<strong>使用写回，而不是直写</strong>。</p><h2 id="9-3-2-页表"><a href="#9-3-2-页表" class="headerlink" title="9.3.2 页表"></a>9.3.2 页表</h2><p>虚拟内存系统必须有某种方法来判定一个虚拟页是否缓存在 DRAM 中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页中。如果不命中，系统必须判断这个虚拟页存放在磁盘的哪个位置，在物理内存中选择一个牺牲页，并将虚拟页从磁盘复制到 DRAM 中，替换这个牺牲页。</p><p><strong>页表将虚拟页映射到物理页</strong>：页表就是一个页表条目 (Page Table Entry, PTE)的数组，将虚拟页地址映射到物理页地址。每个页在页表中一个固定偏移量处都有一个 PTE。</p><p>我们将假设每个 PTE 是由一个<strong>有效位 (valid bit)<strong>和一个</strong>n位地址</strong>字段组成的。<strong>有效位</strong>表明了该虚拟页当前<em>是否被缓存在 DRAM</em> 中。</p><ul><li>有效位1，地址字段表示 DRAM 中相应的物理页的起始位置，<strong>这个物理页中缓存了该虚拟页</strong>。</li><li>有效位0，那么一个空地址表示这个虚拟页还未被分配。</li><li>有效位0，地址不为空，这个地址就指向该虚拟页在磁盘上的起始位置。</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105342.jpg" alt="PageTable"></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="18.854ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 8333.3 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(751,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1455,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(2219,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">数</text></g><g data-mml-node="mi" transform="translate(3119,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mo" transform="translate(4296.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(5352.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6582,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mi" transform="translate(7582.3,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container> 其中，n 为虚拟地址大小，P 为页大小。</p><h2 id="9-3-3-页命中-Page-Hit"><a href="#9-3-3-页命中-Page-Hit" class="headerlink" title="9.3.3 页命中 Page Hit"></a>9.3.3 页命中 Page Hit</h2><p><strong>页命中</strong>：虚拟内存中的一个字存在于物理内存中 (DRAM缓存命中)。虚拟地址 <strong>-&gt;</strong> 定位PTE <strong>-&gt;</strong> 从内存读取</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104837.jpg" alt="PageHit"></p><h2 id="9-3-4-缺页-Page-Fault"><a href="#9-3-4-缺页-Page-Fault" class="headerlink" title="9.3.4 缺页 Page Fault"></a>9.3.4 缺页 Page Fault</h2><p><strong>缺页</strong>：引用虚拟内存中的字，不在物理内存中 (DRAM 缓存不命中)。</p><p><strong>缺页处理</strong>：关键是按需<em>页面调度/交换</em>，当有不命中时页从磁盘<em>换入</em>（或者页面<em>调入</em>）DRAM 和从 DRAM <em>换出</em>（或者页面<em>调出</em>）磁盘。</p><ol><li>从有效位判断未缓存，触发缺页异常</li><li>调用内核中的缺页异常处理程序，该程序会选择一个牺牲页，牺牲页如果已经被修改则复制回磁盘。</li><li>内核从磁盘复制 VP 到内存中的 PP, 更新 PTE，随后返回</li><li>重新启动导致缺页的指令，命中！</li></ol><table><thead><tr><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104858.jpg" alt="PageFault1"></th><th><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104910.jpg" alt="PageFault2"></th></tr></thead></table><h2 id="9-3-5-分配页面"><a href="#9-3-5-分配页面" class="headerlink" title="9.3.5 分配页面"></a>9.3.5 分配页面</h2><p>操作系统分配一个新的虚拟页面（如malloc结果），内核在磁盘上分配 VP5，将 PTE5 指向这个新创建的页面。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718104927.jpg" alt="AllocatePage"></p><h2 id="9-3-6-局部性"><a href="#9-3-6-局部性" class="headerlink" title="9.3.6 局部性"></a>9.3.6 局部性</h2><ul><li>虚拟内存看上去效率低，但是工作相当好，归功于“局部性”。</li><li>程序引用的不同页面的总数可能超出物理内存总的大小，但是局部性原则保证了在任意时刻，程序将趋向于在一个<strong>较小的活动页面(active page)集合</strong>上工作，这个集合叫做**工作集(working set)或者常驻集合(resident set)**。程序的局部性越好，工作集越小。</li><li><strong>工作集大小 &lt; 物理内存大小</strong>：初始开销，即将工作集页面调度到内存中之后，接下来对这个工作集的引用将导致命中，而不会产生额外的磁盘流量。</li><li><strong>工作集大小 &gt; 物理内存大小</strong>：**抖动（thrashing)**页面不断换进换出，导致程序性能暴跌。</li></ul><hr><h1 id="9-4-虚拟内存作为内存管理的工具"><a href="#9-4-虚拟内存作为内存管理的工具" class="headerlink" title="9.4 虚拟内存作为内存管理的工具"></a>9.4 虚拟内存作为内存管理的工具</h1><p><strong>核心思想</strong>：每个进程都拥有独立的虚拟地址空间。</p><ul><li><strong>简化链接</strong><ul><li>每个程序都有相似的虚拟地址空间</li><li>代码、数据和堆都使用相同的起始地址</li><li>每个进程的内存映像使用相同的基本格式，这样的一致性极大地简化了链接器的设计和实现，允许链接器生成完全链接的可执行文件，这些可执行文件是独立于物理内存中代码和数据的最终位置的。</li></ul></li><li><strong>简化加载</strong><ul><li>Linux 加载器 (execve)为代码和数据段分配虚拟页，把它们标记为无效的（即未被缓存的）将页表条目指向目标文件中适当的位置。</li><li>每个页面被初次引用时，虚拟内存系统会按照需要自动的调入数据页。</li></ul></li><li><strong>简化内存分配</strong><ul><li>当一个运行在用户进程中的程序要求额外的堆空间时（如调用 malloc），操作系统分配一个适当数字，如k个连<strong>续的虚拟内存页面</strong>，并且将它们映射到物理内存中任意位置的k个任意的物理页面。由于页表工作的方式，操作系统没有必要分配是个连续的物理内存页面。物理页面可以随机地分散在物理内存中。</li><li>每个虚拟内存页面都要映射到一个物理页面</li><li>一个虚拟内存页面每次可以分配到不同的物理页面</li></ul></li><li><strong>简化共享</strong><ul><li>不同的虚拟页面映射到相同的物理页面</li><li>一般来讲还是需要进程共享代码和数据，而不是给每个进程创建完全私有的代码、数据、堆以及栈区域</li></ul></li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105003.jpg" alt="Management"></p><hr><h1 id="9-5-虚拟内存作为内存保护的工具"><a href="#9-5-虚拟内存作为内存保护的工具" class="headerlink" title="9.5 虚拟内存作为内存保护的工具"></a>9.5 虚拟内存作为内存保护的工具</h1><p>在PTE（页表条目）上扩展<strong>许可位</strong>来控制对一个虚拟页面内容的访问，内存管理单元 (MMU) 每次访问数据都要检查许可位。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105024.jpg" alt="Protection"></p><p>如图所示三个许可位：SUP 位表示进程是否必须运行在内核(超级用户）模式下才能访问该页。运行在内核模式中的进程可以访问任何页面，但是运行在用户模式中的进程只允许访问那些 SUP 为 0 的页面。READ 位和 WRITE 位控制对页面的读和写访问。</p><hr><h1 id="9-6-地址翻译"><a href="#9-6-地址翻译" class="headerlink" title="9.6 地址翻译"></a>9.6 地址翻译</h1><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105038.jpg" alt="symbols"></p><p>地址翻译是一个 iV 元素的虚拟地址空间（VAS)中的元素和一个 M 元素的物理地址空间(PAS)中元素之间的映射:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.017ex" xmlns="http://www.w3.org/2000/svg" width="25.329ex" height="3.165ex" role="img" focusable="false" viewBox="0 -949.5 11195.4 1399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1051,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(1801,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(2829.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(3385.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(4154.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(4904.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(5827.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7105.1,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(7856.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(8606.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(9417.8,0) translate(0 -0.5)"><path data-c="22C3" d="M56 911Q58 926 71 938T103 950Q120 950 134 939T152 911Q153 907 153 463Q153 16 154 6Q165 -143 279 -247T556 -352Q716 -352 830 -248T956 6Q957 16 957 463Q957 907 958 911Q962 928 975 939T1006 950T1037 939T1054 911Q1055 906 1055 451Q1054 -5 1053 -16Q1029 -207 889 -328T555 -449Q363 -449 226 -331T62 -45Q57 -16 57 25T55 451Q55 906 56 911Z"></path></g><g data-mml-node="mi" transform="translate(10695.4,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g></g></g></svg></mjx-container></p><p>$$<br>MAP(A)=\left{<br>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.59ex" xmlns="http://www.w3.org/2000/svg" width="77.693ex" height="2.312ex" role="img" focusable="false" viewBox="0 -761 34340.2 1022"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-11)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(783,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1027.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1472.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">虚</text></g><g data-mml-node="mi" transform="translate(2372.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">拟</text></g><g data-mml-node="mi" transform="translate(3272.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">地</text></g><g data-mml-node="mi" transform="translate(4172.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">址</text></g><g data-mml-node="mi" transform="translate(5072.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(5822.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">处</text></g><g data-mml-node="mi" transform="translate(6722.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(7622.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">数</text></g><g data-mml-node="mi" transform="translate(8522.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">据</text></g><g data-mml-node="mi" transform="translate(9422.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">在</text></g><g data-mml-node="mi" transform="translate(10322.1,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(11073.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(11823.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(12468.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(13368.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">物</text></g><g data-mml-node="mi" transform="translate(14268.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">理</text></g><g data-mml-node="mi" transform="translate(15168.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">地</text></g><g data-mml-node="mi" transform="translate(16068.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">址</text></g><g data-mml-node="msup" transform="translate(16968.1,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(783,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mi" transform="translate(17995.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">处</text></g><g data-mml-node="mtext" transform="translate(18895.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(19145.6,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g><g data-mml-node="mo" transform="translate(19645.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(20090.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">虚</text></g><g data-mml-node="mi" transform="translate(20990.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">拟</text></g><g data-mml-node="mi" transform="translate(21890.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">地</text></g><g data-mml-node="mi" transform="translate(22790.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">址</text></g><g data-mml-node="mi" transform="translate(23690.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(24440.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">处</text></g><g data-mml-node="mi" transform="translate(25340.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(26240.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">数</text></g><g data-mml-node="mi" transform="translate(27140.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">据</text></g><g data-mml-node="mi" transform="translate(28040.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">不</text></g><g data-mml-node="mi" transform="translate(28940.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">在</text></g><g data-mml-node="mi" transform="translate(29840.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">物</text></g><g data-mml-node="mi" transform="translate(30740.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">理</text></g><g data-mml-node="mi" transform="translate(31640.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">内</text></g><g data-mml-node="mi" transform="translate(32540.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">存</text></g><g data-mml-node="mi" transform="translate(33440.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g></g></g></g></g></g></svg></mjx-container><br>  \right.<br>$$</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105055.jpg" alt="AddressTranslationBasedOnPageTable"></p><p>CPU 中的一个控制寄存器，页表基址寄存器（Page Table Base Register, PTBR)指向当前页表。n 位的虚拟地址包含两个部分：一个 p 位的<strong>虚拟页面偏移</strong>(Virtual Page Offset，VPO)和一个(n-p)位的<strong>虚拟页号</strong>(Virtual Page Number, VPN)。MMU 利用 VPN 来选择适当的 PTE。例如，VPN 0 选择 PTE 0, VPN 1选择 PTE 1，以此类推。将页表条目中<strong>物理页号</strong>(Physical Page Number, PPN)和虚拟地址中的 VPO 串联起来，就得到相应的物理地址。注意，因为<em>物理和虚拟页面都是 P 字节</em>的，所以物理页面偏移(Physical Page Offset, PPO)和 VPO 是相同的。</p><p><strong>地址翻译：页面命中</strong></p><ol><li>处理器生成一个虚拟地址，并把它传送给 MMU。</li><li>MMU 生成 PTE 地址，并从高速缓存/主存请求得到它。<ul><li>PTE 地址(PTEA)：**%CR3 + 页号 * 字节数**</li></ul></li><li>高速缓存/主存向 MMU 返回 PTE。</li><li>MMU 构造物理地址，并把它传送给高速缓存/主存。</li><li>高速缓存/主存返回所请求的数据字给处理器。</li></ol><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105258.jpeg"></p><p><strong>地址翻译：缺页异常</strong></p><ol><li>处理器生成一个虚拟地址，并把它传送给 MMU。</li><li>MMU 生成 PTE 地址，并从高速缓存/主存请求得到它。<ul><li>PTE 地址(PTEA)：**%CR3 + 页号 * 字节数**</li></ul></li><li>高速缓存/主存向 MMU 返回 PTE。</li><li>PTE 中的有效位是零，所以 MMU 触发了一次异常，传递 CPU 中的控制到操作系统内核中的缺页异常处理程序。</li><li>缺页处理程序确定出物理内存中的牺牲页，如果这个页面已经被修改了，则把它换出到磁盘（写回策略）。</li><li>缺页处理程序页面调入新的页面，并更新内存中的 PTE。</li><li>缺页处理程序返回到原来的进程，再次执行导致缺页的指令。</li></ol><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105244.jpg" alt="TranslationPageFault"></p><h2 id="9-6-1-结合高速缓存和虚拟内存"><a href="#9-6-1-结合高速缓存和虚拟内存" class="headerlink" title="9.6.1 结合高速缓存和虚拟内存"></a>9.6.1 结合高速缓存和虚拟内存</h2><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105123.jpg" alt="CacheAndMemory"></p><h2 id="9-6-2-利用-TLB-加速地址翻译"><a href="#9-6-2-利用-TLB-加速地址翻译" class="headerlink" title="9.6.2 利用 TLB 加速地址翻译"></a>9.6.2 利用 <strong>TLB</strong> 加速地址翻译</h2><p>页表条目 (PTEs) 与其他内存数据字一样缓存在 L1中。每次 CPU 产生一个虚拟地址，MMU 就必须查阅一个 PTE, 以便将虚拟地址翻译为物理地址。</p><ul><li>PTE可能被其他数据引用所替换/驱逐，导致不命中，从内存多取一次数据，代价是几十到几百个周期。</li><li>PTE 碰巧缓存在 L1 中（Cache 命中），那么开销仍需要 1~2 个周期。</li></ul><p><strong>翻译后备缓冲器 (Translation Lookaside Buffer, TLB)<strong>：MMU中一个小的具有</strong>高相联度</strong>的存储集合。</p><p>用于<strong>组选择和行匹配</strong>的索引和标记字段是从虚拟地址中的<strong>虚拟页号</strong>中提取出来的。如果 TLB 有： <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.506ex" height="2.121ex" role="img" focusable="false" viewBox="0 -855.6 2875.8 937.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2037.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container> 个组，那么 TLB 索引(TLBI)是由 VPN 的 t 个最低位组成的，而 TLB 标记(TLBT)是由 VPN 中剩余的位组成的。</p><ol><li><p>CPU 产生一个虚拟地址.</p></li><li><p>MMU 根据 VPN 标记索引</p></li><li><p>从 TLB 中取出相应的 PTE</p></li></ol><p>  <img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105203.jpg" alt="VPNTLBPTE"></p><ol start="4"><li><p>MMU 将这个虚拟地址翻译成一个物理地址，并且将它发送到高速缓存/主存。</p></li><li><p>高速缓存/主存将所请求的数据字返回给 CPU。</p></li></ol><p>当 TLB 不命中时，MMU 必须从 L1 缓存中取出相应的 PTE。新取出的 PTE 存放在 TLB 中，可能会覆盖一个已经存在的条目。因为局部性，TLB不命中很少发生。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718105220.jpg" alt="TLB"></p><h2 id="9-6-3-多级页表"><a href="#9-6-3-多级页表" class="headerlink" title="9.6.3 多级页表"></a>9.6.3 多级页表</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记三——软件构造过程与配置管理</title>
      <link href="/2021/06/09/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
      <url>/2021/06/09/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><font color="red"><strong>重点掌握：软件开发过程与版本控制工具</strong></font></p><h1 id="Software-Development-Life-Cycle-SDLC-软件开发生命圈（了解即可）"><a href="#Software-Development-Life-Cycle-SDLC-软件开发生命圈（了解即可）" class="headerlink" title="Software Development Life Cycle (SDLC) 软件开发生命圈（了解即可）"></a>Software Development Life Cycle (SDLC) 软件开发生命圈（了解即可）</h1><p>从无到有，从有到好。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144052.jpg" alt="SDLC"></p><hr><h1 id="Traditional-Software-Process-Models"><a href="#Traditional-Software-Process-Models" class="headerlink" title="Traditional Software Process Models"></a>Traditional Software Process Models</h1><blockquote><p><strong>要求</strong></p><p>区别不同开发过程模型的异同</p><p>根据不同<em>场景</em>给出相应<em>模型</em></p></blockquote><ul><li><strong>线性过程 Linear</strong>：顺序，要求一点要明确，难以更改</li><li><strong>迭代过程 Iterative</strong>：每个阶段给用户反馈，用户需求不明确</li></ul><p><strong>选择合适模型依据</strong>：用户参与程度，适应变化能力，开发效率，管理复杂段，开发出的软件质量</p><h2 id="瀑布过程-Waterfall-Linear-non-interative"><a href="#瀑布过程-Waterfall-Linear-non-interative" class="headerlink" title="瀑布过程 Waterfall (Linear, non-interative)"></a>瀑布过程 Waterfall (Linear, non-interative)</h2><p>线性推进、阶段划分清楚、整体推进、无迭代、管理简单</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="124.589ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 55068.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1518,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(1951,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2417,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2920,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3281,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3626,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4111,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4988.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(6266.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6611.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7211.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7556.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(7917.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8262.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8791.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(9152.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9497.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9982.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10860.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(12138.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(12667.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13267.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(13796.1,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(14094.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14584.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(15053.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15398.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(16144.9,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(17422.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(17942.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(18408.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(18877.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(19222.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(19699.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(20577.4,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(21855.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(22288.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(22773.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(23373.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(23842.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(24203.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(24654.2,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(25226.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(25659.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(26020.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(26365.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(26850.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(27728,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(29005.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(29366.8,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(29832.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(30301.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(30662.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(31007.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(31607.8,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(32362.6,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(33640.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(33985.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(34863.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(35366.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(35664.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(36130.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(37008.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(37474.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(38074.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(38435.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(38964.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(39325.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(39670.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(40155.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(41033.1,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(42310.9,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(42795.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(43261.9,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(43712.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(44057.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(44607.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(44952.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(45385.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(45914.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(46275.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(46620.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(47105.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(47983.7,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(49261.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(50139.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(50668.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(51013.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(51613.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(51974.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(52440.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(53040.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(53569.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(54169.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(54602.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></g></svg></mjx-container></p><p><strong>无法适应需求增加/变化(prohibitively costly)</strong></p><p>用户只在最后一个阶段看到？？</p><h2 id="增量过程-Incremental-non-iterative"><a href="#增量过程-Incremental-non-iterative" class="headerlink" title="增量过程 Incremental (non-iterative)"></a>增量过程 Incremental (non-iterative)</h2><p>线性推进、<strong>增量式（多个瀑布的串行</strong>、无迭代、比较容易适应需求的增加</p><p>系统切成小模块，每个模块/增量Waterfall，每个模块都要能运行，模块之间不影响，模块接口要简单，要求比较稳定。</p><h2 id="V字模型-V-Model-for-verification-and-validation"><a href="#V字模型-V-Model-for-verification-and-validation" class="headerlink" title="V字模型 V-Model (for verification and validation)"></a>V字模型 V-Model (for verification and validation)</h2><p><strong>瀑布模型的扩展开发，强调每个阶段测试</strong></p><p>瀑布阶段在code阶段之后向上弯曲，对 Life Cycle 的每个阶段及相关阶段进行测试。</p><h2 id="原型过程-Prototyping-iterative"><a href="#原型过程-Prototyping-iterative" class="headerlink" title="原型过程 Prototyping (iterative)"></a>原型过程 Prototyping (iterative)</h2><p><strong>迭代</strong>：开发出来之后由<strong>用户试用/评审</strong>，发现问题反馈给开发者，开发者修改原有的实现，继续交给用户评审。在这个过程中，<strong>用户需求不明确</strong>，循环往复这个过程，直到用户满意为止。时间代价高，但开发质量也高。</p><h2 id="螺旋模型-Spiral-iterative"><a href="#螺旋模型-Spiral-iterative" class="headerlink" title="螺旋模型 Spiral (iterative)"></a>螺旋模型 Spiral (iterative)</h2><ul><li><strong>适用于非常复杂的过程</strong></li><li><strong>多轮迭代基本遵循瀑布模式</strong> </li><li>每轮迭代有明确的目标，遵循“原型”过程，进行<strong>严格的风险分析</strong>，方可进入下一轮迭代</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144113.jpg" alt="Spiral"></p><hr><h1 id="Agile-Development-敏捷开发"><a href="#Agile-Development-敏捷开发" class="headerlink" title="Agile Development 敏捷开发"></a>Agile Development 敏捷开发</h1><blockquote><p>敏捷开发：通过快速迭代和小规模的持续改进，以快速适应变化。短周期迭代。</p></blockquote><p>将任务划分成一个个小规模的任务，因此较小的团队也能够适应大规模软件的开发。在每个小步骤的迭代中，用户可以参与开发，软件可以随时修正，质量因此得到了保证。因此，敏捷开发是一次次小迭代，将任务细分成一个个小任务，在每个小任务上完成迭代。</p><p><strong>敏捷宣言 Agile Manifesto</strong></p><ul><li>个人和交互高于过程和工具</li><li>工作软件高于全面的文档（不需要文档）</li><li>客户合作高于合同谈判（客户参与）</li><li>应对变化高于遵循计划（快速适应变化）</li></ul><p>比原型模型更适应于满足客户需求，风险较低</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="49.756ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 21992 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1227,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1572,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1870,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2613.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3669.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">增</text></g><g data-mml-node="mi" transform="translate(4569.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mo" transform="translate(5691.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6692,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">迭</text></g><g data-mml-node="mi" transform="translate(7592,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">代</text></g><g data-mml-node="mi" transform="translate(8492,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(9392,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">每</text></g><g data-mml-node="mi" transform="translate(10292,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">次</text></g><g data-mml-node="mi" transform="translate(11192,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">迭</text></g><g data-mml-node="mi" transform="translate(12092,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">代</text></g><g data-mml-node="mi" transform="translate(12992,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">处</text></g><g data-mml-node="mi" transform="translate(13892,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">理</text></g><g data-mml-node="mi" transform="translate(14792,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">一</text></g><g data-mml-node="mi" transform="translate(15692,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">个</text></g><g data-mml-node="mi" transform="translate(16592,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">小</text></g><g data-mml-node="mi" transform="translate(17492,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">规</text></g><g data-mml-node="mi" transform="translate(18392,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">模</text></g><g data-mml-node="mi" transform="translate(19292,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">增</text></g><g data-mml-node="mi" transform="translate(20192,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(21092,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></svg></mjx-container></p><p><strong>极限编程 (XP, eXtreme Programming)</strong></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144130.jpg" alt="XP"></p><p>协作编程（两人编程）、测试驱动、测试与编程绑定</p><p>极限编程关注于测试驱动的开发(TDD)，自动化构建、持续集成、持续交付。</p><hr><h1 id="Software-Configuration-Management-SCM-and-Version-Control-System-VCS-软件配置管理与版本控制系统"><a href="#Software-Configuration-Management-SCM-and-Version-Control-System-VCS-软件配置管理与版本控制系统" class="headerlink" title="Software Configuration Management (SCM) and Version Control System (VCS) 软件配置管理与版本控制系统"></a>Software Configuration Management (SCM) and Version Control System (VCS) 软件配置管理与版本控制系统</h1><p>SCM 软件配置管理：追踪和控制软件的变化。</p><p>SCI (Software Configuration Item) 软件配置项: 软件中发生变化的基本单元（如文件）。</p><p>基线：软件持续变化过程中的“<strong>稳定</strong>时刻”（例如：对外发布的版本）。</p><p>CMDB：配置管理数据库（存储软件的各配置项随时间发生变化的信息+基线），分为<strong>本地和远程</strong></p><p><em>版本</em>：为软件的任一特定时刻（Moment）的形态指派一个唯一的编号，作为“身份标识”</p><h2 id="Why-version-control-is-required"><a href="#Why-version-control-is-required" class="headerlink" title="Why version control is required"></a>Why version control is required</h2><ul><li>for individuals<ol><li>Reverting to a past version 回滚到上一个版本</li><li>Comparing two different versions 比较两个版本的差异</li><li>Pushing full version history to another location 备份软件版本历史</li><li>Pulling history back from that location 获取备份</li><li>Merging versions that are offshoots of the same earlier version 合并</li></ol></li><li>for teamwork<ol><li>Communications and share/merge works among multiple developers 在多个开发者之间<strong>共享和协作</strong></li><li>Logging individualized works of different developers for auditing 记录每个开发者的动作，便于“审计”</li></ol></li></ul><h2 id="Version-control-terminology-版本控制术语"><a href="#Version-control-terminology-版本控制术语" class="headerlink" title="Version control terminology 版本控制术语"></a>Version control terminology 版本控制术语</h2><ul><li><strong>Repository</strong>: a local or remote store of the <strong>versions</strong> in a project 仓库：即于SCM（软件配置管理）中的CMDB（配置管理数据库）</li><li><strong>Working copy</strong>: a local, editable copy of a project that we can work on 工作拷贝：在<strong>开发者本地</strong>机器上的一份项目拷贝</li><li>File: a single file in the project 文件：一个独立的配置项</li><li>Version or revision: a record of the contents of the project at a point in time 版本：在某个特定时间点的所有文件的共同状态</li><li>Change or diff: the difference between two versions 变化：即code churn，两个版本之间的差异</li><li>Head: the current version <strong>HEAD</strong>：程序员正在其上工作的版本</li></ul><h2 id="Version-Control-System-VCS"><a href="#Version-Control-System-VCS" class="headerlink" title="Version Control System (VCS)"></a>Version Control System (VCS)</h2><p><strong>三类版本控制系统</strong></p><ul><li>Local VCS 本地版本控制系统</li><li><ul><li>仓库存储于开发者<strong>本地</strong>机器无法共享和协作。</li></ul></li><li>Centralized VCS（集中式版本控制系统）</li><li><ul><li>仓库存储于<strong>独立的服务器</strong>，支持多开发者之间的协作</li></ul></li><li>Distributed VCS（分布式版本控制系统）</li><li><ul><li>仓库存储于<strong>独立的服务器+每个开发者的本地</strong>机器</li></ul></li></ul><hr><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><blockquote><p>版本图 <strong>&lt;–&gt;</strong> git命令</p><p>git文件状态 <strong>–&gt;</strong> 目录</p></blockquote><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144148.jpg" alt="gitManagement"></p><h2 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h2><blockquote><p><strong>创建</strong>本地仓库：git init</p><p>文件<strong>添加</strong>到本地仓库：git add <file></file></p><p>文件<strong>提交</strong>到本地仓库：git commit -m “commit message”</p><p>查看工作区状态：git status</p><p>比较差异修改：git diff</p><p>回到上一个版本：git reset –hard HEAD^</p><p>穿越到指定提交：git reset –hard <commit></commit></p><p>清空暂存区：git rm –cached</p><p>丢弃工作区更改: git checkout – <file></file></p><p>丢弃暂存区更改: git reset HEAD <file></file></p><p>丢弃本地版本库更改: git reset –hard HEAD^</p><p>添加远程仓库<strong>关联</strong>：git remote add origin <url></url></p><p>创建分支：git branch <branch name=""></branch></p><p>切换到分支：git checkout <branch name=""></branch></p><p>创建并切换分支：git checkout -b <branch name=""></branch></p><p>合并指定分支到当前分支：git merge <branch name="">: 如果是把一个做了更改的分支合并到一个未作更改的分支，那么就将未作更改的分支的<strong>指针移到做过更改分支的指针的位置</strong>。如果两个分支都做了更改，那么就找到更改的共同的祖先节点，以祖先节点为开始，将两个分支所有做出的<strong>更改都放在一起</strong>，在工作分支上形成一个<strong>新的节点</strong>。</branch></p><p>删除分支：git branch -d <branch name="">: 只是删除分支指针，没有删除在该分支上的commit</branch></p></blockquote><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144223.jpg" alt="gitBranch1"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144207.jpg" alt="gitBranch2"></p><blockquote><p>clone: git clone -b <btanch name=""> <url></url></btanch></p><p>git push -u origin master</p><p>git push <remote name=""> <branch name="">：远程端若更改后要先与本地端合并后才能push</branch></remote></p><p>git pull <remote name=""> <branch name="">: 从远程获取最新版本并merge到本地</branch></remote></p><p>git fetch <remote name=""> <branch name="">: 从远程获取最新版本到本地，不会自动merge</branch></remote></p></blockquote><h2 id="Git-repository"><a href="#Git-repository" class="headerlink" title="Git repository"></a>Git repository</h2><ul><li><strong>.git</strong> directory: <strong>本地</strong>的 CMDB（配置管理数据库）</li><li>Working directory 工作目录：本地文件系统</li><li>Staging area 暂存区：隔离工作目录和Git仓库</li></ul><ul><li>已修改 Modified: different between file in <strong>working directory</strong> and file in <strong>git directory</strong></li><li>已暂存 Staged: file added into staging area</li><li>已提交 Committed: file keep <strong>same in working directory and git directory</strong></li></ul><h2 id="Git-Object-Graph"><a href="#Git-Object-Graph" class="headerlink" title="Git Object Graph"></a>Git Object Graph</h2><p><strong>Object Graph: 版本演化关系图，是一个有向无环图。</strong></p><p><strong>A-&gt;B</strong>: 在版本B的基础上作出变化，形成了版本A</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144238.jpg" alt="ObjectGraph"></p><p>一个父对象可以有多个子对象（<strong>创建了分支</strong>）；除了initial commit没有父对象，一个子对象的父对象最多两个（<strong>合并分支</strong>）。</p><p>branch: a name that points to a commit</p><p>HEAD: pointing to the current commit</p><p>Git Object Graph 储单个文件的每个版本一次，并允许多次提交来共享该副本。若文件没有变化，则后续多个版本始终指向同一个文件；若文件发生变化了，存储两份不同的文件，两个版本指向不同的文件。</p><p>每个节点的存储的信息是文件信息指针tree、作者信息author、提交者信息commiter，而在每个tree中，包含所有文件的信息，对于每个文件指针，如果文件变化了，则指向变化后的新文件，如果没有变化，则指向上次提交的文件，不做重复存储。</p><ul><li>传统VCS：存储版本之间的变化（行）。优点：存储空间较小。缺点：由于存储的是变化情况，取出指定时期的文件要先取出原文件，再取出变化内容，最后做合并形成新文件，所以取出文件的时间复杂度较高。</li><li>Git：存储发生变化的文件（而非代码行），不变化的文件不重复存储，这样易于取出特定版本文件、易于创建分支（创建分支时，需要进行叠加来获得当前版本）。缺点：空间复杂度增加。</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144247.jpg" alt="VCS"></p><hr><h1 id="General-process-of-software-construction"><a href="#General-process-of-software-construction" class="headerlink" title="General process of software construction"></a><em>General</em> process of software construction</h1><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="141.483ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 62535.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1252,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1852,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2318,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2769,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3298,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3596,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(4099,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4550,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5035,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5468,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5934,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(6403,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(6872,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7357,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(7907,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(8376,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(8861,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(9411,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(9772,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(10488,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11017,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11468,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(11934,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(12367,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12852,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13452,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(13921,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(14282,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14733,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15305,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(15738,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(16099,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(16444,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(16929,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(17529,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">广</text></g><g data-mml-node="mi" transform="translate(18429,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">义</text></g><g data-mml-node="mi" transform="translate(19329,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">软</text></g><g data-mml-node="mi" transform="translate(20229,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">件</text></g><g data-mml-node="mi" transform="translate(21129,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">构</text></g><g data-mml-node="mi" transform="translate(22029,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">造</text></g><g data-mml-node="mi" transform="translate(22929,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">过</text></g><g data-mml-node="mi" transform="translate(23829,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">程</text></g><g data-mml-node="mo" transform="translate(25006.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(25562.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(26390.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(26856.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(27325.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(27670.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(28147.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(29025.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(30303.1,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(31054.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(31505.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(31990.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(32467.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(32918.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(33447.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(34325.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(35203.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(35548.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(36148.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(36625.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(37125.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(37576.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(38042.1,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(38592.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(39121.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(39554.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(39915.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(40400.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(40851.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(41196.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(41796.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(42550.9,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(43828.7,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(44656.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(45122.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(45551.7,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(46123.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(46600.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(47077.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(47422.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(48022.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(48777.4,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(50055.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(50759.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(51225.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(51694.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(52055.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(52400.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(53000.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(53755,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(55032.8,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(55791.8,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(56363.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(56708.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(57006.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(57804.6,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(59082.3,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(59841.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(60307.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(60605.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(61071.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(61600.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(62069.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="148.15ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 65482.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1417,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1868,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2319,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2804,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(3742.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4742.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(5211.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5677.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6277.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(6746.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(7212.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(7715.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8166.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(8651.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(9084.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9550.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(10019.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(10488.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10973.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(11523.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(11992.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12477.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(13027.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(13388.4,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(14104.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(14633.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15084.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(15550.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(15983.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(16468.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(17068.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(17537.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(17898.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18349.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18921.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(19354.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(19715.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(20060.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(20545.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(21145.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(21534.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(22293.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(22865.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(23210.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(23508.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(24028.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(24417.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">狭</text></g><g data-mml-node="mi" transform="translate(25317.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">义</text></g><g data-mml-node="mi" transform="translate(26217.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">软</text></g><g data-mml-node="mi" transform="translate(27117.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">件</text></g><g data-mml-node="mi" transform="translate(28017.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">构</text></g><g data-mml-node="mi" transform="translate(28917.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">造</text></g><g data-mml-node="mi" transform="translate(29817.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">过</text></g><g data-mml-node="mi" transform="translate(30717.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">程</text></g><g data-mml-node="mi" transform="translate(31617.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(32046.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(32618.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(32963.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(33261.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(34059.2,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(34615,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(35384,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(35913,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(36211,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(36556,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(37076,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(37605,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(37966,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(38709.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(39987.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(40747.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(41232.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(42110.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(42613.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(42958.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(43256.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(44000.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(45278.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(45959.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(46304.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(46904.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(47702.9,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(48980.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(49684.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(50150.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(50619.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(51258.4,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(52536.2,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(53287.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(53816.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(54249.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(54770.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(55299.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(55776.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(56520,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(57797.8,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(58301.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(58901.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(59370.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(59731.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(60260.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(60558.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(61134.6,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(62412.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(63240.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(63706.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(64209.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(64507.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(64992.3,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></svg></mjx-container></p><h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul><li><strong>Construction Languages</strong></li><li><strong>purpose 用途上划分</strong><ol><li>Programming languages (e.g., C, C++, Java, Python) 编程语言</li><li>Modeling languages (e.g., UML) 建模语言</li><li>Configuration languages (e.g., XML) 配置语言</li><li>Build languages (e.g., XML) 构建语言</li></ol></li><li><strong>form 形态上划分</strong><ol><li>Linguistic-based 基于语言学的构造语言</li><li>Mathematics-based (formal) 基于数学的形式化构造语言</li><li>Graphics-based (visual) 基于图形的可视化构造语言</li></ol></li></ul><h3 id="Programming-Languages"><a href="#Programming-Languages" class="headerlink" title="Programming Languages"></a>Programming Languages</h3><p><strong>IDE 集成开发环境</strong>包括</p><ul><li><strong>Source code editor</strong> with intelligent code completion, code refactoring tool 源代码编辑器：智能代码补全工具、代码重构工具</li><li>File management tool 文件管理</li><li>Library management tool 库管理</li><li>Class browser, object browser, class hierarchy diagram 软件逻辑实体可视化</li><li>Graphical User Interface (<strong>GUI</strong>) builder 图形化用户界面构造器</li><li>Compiler, interpreter 编译器、解释器</li><li>Build automation tools 自动化build工具</li><li>Version control system 版本控制系统</li><li>Extensible by more external third-party tools 外部的第三方工具</li></ul><h3 id="Modeling-Languages"><a href="#Modeling-Languages" class="headerlink" title="Modeling Languages"></a>Modeling Languages</h3><p>目的：可视化、推理、验证和交流系统的设计。</p><p>e.g. UML (Unified Modeling Language)</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144300.jpg" alt="UMLClassDiagram"></p><h3 id="Configuration-Languages"><a href="#Configuration-Languages" class="headerlink" title="Configuration Languages"></a>Configuration Languages</h3><p>e.g. XML, YAML, JSON</p><h2 id="Review-and-static-code-analysis"><a href="#Review-and-static-code-analysis" class="headerlink" title="Review and static code analysis"></a>Review and <em>static</em> code analysis</h2><h2 id="Dynamic-code-analysis-profiling-性能测试"><a href="#Dynamic-code-analysis-profiling-性能测试" class="headerlink" title="Dynamic code analysis/ profiling 性能测试"></a>Dynamic code analysis/ profiling 性能测试</h2><h2 id="Debugging-and-Testing"><a href="#Debugging-and-Testing" class="headerlink" title="Debugging and Testing"></a>Debugging and Testing</h2><h2 id="Refactoring-重构：不改变功能的前提下优化代码"><a href="#Refactoring-重构：不改变功能的前提下优化代码" class="headerlink" title="Refactoring 重构：不改变功能的前提下优化代码"></a>Refactoring 重构：不改变功能的前提下优化代码</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记二——软件测试与测试优先编程</title>
      <link href="/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red"> <strong>IMPORTANCE 本章重点</strong> </font></p><p><font color="red"> <strong>什么是测试</strong> </font></p><p><font color="red"> <strong>白盒测试与黑盒测试</strong> </font></p><p><font color="red"> <strong>按阶段、分步骤测试</strong> </font></p></blockquote><h1 id="1-Software-Testing"><a href="#1-Software-Testing" class="headerlink" title="1. Software Testing"></a>1. Software Testing</h1><h2 id="What-is-Testing"><a href="#What-is-Testing" class="headerlink" title="What is Testing"></a>What is Testing</h2><p>软件测试：为涉众提供有关被测试产品或服务的<strong>质量信息</strong>而进行的调查，是<strong>提高软件质量的重要手段</strong>，但是软件质量取决于设计而不是testing。</p><ul><li>寻找bug，确认是否达到可用级别(用户需求)</li><li>关注系统的某一侧面的<strong>质量特性</strong></li></ul><p>测试无法达到100%的无错误，never completely prove the absence of errors。</p><p>residual defect rates 残留缺陷率（bugs left over after the software has shipped）。对于大的系统来说，即使残留缺陷率很低，残留的bug也可能很多。</p><ul><li>1-10 defects/kloc(1000 Lines of Code)：Typical industry software</li><li>– 0.1-1 defects/kloc: High-quality validation.(Java Libraries)</li><li>0.01-0.1 defects/kloc: The very best, safety-critical validation.(NASA, Praxis)</li></ul><p>测试的目标与其他开发流程目标相反：to find errors（破坏、证错、“负能量”）</p><p>good testing： 能发现错误、不冗余、最佳特性、别太复杂也别太简单</p><h2 id="Testing-Level"><a href="#Testing-Level" class="headerlink" title="Testing Level"></a>Testing Level</h2><ul><li>Unit testing 单元测试：代码部分功能测试</li><li>Integration testing 集成测试：类、包、组件、子系统的组合执行</li><li>System testing 系统测试：完全集成的系统</li><li>Regression testing 回归测试：发现错误，改正后，前面的重新测试（自动化）</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143914.jpg" alt="TestLevel"></p><h2 id="Static-vs-Dynamic-Testing"><a href="#Static-vs-Dynamic-Testing" class="headerlink" title="Static vs. Dynamic Testing"></a>Static vs. Dynamic Testing</h2><ol><li><strong>静态测试 Static testing</strong>：without actually executing programs, 靠眼睛看，隐式的静态程序分析，review、walkthroughs、inspections</li><li><strong>动态测试 Dynamic testing</strong>：给定测试用例执行</li></ol><h2 id="Testing-vs-Debugging"><a href="#Testing-vs-Debugging" class="headerlink" title="Testing vs. Debugging"></a>Testing vs. Debugging</h2><ol><li><strong>测试</strong>：发现是否存在错误 (errors)</li><li><strong>调试</strong>：识别错误根源，消除错误 (causes of errors)</li></ol><h2 id="White-box-vs-black-box-testing"><a href="#White-box-vs-black-box-testing" class="headerlink" title=" White-box vs. black-box testing "></a><font color="red"> White-box vs. black-box testing </font></h2><ol><li><strong>白盒测试</strong>：对程序<strong>内部代码</strong>结构的测试，程序执行情况，by seeing the source code</li><li><strong>黑盒测试</strong>：对程序<strong>外部表现</strong>出来的行为的测试。just input and output，程序完成之前可以确定，用于<strong>检查代码的功能，不关心内部实现细节</strong></li></ol><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143931.jpg" alt="WhiteVSBlack-box-testing"></p><hr><h1 id="2-Test-Case"><a href="#2-Test-Case" class="headerlink" title="2. Test Case"></a>2. Test Case</h1><p><strong>测试用例：输入＋执行条件+期望结果</strong></p><p><em>E.g.</em> test cases: {2,4}, {0,0}, {-2,4} for program y=x^2</p><h1 id="3-Test-First-Programming"><a href="#3-Test-First-Programming" class="headerlink" title="3. Test-First Programming"></a>3. Test-First Programming</h1><p><strong>TDD Test-driven development</strong>：先写<strong>spec</strong> -&gt; 再写符合spec的<strong>测试用例</strong> -&gt; 写<strong>代码</strong>、<strong>执行测试</strong>、有问题再改、再执行测试用例，直到通过它</p><p>Testing First Saves a lot of time.避免将缺陷插入代码然后，减少检测到缺陷代码并删除缺陷的时间量</p><h1 id="4-Unit-Testing（单元测试）"><a href="#4-Unit-Testing（单元测试）" class="headerlink" title="4. Unit Testing（单元测试）"></a>4. Unit Testing（单元测试）</h1><p>针对软件的<strong>最小</strong>单元模型开展测试，隔离各个**模块(the software component or module)**，容易定位错误和调试。</p><h1 id="5-Automated-Unit-Testing-with-JUnit"><a href="#5-Automated-Unit-Testing-with-JUnit" class="headerlink" title="5. Automated Unit Testing with JUnit"></a>5. Automated Unit Testing with JUnit</h1><p><strong>annotation</strong>: @Test </p><p><strong>assertion methods</strong> like assertEquals, assertTrue, and assertFalse.</p><hr><h1 id="6-black-box-Testing"><a href="#6-black-box-Testing" class="headerlink" title="6.  black-box Testing "></a>6. <font color="red"> black-box Testing </font></h1><p><strong>only from the specification, not the implementation of the function</strong></p><p>黑盒测试用例根据<strong>规约</strong>、要求、设计参数来形成的。</p><p>用尽可能少的测试用例，尽快运行，并尽可能大的发现程序的错误。</p><h2 id="6-1-Choosing-Test-Cases-by-Partitioning-划分"><a href="#6-1-Choosing-Test-Cases-by-Partitioning-划分" class="headerlink" title="6.1 Choosing Test Cases by Partitioning 划分"></a>6.1 Choosing Test Cases by Partitioning 划分</h2><p><font color="red"> <strong>Equivalence Partitioning 等价类划分</strong> </font></p><ul><li>被测函数的<strong>输入域划分为等价类</strong>，从等价类中导出测试用例（衍生）</li><li>如果一组对象可以通过<strong>对称、传递和自反</strong>的关系链接，则存在等价类。</li><li>每个等价类代表着对输入约束加以满足/违反的有效/无效数据的集合</li></ul><p><strong>基于假设</strong>：相似的输入，将会展示相似的行为，可从每个等价类中选一个代表作为测试用例即可，可以降低测试用例数量。</p><p>等价类划分所选用例要<strong>覆盖全部类</strong>，还要考虑一些<strong>特殊情况（边界值等）</strong>：</p><ul><li>限定了数值范围：one valid and two invalid</li><li>指明了特定的值：one valid and one invalid</li><li>确定了一组数值：one valid and one invalid</li><li>输入数据是Boolean：one valid and one invalid</li></ul><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143948.jpg" alt="EquivalencPartitioningExample"></p><h2 id="Include-Boundaries-in-the-Partition"><a href="#Include-Boundaries-in-the-Partition" class="headerlink" title="Include Boundaries in the Partition"></a>Include Boundaries in the Partition</h2><p>Boundary Value Analysis (BVA) 边界测试</p><p>大量的错误发生在输入域的“边界”而非中央</p><p>边界值分析方法是对等价类划分方法的补充</p><p><strong>在等价类划分时，将边界作为等价类之一加入考虑</strong></p><h2 id="笛卡尔积：全覆盖-覆盖每个取值：最少1次即可"><a href="#笛卡尔积：全覆盖-覆盖每个取值：最少1次即可" class="headerlink" title="笛卡尔积：全覆盖/覆盖每个取值：最少1次即可"></a>笛卡尔积：全覆盖/覆盖每个取值：最少1次即可</h2><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144003.jpg" alt="BVAExample"></p><p>以此为例：</p><ol><li><strong>笛卡尔积全覆盖</strong>：3 × 5 × 5 = 75 test cases, but some combinations are impossible, such as <strong>a&lt;b, a=0, b=0</strong>（多维度多取值，组合每个维度都要有取值，但是并非所有组合情况都可能）</li><li><strong>Cover each part 覆盖每个取值最少1次即可</strong>：每个维度的每个取值至少被1个测试用例覆盖一次即可，如下。</li></ol><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144010.jpg" alt="BVAExampleAnswer"></p><p>笛卡尔积全覆盖测试完备，但用例数量多，测试代价高；后者方法测试用例少，代价低，但测试覆盖度未必高。Often we strike some compromise between these two extremes，两个极端之间做出一些<strong>妥协</strong>（出于谨慎、受白盒测试和代码覆盖工具的影响）。</p><h1 id="7-White-box-Testing"><a href="#7-White-box-Testing" class="headerlink" title="7 White-box Testing"></a>7 White-box Testing</h1><p><strong>白盒测试要考虑内部实现细节</strong>，开发人员去实现，<strong>尽量走全代码</strong>。</p><p>根据<strong>程序执行路径</strong>设计测试用例，只测试实现功能（不能测试缺失功能），不是根据需求选择的测试用例。</p><p>白盒测试可以在 unit, integration and system levels 执行，一般较早执行。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144020.jpg" alt="BlackBoxTest"></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718144027.jpeg"></p><p>独立/基本路径测试：对程序所有执行路径进行等价类划分，找出有代表性的最简单的路径（例如循环只需执行1次），设计测试用例使每一条<strong>基本路径被至少覆盖1次</strong>。</p><h1 id="8-Coverage-of-Testing"><a href="#8-Coverage-of-Testing" class="headerlink" title="8 Coverage of Testing"></a>8 Coverage of Testing</h1><p>Code coverage 代码覆盖度：已有的测试用例有多大程度覆盖了被测程序（百分比衡量覆盖度）</p><p>代码覆盖度越低，测试越不充分；但要做到很高的代码覆盖度，需要更多的测试用例，测试代价高。</p><p><strong>测试效果（难度）：路径覆盖&gt;分支覆盖&gt;语句覆盖（条件覆盖和分支覆盖没有可比性）</strong></p><p>最彻底的白盒测试是覆盖程序中的每一条路径（<strong>路径覆盖</strong>），但由于一般存在循环，路径数量巨大，难以全覆盖。</p><p> a code coverage tool EclEmma</p><p>实际中，根据预先设定的覆盖度标准，<strong>逐步增加测试用例</strong>的数量，直到覆盖度达到标准</p><h1 id="9-Automated-Testing-and-Regression-Testing"><a href="#9-Automated-Testing-and-Regression-Testing" class="headerlink" title="9 Automated Testing and Regression Testing"></a>9 Automated Testing and Regression Testing</h1><p><strong>Automated testing</strong>： 自动调用被测函数、自动判定测试结果、自动计算覆盖度。只是“测试用例的自动执行”，并非“自动生成测试用例”。A good testing framework, like <strong>JUnit</strong>, helps you build automated test suites, make  it easy to run the tests, not create test cases.</p><p><strong>Regression testing 回归测试</strong>：一旦程序被<strong>修改</strong>，重新执行之前的<strong>所有</strong>测试。</p><p>a test is good if it elicits a bug.</p><p>Automated regression testing 自动化回归测试（above 2 testing methods combined）：一旦发现bug，要马上写一个可重现该bug的测试用例，并将其加入测试库</p><h1 id="10-Documenting-Your-Testing-Strategy"><a href="#10-Documenting-Your-Testing-Strategy" class="headerlink" title="10 Documenting Your Testing Strategy"></a>10 Documenting Your Testing Strategy</h1><p>测试策略（根据什么来选择测试用例）非常重要，需要在程序中显式记录下来。</p><p>目的：在代码评审过程中，其他人可以理解你的测试，并评判你的测试是否足够充分</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造笔记一——软件构造的多维视图和质量目标</title>
      <link href="/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="多维视图和质量目标">多维视图和质量目标</h1><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143514.jpg" alt="MultiDimensionalSoftwareViews"><figcaption aria-hidden="true">MultiDimensionalSoftwareViews</figcaption></figure><hr><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143536.jpg" alt="ThreeDimension"><figcaption aria-hidden="true">ThreeDimension</figcaption></figure><h2 id="build-time-views">Build-time Views</h2><p><strong>Build-time（构造阶段）</strong>：idea <strong>-&gt;</strong> requirement <strong>-&gt;</strong> design <strong>-&gt;</strong> code <strong>-&gt;</strong> installable / executable package</p><blockquote><p><strong>Code-level view（代码的逻辑组织）</strong>：source code -- how source code are <em>logically</em> organized by basic program blocks such as functions（函数）, classes（类）, methods（方法）, interfaces（接口）.</p><p><strong>Component-level view（代码的物理组织）</strong>：architecture -- how source code are <em>physically</em> organized by files（文件）, directories（目录）, packages（包）, libraries（库）.</p><p><strong>Moment view</strong>：what do source code and component look like <em>in a specific time</em></p><p><strong>Period view</strong>： how do they evolve/change <em>along with time</em></p></blockquote><h3 id="build-time-moment-and-code-level-view">Build-time, moment, and code-level view</h3><ul><li><strong>词汇层面</strong>：Lexical-oriented source code</li><li><strong>语法层面</strong>：Syntax-oriented program structure: e.g. Abstract Syntax Tree (AST)</li><li><strong>语义层面</strong>：Semantics-oriented program structure: e.g. Class Diagram</li></ul><p><strong>AST：</strong>彻底结构化，将源代码变为一棵树，对树做各种操作==对源代码的修改.</p><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143552.png" alt="AST"><figcaption aria-hidden="true">AST</figcaption></figure><p><strong>Class Diagram (UML)</strong>：describe interfaces, classes, attributes, methods, and relationships among them.</p><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143602.jpg" alt="UML"><figcaption aria-hidden="true">UML</figcaption></figure><h3 id="build-time-period-and-code-level-view">Build-time, period, and code-level view</h3><ul><li><strong>Code churm（代码变化）</strong></li></ul><h3 id="build-time-moment-and-component-level-view">Build-time, moment, and component-level view</h3><ul><li><strong>file, package, library</strong></li><li><strong>Static linking</strong></li><li><strong>Test Case</strong></li><li>build sript(component diagram) 构建脚本（组件图）</li></ul><p>Source code (physically organize)<strong>-&gt;</strong> files (organized by directories/ encapsulated) <strong>-&gt;</strong> packages <strong>-&gt;</strong> logically components and sub-systems（组件和子系统）.</p><p>Reusable modules（可重用模块） are in the form of libraries（库）.<strong>Libraries</strong> are stored in disk files（磁盘文件）.<strong>Sources of libraries</strong>: OS pre-installed set/ language SDK/ third-party sources/ developers' own published libraries.</p><p>When a program is edited, built and installed, a list of libraries to search must be provided.（编程、build和安装时，需要提供库路径）。Two approaches integrating a library into program: Static or Dynamic linking.</p><p><strong>Static linking</strong>：静态链接发生在构造阶段(build time), 库被拷贝进入代码形成整体，执行的时候无需提供库文件.</p><p><strong>Dynamic linking</strong>：build time 仅仅做出标记，<strong>Runtime</strong>根据标记转载至内存与主程序关联。</p><h3 id="build-time-period-and-component-level-view">Build-time, period, and component-level view</h3><p>How files/packeages/components/libraries change.</p><ul><li>Software Configuration Item (<strong>SCI</strong>，配置项)</li><li><strong>Version</strong> (版本)</li></ul><hr><h2 id="runtime-views">Runtime views</h2><p><strong>Runtime（运行阶段）</strong>: 程序被载入目标机器以及目标机器所需磁盘文件</p><blockquote><p><strong>Code-level view</strong>: 代码层面 -- 逻辑实体（程序）在<strong>内存</strong>中如何呈现，程序单元（函数、对象等）交互情况</p><p><strong>Component-level view</strong>: 构件层面 -- 物理实体在<strong>物理硬件环境</strong>中如何呈现和交互？</p><p><strong>Moment view</strong>: 逻辑/物理实体在内存/硬件环境中<strong>特定时刻</strong>的形态如何？</p><p><strong>Period view</strong>: 逻辑/物理实体在内存/硬件环境中的形态随时间如何<strong>变化</strong>？</p></blockquote><h3 id="high-level-concepts-of-run-time-software">High-level concepts of run-time software</h3><ul><li><strong>Executable programs (可执行程序)</strong>：CPU执行的机器可读指令</li><li><strong>Libraries</strong></li><li><strong>Configuration and data files (配置和数据文件)</strong> that the program can load from disk</li><li><strong>Distributed programs (分布式程序)</strong>：多进程</li><li><strong>Native Machine Code (原生机器码)</strong></li><li><strong>Full Program Interpretation (程序完全解释执行)</strong></li><li><strong>Interpreted Byte Codes (解释型字节码)</strong></li></ul><h3 id="run-time-moment-and-code-level-view">Run-time, moment, and code-level view</h3><ul><li><strong>Code Snapshot</strong></li><li><strong>Memory dump (内存信息转储)</strong></li></ul><p><font color="red"><strong>Snapshot Diagram</strong>：程序运行时内存里变量层面的状态。</font></p><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143632.jpg" alt="SnapshotDiagram1"><figcaption aria-hidden="true">SnapshotDiagram1</figcaption></figure><h3 id="run-time-period-and-code-level-view">Run-time, period and code-level view</h3><ul><li><strong>Execution tracing (执行跟踪)</strong>：用日志方式记录程序执行的调用次序。</li><li><strong>Concurrent multi-threads (并发多线程)</strong></li></ul><h3 id="run-time-moment-and-component-level-view">Run-time, moment, and component-level view</h3><h3 id="run-time-period-and-component-level-view">Run-time, period, and component-level view</h3><ul><li><strong>Event log (事件日志)</strong></li><li><strong>Multi-processes (多进程)</strong></li><li><strong>Distributed processes (分布式进程)</strong></li></ul><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143651.jpg" alt="EventLogAndExecutionTracing"><figcaption aria-hidden="true">EventLogAndExecutionTracing</figcaption></figure><hr><h1 id="transformation-between-views">Transformation between views</h1><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143712.jpg" alt="TransformationBetweenViews"><figcaption aria-hidden="true">TransformationBetweenViews</figcaption></figure><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.59ex" xmlns="http://www.w3.org/2000/svg" width="9.698ex" height="2.312ex" role="img" focusable="false" viewBox="0 -761 4286.6 1022"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-11)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(2055.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2815.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3300.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3820.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></g></svg></mjx-container></span> 类、属性、方法</p><p>  Programming / Coding (ADT抽象数据类型 /OOP面向对象的程序设计)</p><p>  Review, static analysis/checking</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="20.191ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8924.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1765,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2508.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(3786.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(4546.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5031.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5909.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(6412.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6897.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7497.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(7963.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8563.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg></mjx-container></span> 模块化</p><p>  Design (ADT/OOP; Reusability; Maintainability)</p><p>  Build: compile, static link, package, install, etc</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="28.338ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12525.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1331,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1676,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1974,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(2716.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3716.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(4077.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4422.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5300.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(6044.2,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(7322,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(8081,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8653,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9475.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10475.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(10836.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11181.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12059.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></g></svg></mjx-container></span> 创建于运行</p><p>  Install / deploy</p><p>  Debug, unit/integration testing (Robustness and Correctness) 测试</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="19.818ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8759.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1051,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1536,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2414,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2880,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3480,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4118.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(5396.6,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(6147.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(6613.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7064.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7409.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7894.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8239.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></g></svg></mjx-container></span> 瞬时与周期</p><p>  Version control</p><p>  Loading, dynamic linking, execution (dumping, profiling, logging)</p><p>  Concurrent threads</p><hr><h1 id="quality-properties-of-software-systems-软件系统的质量">Quality properties of software systems (软件系统的质量)</h1><blockquote><p>External quality factors affect users. <strong>外部质量影响用户</strong></p><p>Internal quality factors affect the software itself and its developers. <strong>内部质量因素 影响 软件本身和它的开发者</strong></p><p>External quality results from internal quality. <strong>外部质量取决于内部质量，最终外部质量才最重要</strong></p></blockquote><h2 id="外部质量因素">外部质量因素</h2><p><strong>外部质量因素：速度或易用性等质量，被用户检查</strong></p><ol type="1"><li><p><strong>Correctness (正确性)</strong>: 输入输出正确，按定义的规约 (specification)执行，这是软件开发<strong>最重要</strong>的因素。</p><ul><li>测试和调试 (Testing and debugging)：发现不正确、消除不正确</li><li>防御式编程 (Defensive programming)：在写程序的时候就确保正确性 (e.g. typing and assertions)</li><li>形式化方法 (Formal approach)：通过形式化验证发现问题</li></ul></li><li><p><strong>Robustness (健壮性)</strong>: 健壮性是针对异常情况的处理，<strong>出现异常(abnormal conditions)时不要“崩溃”</strong></p><ul><li>未被specification覆盖的情况即为"异常情况"</li><li>"narmal"和"abnormal"是主观而非客观的</li><li>产生错误信息，干净终止执行，进入“优雅”模式</li><li>出现规约定义之外的情形的时候，软件要做出恰当的反应</li></ul><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143734.jpg" alt="RobustnessVSCorrectness"><figcaption aria-hidden="true">RobustnessVSCorrectness</figcaption></figure></li><li><p><strong>Extendibility (可扩展性)</strong>: 适应规约变化的容易程度。 要便于软件功能的增加/扩展（ADT、OOP、留下一个Visitor），降低未来修改软件时的成本。</p><ul><li><strong>Design simplicity (简约主义设计)</strong></li><li><strong>Decentralization (分离主义设计)</strong>：模块化</li><li><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="45.194ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19975.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(1277.8,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(2027.8,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(2855.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(3559.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4088.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4688.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5208.8,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(5971.8,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(6734.8,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7485.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(7985.8,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(9036.8,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9521.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(10041.8,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10613.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(10911.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11440.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11891.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12236.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(12597.8,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13087.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(13616.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14216.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(14736.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(15265.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(15785.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(16314.8,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(16817.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(17178.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17707.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(18136.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18481.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(18779.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(19124.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(19485.8,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></li></ul></li><li><p><strong>Reusability (可复用性)</strong>: 一次开发，多次使用，寻找共性，未来直接使用现在的这段代码。</p></li><li><p><strong>Compatibility (兼容性)</strong>: 不同的软件系统之间相互可容易的集成。</p><ul><li>保持设计的同构性</li><li>兼容性的关键是<strong>标准化</strong>，特别是标准协议。</li></ul></li><li><p><strong>Efficiency (性能)</strong>: 。</p><ul><li>性能毫无意义，除非有足够的正确性</li><li>对性能的关注要与其他质量属性进行折中</li><li>过度的优化导致软件不再适应变化和复用</li><li>不要过早的优化，性能在没有正确性保障的条件下是没有意义的</li><li>性能和其他质量目标冲突，折中处理</li></ul></li><li><p><strong>Portability (可移植性)</strong>: 软件可方便地在不同的技术环境之间移植。</p><ul><li>硬件、操作系统</li></ul></li><li><p><strong>Ease of use (易用性)</strong>: 容易学、安装、操作、监控，给用户提供详细的指南。</p><ul><li><strong>Structural simplicity (结构简单)</strong>: 易于学习使用</li><li><strong>Know the user</strong>: understand the system’s intended user community</li></ul></li><li><p><strong>Functionality (功能性)</strong>: 功能过多程序复杂、不灵活、占用过多的磁盘空间，会导致易用性的降低。</p><ul><li>每增加一小点功能，都确保其他质量属性不受到损失</li><li>主要功能要首要提升质量 <img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143749.jpg" alt="OsmondCurves"></li></ul></li><li><p><strong>Timeliness (及时性)</strong>: 软件要能够在用户需要甚至之前，能及时地设计出来。</p></li><li><p><strong>Other qualities</strong>: Verifiability (可验证性), Integrity (完整性), Repairability (可修复性), Economy (经济性)。</p></li></ol><hr><h2 id="内部质量因素">内部质量因素</h2><p><strong>内部质量因素：软件产品品质，如模块化和可读性，开发人员才能察觉</strong></p><ul><li>代码行数 (LOC)、圈复杂度 (Cyclomatic <strong>Complexity</strong>)</li><li><ul><li>Complexity 是外部因素的 enemy</li></ul></li><li>构架相关因素：耦合 (coupling)、内聚 (cohesion)</li><li>可读性 (Readability)</li><li>可理解性 (Understandability)</li><li>整洁度 (Clearness)</li><li>大小 (Size)</li></ul><h2 id="tradeoff-between-quality-properties-折中妥协">Tradeoff between quality properties (折中、妥协)</h2><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143812.jpg" alt="tradeoff"><figcaption aria-hidden="true">tradeoff</figcaption></figure><p>以上这些质量属性之间往往不能兼得，需要权衡，某些特定要求下可以放弃优化其他项而优化另一项。</p><p>正确的软件开发过程中，开发者应该将不同质量因素之间如何做出折中的设计决策和标准明确的写下来。</p><p><strong><em>正确性是绝不能与其他质量因素折中的.</em></strong></p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143822.jpg" alt="OOPimprovesQuality">五个关键的质量指标</p><figure><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143843.jpg" alt="FiveKeyQualityObjectives"><figcaption aria-hidden="true">FiveKeyQualityObjectives</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造——实验二总结</title>
      <link href="/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%EF%BC%9A%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/08/Software%20Construction/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%EF%BC%9A%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="循环判断删除list元素"><a href="#循环判断删除list元素" class="headerlink" title="循环判断删除list元素"></a>循环判断删除list元素</h1><h2 id="错误演示增强for循环"><a href="#错误演示增强for循环" class="headerlink" title="错误演示增强for循环"></a>错误演示增强for循环</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">String deleteString = <span class="string">"del"</span>;</span><br><span class="line">lists.add(<span class="string">"del"</span>);</span><br><span class="line">lists.add(<span class="string">"fhd"</span>);</span><br><span class="line">lists.add(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : lists)</span><br><span class="line">    <span class="keyword">if</span> (s.equals(deleteString))</span><br><span class="line">        lists.remove(s);</span><br></pre></td></tr></tbody></table></figure><p>删除元素后继续循环会报错误信息ConcurrentModificationException，如下图所示：</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143350.jpg" alt="增强forError"></p><p><strong>直接原因：</strong><code>modCount != expectedModCount</code></p><ul><li><code>modCount</code>表示List的<code>add</code>或者<code>remove</code>方法次数</li><li><code>expectedModCount</code>是指 Iterator现在期望这个 List被修改的次数 </li></ul><p><strong>分析</strong> ：java的增强for循环根据list对象创建一个Iterator迭代对象，创建的时候modCount被赋值给了expectedModCount，但是调用<code>remove</code>方法的时候<code>modCount++</code>，但是expectedModCount没有改变，两个Count值不相等，由此抛出异常。所以不必赘述，使用iterator遍历删除的话，也会出现相同的错误。</p><h3 id="特别地"><a href="#特别地" class="headerlink" title="特别地"></a>特别地</h3><p>根据经验判断只有删除倒数第二个元素的时候不会抛出异常，删除其他元素都会抛出异常，此处就不再去追究原因。如下代码演示（将上述代码中deleteString从”del”换成”fhd”）以及结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteString = <span class="string">"fhd"</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143414.jpg" alt="forLast2delete"></p><h2 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h2><h3 id="创建一个作为条件判断的List"><a href="#创建一个作为条件判断的List" class="headerlink" title="创建一个作为条件判断的List"></a>创建一个作为条件判断的List</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : lists)</span><br><span class="line">    res.add(s);</span><br><span class="line"><span class="keyword">for</span> (String s : res) {</span><br><span class="line">    <span class="keyword">if</span> (s.equals(deleteString))</span><br><span class="line">        lists.remove(s);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用removeIf方法"><a href="#使用removeIf方法" class="headerlink" title="使用removeIf方法"></a>使用<code>removeIf</code>方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lists.removeIf(string-&gt;string.equals(<span class="string">"deleteString"</span>));</span><br></pre></td></tr></tbody></table></figure><p>其中 <strong>-&gt;</strong> 后面的是判断条件，符合条件的<code>string</code>就删除。 </p><hr><h1 id="关于HashMap方法的总结"><a href="#关于HashMap方法的总结" class="headerlink" title="关于HashMap方法的总结"></a>关于HashMap方法的总结</h1><h2 id="java-HashMap-插入重复key"><a href="#java-HashMap-插入重复key" class="headerlink" title="java HashMap 插入重复key"></a>java HashMap 插入重复key</h2><p>在解释插入重复key会发生什么之前，不妨先了解一下HashMap是怎么储存和运行的。</p><p><strong>储存</strong> ：首先对于一对key和value，调用key的<code>hashCode()</code>方法得到对应的bucket位置，相同hashcode的Key就储存在同一个bucket中。但HashMap并不是直接储存，而是每一个bucket都对应一个LinkedList or as Entry，如下所示。由此，相同hashcode的key放在同一LinkedList上。</p><p><img src="https://gitee.com/ifu18/blog-image/raw/master/2021/20210718143425.png" alt="HashMap"></p><p><strong><code>put()</code>方法的实现</strong> ：首先得到待插入key的hashcode，根据此找到插入位置所在的LinkedList，之后会通过<code>equals(key)</code>方法判断是否存在键值对。对于重复的key和value，会用new value覆盖value，并返回old value；若之前不存在相应key，则返回<code>null</code>，这样就实现了key的唯一性。</p><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><ul><li><strong>浅拷贝</strong> ：HashMap的浅拷贝结果映射到与原始HashMap相同的key和value对象。</li><li><strong>深拷贝</strong> ：HashMap的深拷贝可以深入复制所有映射，为所有key、value和映射创建新对象。</li></ul><h3 id="shallow-copy-examples"><a href="#shallow-copy-examples" class="headerlink" title="shallow copy examples"></a>shallow copy examples</h3><p><strong>1.HashMap clone() method</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, <span class="keyword">int</span>&gt; shallowCopy = originalMap.clone();</span><br></pre></td></tr></tbody></table></figure><p><strong>2.putAll() method</strong> shallow-copies all of the mappings in one step.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, <span class="keyword">int</span>&gt; shallowCopy = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">shallowCopy.putAll(originalMap); </span><br></pre></td></tr></tbody></table></figure><p><strong>3.put() method</strong>  by iterating over each entry and calling the put() method on another map.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, <span class="keyword">int</span>&gt; shallowCopy = <span class="keyword">new</span> HashMap&lt;String, <span class="keyword">int</span>&gt;();</span><br><span class="line">Set&lt;Entry&lt;String, <span class="keyword">int</span>&gt;&gt; entries = originalMap.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, <span class="keyword">int</span>&gt; mapEntry : entries) {</span><br><span class="line">    shallowCopy.put(mapEntry.getKey(), mapEntry.getValue());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="deep-copy-examples"><a href="#deep-copy-examples" class="headerlink" title="deep copy examples"></a>deep copy examples</h3><p><strong>serialization–java序列化</strong></p><p>Use Google Gson library/ Alibaba to serialize the HashMap and deserialize.</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIT-Software-Construction </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
